{"version":3,"file":"chords.umd.js","sources":["../../songcheat-core/src/utils.js","../../songcheat-core/src/parser.js","../../songcheat-core/src/compiler.js","../../songcheat-core/src/chordpix.js","../src/chords.js"],"sourcesContent":["export class Utils {\n  /**\n   * Array helper functions\n   */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n   * String helper functions\n   */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  static replaceComposedChars (s) {\n    // fix composed UTF8 characters (not handled correctly by ACE when typing a newline after one of those)\n    // http://php.net/manual/fr/regexp.reference.unicode.php\n    // http://www.fileformat.info/info/unicode/category/Mn/list.htm\n\n    s = s.replace(/a\\u0300/g, 'à')\n    s = s.replace(/e\\u0300/g, 'è')\n    s = s.replace(/e\\u0301/g, 'é')\n    s = s.replace(/e\\u0302/g, 'ê')\n    s = s.replace(/i\\u0302/g, 'î')\n    s = s.replace(/o\\u0302/g, 'ô')\n    s = s.replace(/u\\u0302/g, 'û')\n    s = s.replace(/a\\u0302/g, 'â')\n    s = s.replace(/o\\u0303/g, 'õ')\n    s = s.replace(/a\\u0303/g, 'ã')\n\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nexport class ParserException {\n  constructor (line, message) {\n    this.message = message\n    this.line = line\n  }\n\n  toString () {\n    return 'Parser error at line ' + this.line + ': ' + this.message\n  }\n}\n\nclass Parser_ {\n  constructor () {\n    this.songcheat = {}\n    this.blocks = {}\n  }\n\n  parse (text) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return this.songcheat\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n    }\n\n    return this.songcheat\n  }\n\n  getPrecedingKeyword (text, line) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    let lastResult = null\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return true\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      if (token.line > line) return lastResult\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n\n      lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null }\n\n      if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1\n      else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1\n      else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1\n      else if (keyword === 'structure') {\n        // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n        let paramIndex = 0\n        for (let param of params) {\n          if (param.line > line) break\n          lastResult.unitIndex = Math.floor(paramIndex / 2)\n          paramIndex++\n        }\n      }\n    }\n\n    return lastResult\n  }\n\n  isKeyword (token) {\n    let keyword = Utils.camelCase(token.value)\n    return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false\n  }\n\n  tokenize (text) {\n    let tokens = []\n\n    // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n    let reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n    let reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n\n    let lineNumber = 1\n\n    // split at newlines unless enclosed in quotes\n    for (let line of text.split(reNewline)) {\n      // split also returns the newlines, ignore them\n      if (line.match(/^\\r?\\n$/)) continue\n\n      // trim line\n      line = line.trim()\n\n      // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n      // if not a comment or empty line\n      if (line && !line.match(/^#/)) {\n        // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n        for (let value of line.split(reSpaces).map(s => s.trim().replace(/^\"|\"$/g, ''))) tokens.push({ 'value': value, 'line': lineNumber })\n      }\n\n      // increment line number\n      lineNumber += (1 + (line.match(/(?:\\r?\\n)/g) || []).length)\n    }\n\n    return tokens\n  }\n\n  handleDefault (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value\n  }\n\n  handleSignature (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || {}\n    this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value\n  }\n\n  handleKey (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleTempo (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleShuffle (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n\n  handleTime (line, keyword, params) {\n    if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || []\n    this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value }\n  }\n\n  handleChord (line, keyword, params) {\n    if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length)\n\n    let name = params[0].value\n    let tablature = params[1].value\n    let fingering = params.length >= 3 ? params[2].value : '000000/-'\n    let comment = params.length >= 4 ? params[3].value : ''\n\n    this.songcheat['chords'] = this.songcheat['chords'] || []\n    let chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment }\n    this.songcheat['chords'].push(chord)\n\n    // return created chord (used when meeting an inline chord)\n    return chord\n  }\n\n  handleRhythm (line, keyword, params) {\n    if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length)\n    this.songcheat['rhythms'] = this.songcheat['rhythms'] || []\n    this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value })\n  }\n\n  handleBlock (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.blocks[params[0].value] = params.slice(1)\n  }\n\n  handlePart (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.songcheat['parts'] = this.songcheat['parts'] || []\n\n    // extract part name from params\n    let part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] }\n    params = params.splice(1)\n    this.songcheat['parts'].push(part)\n\n    // iterate on remaining params to get bars and phrases\n    let bars = []\n    for (let pIndex = 0; pIndex < params.length; pIndex++) {\n      let param = params[pIndex]\n\n      // phrase separator\n      if (param.value === '||') {\n        part.phrases.push({ 'bars': bars })\n        bars = []\n        continue\n      }\n\n      // bar repeater\n      if (param.value === '%') {\n        if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase')\n        bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])))\n        continue\n      }\n\n      // bar between []\n      if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n        let bar = { 'rhythm': null, 'chords': [] }\n        let str = param.value.substr(1, param.value.length - 2)\n        let parts = str.split(/\\*|:/)\n\n        // find rhythm\n        let found = false\n        for (let rhythm of this.songcheat['rhythms']) {\n          if (rhythm.name === parts[0]) {\n            bar.rhythm = rhythm.id\n            found = true\n            break\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm')\n\n        // find chords\n        parts = parts.slice(1)\n        for (let part of parts) {\n          // chord repeater\n          if (!part.trim()) {\n            if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar')\n            bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])))\n            continue\n          }\n\n          // search for chord by its name\n          let found = false\n          for (let chord of this.songcheat['chords']) {\n            if (chord.name === part) {\n              bar.chords.push(chord.id)\n              found = true\n              break\n            }\n          }\n\n          // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n          if (!found && part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n            // create inline chord with the name being the tablature itself, and no fingering nor comment\n            let chord = this.handleChord(param.line, 'chord', [{ value: part, line: param.line }, { value: part.split('/')[0], line: param.line }, { value: '000000/' + (part.split('/')[1] || '-'), line: param.line }])\n            bar.chords.push(chord.id)\n            found = true\n          }\n\n          if (!found) throw new ParserException(param.line, part + ' is not the name of an existing chord and is not a valid chord tablature')\n        }\n\n        bars.push(bar)\n        continue\n      }\n\n      // not a || phrase separator nor a [] bar: must be a block name\n      if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block')\n\n      // insert block tokens in params at current position\n      let args = [pIndex, 1]\n      Array.prototype.push.apply(args, this.blocks[param.value])\n      Array.prototype.splice.apply(params, args)\n      pIndex--\n    }\n\n    // end of last phrase\n    if (bars.length > 0) part.phrases.push({ 'bars': bars })\n  }\n\n  handleStructure (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length)\n    if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length)\n    this.songcheat['structure'] = this.songcheat['structure'] || []\n\n    for (let pIndex = 0; pIndex < params.length; pIndex += 2) {\n      let param = params[pIndex]\n\n      let found = false\n      for (let part of this.songcheat['parts']) {\n        if (part.name === param.value) {\n          this.songcheat['structure'].push({ 'id': this.songcheat['structure'].length + 1, 'part': part.id, 'lyrics': params[pIndex + 1].value })\n          found = true\n          break\n        }\n      }\n\n      if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part')\n    }\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Parser {\n  constructor () {\n    this.parser_ = new Parser_()\n  }\n\n  parse (songcheat) {\n    return this.parser_.parse(songcheat)\n  }\n\n  getPrecedingKeyword (songcheat, line) {\n    return this.parser_.getPrecedingKeyword(songcheat, line)\n  }\n}\n","import { Utils } from './utils'\n\nlet MIN_LYRICS_BARLEN = 20 // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nlet LYRICS_SUM_DURATIONS = false // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nlet KEEP_EMPTY_LINES = false\n\nexport class CompilerException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Compiler error: ' + this.message\n  }\n}\n\nclass Compiler_ {\n  constructor (DEBUG) {\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  compile (songcheat) {\n    // default values for optional properties\n    songcheat.mode = songcheat.mode || 'rt'\n    songcheat.lyricsMode = songcheat.lyricsMode || 's'\n    songcheat.barsPerLine = songcheat.barsPerLine || 4\n    songcheat.signature = songcheat.signature || {}\n    songcheat.signature.key = songcheat.signature.key || 'C'\n    songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' }\n    songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration\n    songcheat.chords = songcheat.chords || []\n    songcheat.rhythms = songcheat.rhythms || []\n    songcheat.parts = songcheat.parts || []\n\n    // deduce bar duration from signature\n    songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration)\n\n    // resolve all id references (rhythms and chords)\n    this.resolveIds(songcheat)\n\n    // default structure if not specified : one unit for each part\n    if (!songcheat.structure) {\n      songcheat.structure = []\n      for (let part of songcheat.parts) songcheat.structure.push({ 'part': part })\n    }\n\n    // give a name to each unit if not already set = name of part with automatic numbering\n    let unitsByPart = {}\n    let numberByPart = {}\n    for (let unit of songcheat.structure) unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1\n    for (let unit of songcheat.structure) {\n      numberByPart[unit.part.id] = typeof numberByPart[unit.part.id] === 'undefined' ? 1 : numberByPart[unit.part.id] + 1\n      if (!unit.name) unit.name = unit.part.name + (unitsByPart[unit.part.id] > 1 ? ' ' + numberByPart[unit.part.id] : '')\n    }\n\n    // give a color to each part if not already set\n    let colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta']\n    let partIndex = 0\n    for (let part of songcheat.parts) { if (!part.color) part.color = colors[partIndex++ % colors.length] }\n\n    // validate and compile each rhythm\n    for (let rhythm of songcheat.rhythms) this.compileRhythm(rhythm, songcheat.signature.time.beatDuration)\n\n    for (let part of songcheat.parts) {\n      // compute a \"chordChanges\" property in each phrase\n      let phraseIndex = 0\n      for (let phrase of part.phrases) {\n        phrase.chordChanges = []\n        let lastChord = null\n        for (let bar of phrase.bars) lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord)\n\n        this.log('Phrase wise chord durations for phrase ' + part.name + '.' + (phraseIndex + 1))\n        for (let c of phrase.chordChanges) this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n        // compute a \"chordChanges\" property in each bar\n        let barIndex = 0\n        for (let bar of phrase.bars) {\n          bar.chordChanges = { 'bar': [], 'rhythm': [] }\n          for (let chordChangesMode of ['rhythm', 'bar']) this.addChordChanges(bar, bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar')\n\n          this.log('\\tRythm wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['rhythm']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n          this.log('\\tBar wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['bar']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n          barIndex++\n        }\n\n        phraseIndex++\n      }\n\n      // compute duration of part\n      part.duration = 0\n      for (let phrase of part.phrases) { for (let bar of phrase.bars) part.duration += bar.rhythm.duration }\n    }\n\n    // fluid API\n    return songcheat\n  }\n\n  resolveIds (songcheat) {\n    let unitIndex = 0\n    if (songcheat.structure) {\n      for (let unit of songcheat.structure) {\n        if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1))\n\n      // resolve part id\n        let part = this.resolveId(songcheat.parts, unit.part)\n        if (!part) throw new CompilerException('Part ' + unit.part + ' not found')\n        unit.part = part\n\n        unitIndex++\n      }\n    }\n\n    if (songcheat.parts) {\n      for (let part of songcheat.parts) {\n        if (!part.phrases) throw new CompilerException('Phrases not defined for part \"' + part.name + '\"')\n        if (!(part.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + part.name + '\" must be an Array, found: ' + (typeof songcheat.parts.phrases))\n\n        let phraseIndex = 0\n        for (let phrase of part.phrases) {\n          let barIndex = 0\n          for (let bar of phrase.bars) {\n            if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + (typeof bar.chords))\n\n          // resolve rhythm id\n            let rhythm = this.resolveId(songcheat.rhythms, bar.rhythm)\n            if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n            bar.rhythm = rhythm\n\n          // resolved array of chord ids\n            let chords = []\n            for (let chordId of bar.chords) {\n            // resolve chord id\n              let chord = this.resolveId(songcheat.chords, chordId)\n              if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n              chords.push(chord)\n            }\n\n            bar.chords = chords\n            barIndex++\n          }\n\n          phraseIndex++\n        }\n      }\n    }\n  }\n\n  resolveId (collection, id) {\n    if (collection) { for (let i of collection) { if (i.id === id) return i } }\n    return null\n  }\n\n  compileRhythm (rhythm, initialNoteDuration) {\n    this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"')\n\n    // default note duration, until changed\n    let noteDuration = initialNoteDuration\n\n    // take not of each placeholder's index, so we can later fetch the associated chord\n    rhythm.placeholdercount = 0\n\n    // for locating syntax errors in message\n    let position = 1\n    let lastToken = null\n\n    // compile the score string into an array of objects\n    rhythm.compiledScore = []\n    for (let token of rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)) {\n      if ((token = token.trim())) {\n        let match = null\n        if ((match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/))) {\n          // duration: change note duration to use next\n          noteDuration = Utils.duration(match[1])\n        } else if ((match = token.match(/^\\(#\\)$/))) {\n          // rest\n          rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ })\n        } else if ((match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/))) {\n          // chord placeholder\n          let tied = match[1] === 'T'\n\n          // strings = between parentheses\n          let strings = match[2]\n          if (strings === '') strings = '*' // an empty string is a shortcut for \"*\"\n          if (strings === 'x') strings = '*x' // a x alone is a shortcut for \"*x\"\n          if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings)\n\n          // flags = after parentheses\n          let flagsString = match[3]\n          let flags = { stroke: null, accent: false, pm: false, fingering: null }\n          for (let flag of flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)) {\n            if (flag.trim()) {\n              if (flag.match(/^(dd?|uu?)$/g)) {\n                // stroke mode\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token)\n                flags.stroke = flag\n              } else if (flag.match(/^[pima]+$/)) {\n                // PIMA fingering\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token)\n                flags.fingering = flag\n              } else if (flag.match(/^PM$/)) {\n                // palm muting\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token)\n                flags.pm = true\n              } else if (flag.match(/^>$/)) {\n                // accent\n                if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token)\n                flags.accent = true\n              } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"')\n            }\n          }\n\n          // add a note\n          rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ })\n        } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''))\n\n        lastToken = token\n      }\n\n      position += token.length\n    }\n\n    // compute total rhythm duration\n    rhythm.duration = 0\n    for (let o of rhythm.compiledScore) rhythm.duration += o.duration\n  }\n\n  addChordChanges (bar, chordChanges, barDuration, resetAtBars, lastChord) {\n    // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n    if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found')\n    while (bar.chords.length < bar.rhythm.placeholdercount) bar.chords.push(bar.chords[bar.chords.length - 1])\n\n    let offset = 0\n    for (let note of bar.rhythm.compiledScore) {\n      // get chord corresponding to the placeholder position\n      let chord = bar.chords[note.placeholderIndex]\n      if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n\n      // same chord as before and not a new bar: increment duration with this new note\n      if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration\n\n      // chord changed: new duration starts with one note of the new chord\n      // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n      else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars })\n\n      lastChord = chord\n      offset += note.duration\n    }\n\n    return lastChord\n  }\n\n  parseLyrics (unit, defaultCursorStep, barDuration) {\n    let warnings = []\n    let offset = 0\n\n    // remove DOS newlines\n    unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '')\n\n    // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n    unit.groups = []\n    for (let part of unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)) { // nb: split with capture groups only works in decent browsers, e.g. IE10+\n      let match = null\n      // move cursor forward by given or default step duration\n      if ((match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/))) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration)\n\n      // move cursor to begin of next bar\n      else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n      // (non empty) word group (waiting for its duration)\n      else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 })\n    }\n\n    // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n    if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n    // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n    let missingDuration = unit.part.duration - offset\n    this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + (missingDuration / barDuration) + ' bars missing')\n    if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess')\n    offset = this.registerGroup(unit, offset, missingDuration, barDuration)\n\n    for (let group of unit.groups) {\n      // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n      let groupLength = this.getGroupLength(group) + 1\n\n      // ensure the bar will always have the required minimal width\n      group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration))\n\n      // compute density of group based on the obtained length\n      group.p = group.plen / group.duration\n\n      // set bar true if group ends on a bar\n      group.bar = (group.offset + group.duration) % barDuration === 0\n\n      // initialize chord changes\n      group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] }\n    }\n\n    // compute maximum density across all groups\n    unit.pmax = 0\n    for (let group of unit.groups) unit.pmax = Math.max(unit.pmax, group.p)\n\n    // iterate on each phrase wise chord change and find the associated group\n    offset = 0\n    for (let phrase of unit.part.phrases) {\n      for (let chordDuration of phrase.chordChanges) {\n        // find closest group starting at or before chord offset\n        let group = null\n        for (let g of unit.groups) { if (g.offset <= offset) group = g }\n        if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units')\n\n        // register chord change in group\n        group.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) })\n\n        offset += chordDuration.duration\n      }\n    }\n\n    // iterate on each bar wise chord change and find the associated group\n    offset = { 'rhythm': 0, 'bar': 0 }\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChangesMode of ['rhythm', 'bar']) {\n          for (let chordDuration of bar.chordChanges[chordChangesMode]) {\n            // find closest group starting at or before chord offset\n            let group = null\n            for (let g of unit.groups) { if (g.offset <= offset[chordChangesMode]) group = g }\n            if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units')\n\n            // register chord change in group\n            group.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(chordDuration) })\n\n            offset[chordChangesMode] += chordDuration.duration\n          }\n        }\n      }\n    }\n\n    // debug info\n    var debugText = 'Groups of unit [' + unit.name + ']:\\n'\n    var barIndex = 0\n    let zeroDuration = false\n    for (let group of unit.groups) {\n      debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + group.text.replace(/\\n/g, '\\\\N') + ']:' + group.duration + ' (' + group.offset + ' - ' + (group.offset + group.duration) + ') L=' + this.getGroupLength(group) + \" L'=\" + group.plen + ' ρ=' + group.p.toFixed(2) + ' #Chord changes %bar= ' + group.chordChanges['bar'].length + ' %phrase= ' + group.chordChanges['phrase'].length\n      if (group.duration === 0) zeroDuration = true\n      if (group.bar) {\n        barIndex++\n        debugText += ' | '\n      }\n      debugText += '\\n'\n    }\n    debugText += 'ρ max = ' + unit.pmax.toFixed(2)\n    this.log(debugText)\n\n    if (zeroDuration) throw new Error('Detected group with 0 duration')\n\n    return warnings\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    var unitText = ''\n\n    // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n    var barIndex = 0\n    var groupIndex = 0\n    for (let group of unit.groups) {\n      // where and on how many positions will this group be displayed\n      group.position = [...unitText.replace(/\\n/g, '')].length\n      group.length = Math.ceil(group.duration * unit.pmax)\n\n      // an hyphen means a word has been cut in two, no need for a space before next group\n      // but if the final character should be a bar, then always count this extra character\n      let needFinalSpace = group.bar || !group.text.match(/-$/)\n\n      // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n      let maxLength = null\n      if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1)\n      if (maxLength) group.length = Math.min(group.length, maxLength)\n\n      // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n      let minLength = group.bar ? 1 : 0 // 1 for the final bar sign if any\n      if (group.chordChanges[chordChangesMode]) { for (let i = 0; i < group.chordChanges[chordChangesMode].length; i++) minLength += group.chordChanges[chordChangesMode][i].text.length }\n      minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength)\n      group.length = Math.max(group.length, minLength)\n\n      // filler string used to reach that length (nb: filler will always have a length of at least 1)\n      let filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ')\n\n      // replace last character of filler by a | if this is the end of a bar\n      filler = filler.replace(/(.)$/, group.bar ? (split > 0 && ((barIndex + 1) % split === 0) ? '|\\n' : '|') : (this.DEBUG ? '*' : '$1'))\n\n      // append filler to text, remove new lines if splitting at bars\n      var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler\n\n      this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')')\n      unitText += groupText\n\n      groupIndex++\n      if (group.bar) barIndex++\n    }\n\n    // we weren't asked to add chords\n    if (!chordChangesMode) return unitText\n\n    // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n    let chordInserts = []\n    for (let group of unit.groups) {\n      let lengthStillToPlaceOnThisGroup = 0\n      let lengthYetPlacedOnThisGroup = 0\n\n      // compute length of all chord inserts\n      for (let chordChange of group.chordChanges[chordChangesMode]) lengthStillToPlaceOnThisGroup += chordChange.text.length\n\n      for (let chordChange of group.chordChanges[chordChangesMode]) {\n        // position of the chord will be the position of the group + length corresponding to offset delta\n        let positionDelta = Math.ceil(((chordChange.offset - group.offset) / group.duration) * group.length)\n        let positionDelta_ = positionDelta\n\n        // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n        while (positionDelta + lengthStillToPlaceOnThisGroup > group.length - (group.bar ? 1 : 0)) { positionDelta-- }\n\n        // ensure that chords already there still have enough room\n        while (positionDelta - lengthYetPlacedOnThisGroup < 0) { positionDelta++ }\n\n        this.log('Closest group \"' + group.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + group.offset + ' and position ' + group.position + ' found for ' + chordChange.text.trim() + ' with offset ' + chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)')\n        chordInserts.push({ text: chordChange.text, offset: chordChange.offset, position: group.position + positionDelta })\n\n        lengthYetPlacedOnThisGroup = positionDelta + chordChange.text.length\n        lengthStillToPlaceOnThisGroup -= chordChange.text.length\n      }\n    }\n\n    for (let chordInsert of chordInserts) this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars')\n\n    // insert these chord inserts\n    let position = 0\n    let skip = 0\n    let unitText_ = unitText\n    let chordText = ''\n    unitText = ''\n    for (let char of unitText_) {\n      if (char === '\\n') {\n        unitText += '\\n'\n        chordText += '\\n'\n        skip = 0\n      } else {\n        for (let chordInsert of chordInserts) {\n          if (!chordInsert.inserted) {\n            if (chordInsert.position <= position) {\n              this.log('[' + unit.name + '] Inserting ' + chordInsert.text + ' @ ' + position + ' chars')\n              chordText += chordInsert.text\n              chordInsert.inserted = true\n              skip = chordInsert.text.length\n            }\n          }\n        }\n\n        position++\n\n        // add char to unit text, and corresponding space to chord text\n        // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n        if (skip === 0) { chordText += char === '|' ? char : ' ' } else { skip-- }\n        unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char\n      }\n    }\n\n    // and interlace the two strings\n    return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES)\n  }\n\n  registerGroup (unit, offset, step, barDuration) {\n    if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup')\n\n    while (step > 0) {\n      // duration added to preceding group may never be more than what's left until end of bar\n      let addDuration = Math.min(step, barDuration - (offset % barDuration))\n\n      // create a new group if none or if preceding already got its duration\n      if (!unit.groups.length || (!LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0)) unit.groups.push({ text: '', offset: offset, duration: 0 })\n\n      // add this duration to preceding group (create it if needed)\n      unit.groups[unit.groups.length - 1].duration += addDuration\n      offset += addDuration\n      step -= addDuration\n\n      // step is going to cross end of bar: directly create a first empty group\n      if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 })\n    }\n\n    return offset\n  }\n\n  getGroupLength (group) {\n    // return the number of visible graphemes in group text\n    // - newlines are not counted\n    // - tabs will be converted to spaces and may thus count as 1\n    // - use spread operator to correctly count astral unicode symbols\n    return [...group.text.replace(/\\n/g, '')].length\n  }\n\n  getChordDisplay (chordDuration) {\n    // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n    if (chordDuration.hidden) return ' '\n\n    // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n    return chordDuration.chord.name + ' '\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Compiler {\n  constructor (songcheat, DEBUG) {\n    this.compiler_ = new Compiler_(DEBUG)\n    if (songcheat) this.set(songcheat)\n  }\n\n  set (songcheat) {\n    this.compiler_.log(Utils.title('COMPILE SONGCHEAT'))\n    this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)))\n  }\n\n  parseLyrics (unit) {\n    this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name))\n    return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    this.compiler_.log(Utils.title(`GET LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n\n  getPartText (part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    // dummy unit with no lyrics\n    let unit = { name: part.name, part: part }\n\n    this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name))\n    this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n\n    this.compiler_.log(Utils.title(`GET PART LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n}\n","import { Utils } from './utils'\n\nexport class ChordPixException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Chordpix error: ' + this.message\n  }\n}\n\nexport class ChordPix {\n  static parse (url) {\n    try {\n      // validate and explode url at slashes\n      if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL')\n      let parts = url.split(/\\//)\n\n      // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n      let name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b')\n\n      // get starting fret\n      let startingFret = parseInt(parts[7], 10)\n\n      // get absolute barred fret (single char) (\"-\" kept as is)\n      let barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret)\n\n      // build an absolute tablature (single char x6) (\"x\" kept as is)\n      let tablature = ''\n      for (let char of parts[8]) tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret)\n\n      return {\n        name: name,\n        tablature: tablature,\n        fingering: parts[9] + '/' + barredFret,\n        comment: ''\n      }\n    } catch (e) {\n      throw new ChordPixException('[URL ' + url + '] ' + e.message)\n    }\n  }\n\n  static url (chord, chordWidth) {\n    try {\n      // check tablature is valid\n      if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string')\n      if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)')\n      if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)')\n\n      // check fingering is valid\n      if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string')\n      if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)')\n      if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)')\n      if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret')\n\n      // convert 6 chars into 6 integers (null for x)\n      let frets = []\n      for (let char of chord.tablature) frets.push(char === 'x' ? null : Utils.char2fret(char))\n\n      // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n      let minFret = frets.filter(x => x).length > 0 ? Math.min(...frets.filter(x => x)) : 1\n      let maxFret = frets.filter(x => x).length > 0 ? Math.max(...frets.filter(x => x)) : 1\n\n      // get number of frets to display on diagram (with minimum of 4)\n      let nbFrets = Math.max(4, maxFret + 1 - minFret)\n\n      // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n      let startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret\n\n      // get relative barred fret (\"-\" kept as is)\n      let fingering = chord.fingering.split('/')\n      if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret)\n\n      // build a relative tablature (\"0\" and \"x\" kept as is)\n      let relTablature = ''\n      for (let char of chord.tablature) relTablature += char === 'x' || char === '0' ? char : Utils.abs2rel(char, startingFret)\n\n      // use nice ♯ and ♭ in diagram (replace only last occurence)\n      let name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature\n\n      // build final url\n      return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png'\n    } catch (e) {\n      throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message)\n    }\n  }\n}\n","import { ChordPix } from 'songcheat-core'\nimport samples from '../dist/samples.json'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// get a random sample songcheat\nlet songcheat = samples[Math.floor(Math.random() * samples.length)]\n$('body>h1').html(`${songcheat.title} (${songcheat.artist}, ${songcheat.year})`)\n\n// display chord diagrams\nfor (let chord of songcheat.chords) {\n  var url = ChordPix.url(chord, 200)\n  console.info(url)\n  $('body>div').append(\n    $('<div>')\n      .css({ 'display': 'inline-block', 'vertical-align': 'top' })\n      .append($('<img>').attr('src', url))\n  )\n}\n"],"names":[],"mappings":"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"}