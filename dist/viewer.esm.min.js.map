{"version":3,"sources":["../../songcheat-core/src/utils.js","../../songcheat-core/src/compiler.js","../../songcheat-core/src/lyrics.js","../../songcheat-core/src/chordpix.js","../../songcheat-core/src/vextab.js","../../songcheat-core/node_modules/@mohayonao/wave-tables/index.js","../../songcheat-core/src/player.js","../src/player_ui.js","../src/viewer.js"],"names":["Utils","[object Object]","a","b","length","i","str","this","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","Error","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","push","join","data","ret","d","encodeURIComponent","code","units","duration","codes","current","rest","durationcode","e","fret","String","fromCharCode","charCodeAt","parseInt","startingFret","char2fret","relFret","fret2char","chord","strings","tablature","name","fingering","result","string","indexOf","mute","CompilerException","message","Compiler_","DEBUG","console","log","apply","arguments","songcheat","mode","lyricsMode","barsPerLine","signature","key","time","beatDuration","beatsPerBar","symbol","lyricsUnit","chords","rhythms","parts","barDuration","resolveIds","structure","part","unitsByPart","numberByPart","unit","id","colors","partIndex","color","rhythm","compileRhythm","phraseIndex","phrase","phrases","chordChanges","lastChord","bar","bars","addChordChanges","c","barIndex","chordChangesMode","unitIndex","resolveId","Array","chordId","collection","initialNoteDuration","score","noteDuration","placeholdercount","position","lastToken","compiledScore","token","tied","flags","placeholderIndex","flagsString","stroke","accent","pm","flag","o","resetAtBars","offset","note","hidden","Compiler","compiler_","title","compile","JSON","parse","stringify","MIN_LYRICS_BARLEN","LYRICS_SUM_DURATIONS","KEEP_EMPTY_LINES","Lyrics_","defaultCursorStep","warnings","lyrics","groups","registerGroup","text","missingDuration","Math","floor","durationcodes","group","groupLength","getGroupLength","plen","max","ceil","p","pmax","chordDuration","g","getChordDisplay","debugText","zeroDuration","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","needFinalSpace","maxLength","min","minLength","filler","groupText","chordInserts","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","chordChange","positionDelta","positionDelta_","chordInsert","skip","unitText_","chordText","inserted","interlace","step","addDuration","Lyrics","lyrics_","parseLyrics","getUnitText","ChordPixException","ChordPix","url","barredFret","rel2abs","comment","chordWidth","frets","minFret","filter","x","maxFret","nbFrets","abs2rel","relTablature","VexTabException","VexTab","transpose","vextabchord","chordStrings","strokes","accents","vextab","Chord2VexTab","notes","subtitle","hs","notation","tuning","Note2VexTab","lastInPhrase","warn","textGroups","staveDuration","h","font","line","gap","available","showUnitIndex","Unit2VexTab","stems","showLyrics","tempo","notesSlashed","lyricsGroups","chordGroups","fingeringGroups","pmGroups","lastPhraseInPart","lastBarInPhrase","noteIndex","phraseNote","chordedPhraseNote","partDone","Notes2Stave","Text2VexTab","waveTables","Bass","require$$0","BassAmp360","require$$1","BassFuzz","require$$2","BassFuzz2","require$$3","BassSubDub","require$$4","BassSubDub2","require$$5","Brass","require$$6","BritBlues","require$$7","BritBluesDriven","require$$8","Buzzy1","require$$9","Buzzy2","require$$10","Celeste","require$$11","ChorusStrings","require$$12","Dissonant1","require$$13","Dissonant2","require$$14","DissonantPiano","require$$15","DroppedSaw","require$$16","DroppedSquare","require$$17","DynaEPBright","require$$18","DynaEPMed","require$$19","Ethnic33","require$$20","Full1","require$$21","Full2","require$$22","GuitarFuzz","require$$23","Harsh","require$$24","MklHard","require$$25","Noise","require$$26","Organ2","require$$27","Organ3","require$$28","PhonemeAh","require$$29","PhonemeBah","require$$30","PhonemeEe","require$$31","PhonemeO","require$$32","PhonemeOoh","require$$33","PhonemePopAhhhs","require$$34","Piano","require$$35","Pulse","require$$36","PutneyWavering","require$$37","Saw","require$$38","Square","require$$39","TB303Square","require$$40","Throaty","require$$41","Triangle","require$$42","Trombone","require$$43","TwelveOpTines","require$$44","TwelveStringGuitar1","require$$45","WarmSaw","require$$46","WarmSquare","require$$47","WarmTriangle","require$$48","Wurlitzer","require$$49","Wurlitzer2","require$$50","Player","audioCtx","config","MODE_RHYTHM","MODE_BASS","MODE_CHORDS","loop","onDone","onCountdown","capo","shuffle","stopped","paused","speed","setDisto","setVolume","setMode","setType","type","amount","k","curve","Float32Array","deg","PI","abs","frequency","volume","distortion","onended","gainNode","createGain","gain","value","distoNode","createWaveShaper","makeDistortionCurve","oversample","connect","destination","oscillator","createOscillator","setPeriodicWave","createPeriodicWave","real","imag","start","stop","freqs","pow","ms_","msPerUnit","self","donePlaying","isBar","isBeat","isUp","isDown","isArpeggiated","ms","nextNoteIndex","beepduration","chord2frequencies","reverse","what","padEnd","setTimeout","info","currentTime","note_","fIndex","delay","sound","cd","clearTimeout","countdown","play","recfun","speedpct","pct","msPerBeat","$","window","jQuery","PlayerUI","chordedNote","player","wave","$stopLink","trigger","$countdownZone","html","$div","css","margin-top","$speedMention","font-size","font-weight","padding-left","updateSpeed","getTempo","$tempoSlider","val","text-shadow","top","right","$speed100Link","on","$playLink","find","show","hide","$rewindLink","rewind","$pauseLink","pause","append","unique","Date","now","musicalSwitches","$divMusicalSwitches","display","change","$typeSwitch","attr","instrument","$distoSlider","$volumeSlider","cursor","margin-right","addClass","prototype","div","AudioContext","webkitAudioContext","audioContext","Artist","Vex","localStorage","compiler","NOLOGO","addEvent","elem","event","fn","addEventListener","attachEvent","call","onChange","priorValue","checkNotify","events","go","song","debug","location","href","encodeQueryData","$divScore","$divChords","$divParts","$divStructure","$divLyrics","$divRhythms","scoreWidth","rhythmsWidth","get","URLSearchParams","search","canvas","getContext","scale","showUnit","maxsp","splitUnits","splitParts","partdisplay","parent","error","click","each","scIndex","substr","width","vertical-align","$cDiv","text-align","$divPart","$partsZone","text-decoration","margin-bottom","displayParts","margin","lskey","getItem","$divUnit","$editLink","$lyricsZone","displayLyrics","$divUnitEdit","$closeLink","saveAndUpdate","updateVextab","setItem","$canvas","after","remove","renderer","Flow","Renderer","Backends","CANVAS","artist","SongcheatVexTab","Songcheat2VexTab","render","focus","$divRhythm","before","warning","SVG","getPartText","sc","samples","document","year","naturalSize","absMinSize","minSize","maxSize","rhythmWidth","_scIndex","sc_"],"mappings":"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","sourcesContent":["export class Utils {\n  /**\n   * Array helper functions\n   */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n   * String helper functions\n   */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  static replaceComposedChars (s) {\n    // fix composed UTF8 characters (not handled correctly by ACE when typing a newline after one of those)\n    // http://php.net/manual/fr/regexp.reference.unicode.php\n    // http://www.fileformat.info/info/unicode/category/Mn/list.htm\n\n    s = s.replace(/a\\u0300/g, 'à')\n    s = s.replace(/e\\u0300/g, 'è')\n    s = s.replace(/e\\u0301/g, 'é')\n    s = s.replace(/e\\u0302/g, 'ê')\n    s = s.replace(/i\\u0302/g, 'î')\n    s = s.replace(/o\\u0302/g, 'ô')\n    s = s.replace(/u\\u0302/g, 'û')\n    s = s.replace(/a\\u0302/g, 'â')\n    s = s.replace(/o\\u0303/g, 'õ')\n    s = s.replace(/a\\u0303/g, 'ã')\n\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nexport class CompilerException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Compiler error: ' + this.message\n  }\n}\n\nclass Compiler_ {\n  constructor (DEBUG) {\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  compile (songcheat) {\n    // default values for optional properties\n    songcheat.mode = songcheat.mode || 'rt'\n    songcheat.lyricsMode = songcheat.lyricsMode || 's'\n    songcheat.barsPerLine = songcheat.barsPerLine || 4\n    songcheat.signature = songcheat.signature || {}\n    songcheat.signature.key = songcheat.signature.key || 'C'\n    songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' }\n    songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration\n    songcheat.chords = songcheat.chords || []\n    songcheat.rhythms = songcheat.rhythms || []\n    songcheat.parts = songcheat.parts || []\n\n    // deduce bar duration from signature\n    songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration)\n\n    // resolve all id references (rhythms and chords)\n    this.resolveIds(songcheat)\n\n    // default structure if not specified : one unit for each part\n    if (!songcheat.structure) {\n      songcheat.structure = []\n      for (let part of songcheat.parts) songcheat.structure.push({ 'part': part })\n    }\n\n    // give a name to each unit if not already set = name of part with automatic numbering\n    let unitsByPart = {}\n    let numberByPart = {}\n    for (let unit of songcheat.structure) unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1\n    for (let unit of songcheat.structure) {\n      numberByPart[unit.part.id] = typeof numberByPart[unit.part.id] === 'undefined' ? 1 : numberByPart[unit.part.id] + 1\n      if (!unit.name) unit.name = unit.part.name + (unitsByPart[unit.part.id] > 1 ? ' ' + numberByPart[unit.part.id] : '')\n    }\n\n    // give a color to each part if not already set\n    let colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta']\n    let partIndex = 0\n    for (let part of songcheat.parts) { if (!part.color) part.color = colors[partIndex++ % colors.length] }\n\n    // validate and compile each rhythm\n    for (let rhythm of songcheat.rhythms) this.compileRhythm(rhythm, songcheat.signature.time.beatDuration)\n\n    for (let part of songcheat.parts) {\n      // compute a \"chordChanges\" property in each phrase\n      let phraseIndex = 0\n      for (let phrase of part.phrases) {\n        phrase.chordChanges = []\n        let lastChord = null\n        for (let bar of phrase.bars) lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord)\n\n        this.log('Phrase wise chord durations for phrase ' + part.name + '.' + (phraseIndex + 1))\n        for (let c of phrase.chordChanges) this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n        // compute a \"chordChanges\" property in each bar\n        let barIndex = 0\n        for (let bar of phrase.bars) {\n          bar.chordChanges = { 'bar': [], 'rhythm': [] }\n          for (let chordChangesMode of ['rhythm', 'bar']) this.addChordChanges(bar, bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar')\n\n          this.log('\\tRythm wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['rhythm']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n          this.log('\\tBar wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['bar']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n          barIndex++\n        }\n\n        phraseIndex++\n      }\n\n      // compute duration of part\n      part.duration = 0\n      for (let phrase of part.phrases) { for (let bar of phrase.bars) part.duration += bar.rhythm.duration }\n    }\n\n    // fluid API\n    return songcheat\n  }\n\n  resolveIds (songcheat) {\n    let unitIndex = 0\n    if (songcheat.structure) {\n      for (let unit of songcheat.structure) {\n        if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1))\n\n        // resolve part id\n        let part = this.resolveId(songcheat.parts, unit.part)\n        if (!part) throw new CompilerException('Part ' + unit.part + ' not found')\n        unit.part = part\n\n        unitIndex++\n      }\n    }\n\n    if (songcheat.parts) {\n      for (let part of songcheat.parts) {\n        if (!part.phrases) throw new CompilerException('Phrases not defined for part \"' + part.name + '\"')\n        if (!(part.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + part.name + '\" must be an Array, found: ' + (typeof songcheat.parts.phrases))\n\n        let phraseIndex = 0\n        for (let phrase of part.phrases) {\n          let barIndex = 0\n          for (let bar of phrase.bars) {\n            if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + (typeof bar.chords))\n\n            // resolve rhythm id\n            let rhythm = this.resolveId(songcheat.rhythms, bar.rhythm)\n            if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n            bar.rhythm = rhythm\n\n            // resolved array of chord ids\n            let chords = []\n            for (let chordId of bar.chords) {\n              // resolve chord id\n              let chord = this.resolveId(songcheat.chords, chordId)\n              if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n              chords.push(chord)\n            }\n\n            bar.chords = chords\n            barIndex++\n          }\n\n          phraseIndex++\n        }\n      }\n    }\n  }\n\n  resolveId (collection, id) {\n    if (collection) { for (let i of collection) { if (i.id === id) return i } }\n    return null\n  }\n\n  compileRhythm (rhythm, initialNoteDuration) {\n    this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"')\n\n    // default note duration, until changed\n    let noteDuration = initialNoteDuration\n\n    // take not of each placeholder's index, so we can later fetch the associated chord\n    rhythm.placeholdercount = 0\n\n    // for locating syntax errors in message\n    let position = 1\n    let lastToken = null\n\n    // compile the score string into an array of objects\n    rhythm.compiledScore = []\n    for (let token of rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)) {\n      if ((token = token.trim())) {\n        let match = null\n        if ((match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/))) {\n          // duration: change note duration to use next\n          noteDuration = Utils.duration(match[1])\n        } else if ((match = token.match(/^\\(#\\)$/))) {\n          // rest\n          rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ })\n        } else if ((match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/))) {\n          // chord placeholder\n          let tied = match[1] === 'T'\n\n          // strings = between parentheses\n          let strings = match[2]\n          if (strings === '') strings = '*' // an empty string is a shortcut for \"*\"\n          if (strings === 'x') strings = '*x' // a x alone is a shortcut for \"*x\"\n          if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings)\n\n          // flags = after parentheses\n          let flagsString = match[3]\n          let flags = { stroke: null, accent: false, pm: false, fingering: null }\n          for (let flag of flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)) {\n            if (flag.trim()) {\n              if (flag.match(/^(dd?|uu?)$/g)) {\n                // stroke mode\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token)\n                flags.stroke = flag\n              } else if (flag.match(/^[pima]+$/)) {\n                // PIMA fingering\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token)\n                flags.fingering = flag\n              } else if (flag.match(/^PM$/)) {\n                // palm muting\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token)\n                flags.pm = true\n              } else if (flag.match(/^>$/)) {\n                // accent\n                if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token)\n                flags.accent = true\n              } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"')\n            }\n          }\n\n          // add a note\n          rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ })\n        } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''))\n\n        lastToken = token\n      }\n\n      position += token.length\n    }\n\n    // compute total rhythm duration\n    rhythm.duration = 0\n    for (let o of rhythm.compiledScore) rhythm.duration += o.duration\n  }\n\n  addChordChanges (bar, chordChanges, barDuration, resetAtBars, lastChord) {\n    // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n    if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found')\n    while (bar.chords.length < bar.rhythm.placeholdercount) bar.chords.push(bar.chords[bar.chords.length - 1])\n\n    let offset = 0\n    for (let note of bar.rhythm.compiledScore) {\n      // get chord corresponding to the placeholder position\n      let chord = bar.chords[note.placeholderIndex]\n      if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n\n      // same chord as before and not a new bar: increment duration with this new note\n      if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration\n\n      // chord changed: new duration starts with one note of the new chord\n      // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n      else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars })\n\n      lastChord = chord\n      offset += note.duration\n    }\n\n    return lastChord\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Compiler {\n  constructor (DEBUG) {\n    this.compiler_ = new Compiler_(DEBUG)\n  }\n\n  compile (songcheat) {\n    console.log(Utils.title('COMPILE SONGCHEAT'))\n    return this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)))\n  }\n}\n","import { Utils } from './utils'\n\nlet MIN_LYRICS_BARLEN = 20 // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nlet LYRICS_SUM_DURATIONS = false // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nlet KEEP_EMPTY_LINES = false\n\nexport class LyricsException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Lyrics error: ' + this.message\n  }\n}\n\nclass Lyrics_ {\n  constructor (DEBUG) {\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  parseLyrics (unit, defaultCursorStep, barDuration) {\n    let warnings = []\n    let offset = 0\n\n    // remove DOS newlines\n    unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '')\n\n    // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n    unit.groups = []\n    for (let part of unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)) { // nb: split with capture groups only works in decent browsers, e.g. IE10+\n      let match = null\n      // move cursor forward by given or default step duration\n      if ((match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/))) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration)\n\n      // move cursor to begin of next bar\n      else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n      // (non empty) word group (waiting for its duration)\n      else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 })\n    }\n\n    // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n    if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n    // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n    let missingDuration = unit.part.duration - offset\n    this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + (missingDuration / barDuration) + ' bars missing')\n    if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess')\n    offset = this.registerGroup(unit, offset, missingDuration, barDuration)\n\n    for (let group of unit.groups) {\n      // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n      let groupLength = this.getGroupLength(group) + 1\n\n      // ensure the bar will always have the required minimal width\n      group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration))\n\n      // compute density of group based on the obtained length\n      group.p = group.plen / group.duration\n\n      // set bar true if group ends on a bar\n      group.bar = (group.offset + group.duration) % barDuration === 0\n\n      // initialize chord changes\n      group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] }\n    }\n\n    // compute maximum density across all groups\n    unit.pmax = 0\n    for (let group of unit.groups) unit.pmax = Math.max(unit.pmax, group.p)\n\n    // iterate on each phrase wise chord change and find the associated group\n    offset = 0\n    for (let phrase of unit.part.phrases) {\n      for (let chordDuration of phrase.chordChanges) {\n        // find closest group starting at or before chord offset\n        let group = null\n        for (let g of unit.groups) { if (g.offset <= offset) group = g }\n        if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units')\n\n        // register chord change in group\n        group.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) })\n\n        offset += chordDuration.duration\n      }\n    }\n\n    // iterate on each bar wise chord change and find the associated group\n    offset = { 'rhythm': 0, 'bar': 0 }\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChangesMode of ['rhythm', 'bar']) {\n          for (let chordDuration of bar.chordChanges[chordChangesMode]) {\n            // find closest group starting at or before chord offset\n            let group = null\n            for (let g of unit.groups) { if (g.offset <= offset[chordChangesMode]) group = g }\n            if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units')\n\n            // register chord change in group\n            group.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(chordDuration) })\n\n            offset[chordChangesMode] += chordDuration.duration\n          }\n        }\n      }\n    }\n\n    // debug info\n    var debugText = 'Groups of unit [' + unit.name + ']:\\n'\n    var barIndex = 0\n    let zeroDuration = false\n    for (let group of unit.groups) {\n      debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + group.text.replace(/\\n/g, '\\\\N') + ']:' + group.duration + ' (' + group.offset + ' - ' + (group.offset + group.duration) + ') L=' + this.getGroupLength(group) + \" L'=\" + group.plen + ' ρ=' + group.p.toFixed(2) + ' #Chord changes %bar= ' + group.chordChanges['bar'].length + ' %phrase= ' + group.chordChanges['phrase'].length\n      if (group.duration === 0) zeroDuration = true\n      if (group.bar) {\n        barIndex++\n        debugText += ' | '\n      }\n      debugText += '\\n'\n    }\n    debugText += 'ρ max = ' + unit.pmax.toFixed(2)\n    this.log(debugText)\n\n    if (zeroDuration) throw new Error('Detected group with 0 duration')\n\n    return warnings\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    var unitText = ''\n\n    // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n    var barIndex = 0\n    var groupIndex = 0\n    for (let group of unit.groups) {\n      // where and on how many positions will this group be displayed\n      group.position = [...unitText.replace(/\\n/g, '')].length\n      group.length = Math.ceil(group.duration * unit.pmax)\n\n      // an hyphen means a word has been cut in two, no need for a space before next group\n      // but if the final character should be a bar, then always count this extra character\n      let needFinalSpace = group.bar || !group.text.match(/-$/)\n\n      // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n      let maxLength = null\n      if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1)\n      if (maxLength) group.length = Math.min(group.length, maxLength)\n\n      // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n      let minLength = group.bar ? 1 : 0 // 1 for the final bar sign if any\n      if (group.chordChanges[chordChangesMode]) { for (let i = 0; i < group.chordChanges[chordChangesMode].length; i++) minLength += group.chordChanges[chordChangesMode][i].text.length }\n      minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength)\n      group.length = Math.max(group.length, minLength)\n\n      // filler string used to reach that length (nb: filler will always have a length of at least 1)\n      let filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ')\n\n      // replace last character of filler by a | if this is the end of a bar\n      filler = filler.replace(/(.)$/, group.bar ? (split > 0 && ((barIndex + 1) % split === 0) ? '|\\n' : '|') : (this.DEBUG ? '*' : '$1'))\n\n      // append filler to text, remove new lines if splitting at bars\n      var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler\n\n      this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')')\n      unitText += groupText\n\n      groupIndex++\n      if (group.bar) barIndex++\n    }\n\n    // we weren't asked to add chords\n    if (!chordChangesMode) return unitText\n\n    // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n    let chordInserts = []\n    for (let group of unit.groups) {\n      let lengthStillToPlaceOnThisGroup = 0\n      let lengthYetPlacedOnThisGroup = 0\n\n      // compute length of all chord inserts\n      for (let chordChange of group.chordChanges[chordChangesMode]) lengthStillToPlaceOnThisGroup += chordChange.text.length\n\n      for (let chordChange of group.chordChanges[chordChangesMode]) {\n        // position of the chord will be the position of the group + length corresponding to offset delta\n        let positionDelta = Math.ceil(((chordChange.offset - group.offset) / group.duration) * group.length)\n        let positionDelta_ = positionDelta\n\n        // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n        while (positionDelta + lengthStillToPlaceOnThisGroup > group.length - (group.bar ? 1 : 0)) { positionDelta-- }\n\n        // ensure that chords already there still have enough room\n        while (positionDelta - lengthYetPlacedOnThisGroup < 0) { positionDelta++ }\n\n        this.log('Closest group \"' + group.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + group.offset + ' and position ' + group.position + ' found for ' + chordChange.text.trim() + ' with offset ' + chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)')\n        chordInserts.push({ text: chordChange.text, offset: chordChange.offset, position: group.position + positionDelta })\n\n        lengthYetPlacedOnThisGroup = positionDelta + chordChange.text.length\n        lengthStillToPlaceOnThisGroup -= chordChange.text.length\n      }\n    }\n\n    for (let chordInsert of chordInserts) this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars')\n\n    // insert these chord inserts\n    let position = 0\n    let skip = 0\n    let unitText_ = unitText\n    let chordText = ''\n    unitText = ''\n    for (let char of unitText_) {\n      if (char === '\\n') {\n        unitText += '\\n'\n        chordText += '\\n'\n        skip = 0\n      } else {\n        for (let chordInsert of chordInserts) {\n          if (!chordInsert.inserted) {\n            if (chordInsert.position <= position) {\n              this.log('[' + unit.name + '] Inserting ' + chordInsert.text + ' @ ' + position + ' chars')\n              chordText += chordInsert.text\n              chordInsert.inserted = true\n              skip = chordInsert.text.length\n            }\n          }\n        }\n\n        position++\n\n        // add char to unit text, and corresponding space to chord text\n        // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n        if (skip === 0) { chordText += char === '|' ? char : ' ' } else { skip-- }\n        unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char\n      }\n    }\n\n    // and interlace the two strings\n    return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES)\n  }\n\n  registerGroup (unit, offset, step, barDuration) {\n    if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup')\n\n    while (step > 0) {\n      // duration added to preceding group may never be more than what's left until end of bar\n      let addDuration = Math.min(step, barDuration - (offset % barDuration))\n\n      // create a new group if none or if preceding already got its duration\n      if (!unit.groups.length || (!LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0)) unit.groups.push({ text: '', offset: offset, duration: 0 })\n\n      // add this duration to preceding group (create it if needed)\n      unit.groups[unit.groups.length - 1].duration += addDuration\n      offset += addDuration\n      step -= addDuration\n\n      // step is going to cross end of bar: directly create a first empty group\n      if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 })\n    }\n\n    return offset\n  }\n\n  getGroupLength (group) {\n    // return the number of visible graphemes in group text\n    // - newlines are not counted\n    // - tabs will be converted to spaces and may thus count as 1\n    // - use spread operator to correctly count astral unicode symbols\n    return [...group.text.replace(/\\n/g, '')].length\n  }\n\n  getChordDisplay (chordDuration) {\n    // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n    if (chordDuration.hidden) return ' '\n\n    // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n    return chordDuration.chord.name + ' '\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Lyrics {\n  constructor (songcheat, DEBUG) {\n    this.lyrics_ = new Lyrics_(DEBUG)\n    this.songcheat = songcheat\n  }\n\n  parseLyrics (unit) {\n    console.log(Utils.title('PARSE LYRICS ' + unit.name))\n    return this.lyrics_.parseLyrics(unit, Utils.duration(this.songcheat.lyricsUnit), this.songcheat.barDuration)\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    console.log(Utils.title(`GET LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.lyrics_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n\n  getPartText (part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    // dummy unit with no lyrics\n    let unit = { name: part.name, part: part }\n\n    console.log(Utils.title('PARSE PART LYRICS ' + unit.name))\n    this.lyrics_.parseLyrics(unit, Utils.duration(this.songcheat.lyricsUnit), this.songcheat.barDuration)\n\n    console.log(Utils.title(`GET PART LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.lyrics_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n}\n","import { Utils } from './utils'\n\nexport class ChordPixException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Chordpix error: ' + this.message\n  }\n}\n\nexport class ChordPix {\n  static parse (url) {\n    try {\n      // validate and explode url at slashes\n      if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL')\n      let parts = url.split(/\\//)\n\n      // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n      let name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b')\n\n      // get starting fret\n      let startingFret = parseInt(parts[7], 10)\n\n      // get absolute barred fret (single char) (\"-\" kept as is)\n      let barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret)\n\n      // build an absolute tablature (single char x6) (\"x\" kept as is)\n      let tablature = ''\n      for (let char of parts[8]) tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret)\n\n      return {\n        name: name,\n        tablature: tablature,\n        fingering: parts[9] + '/' + barredFret,\n        comment: ''\n      }\n    } catch (e) {\n      throw new ChordPixException('[URL ' + url + '] ' + e.message)\n    }\n  }\n\n  static url (chord, chordWidth) {\n    try {\n      // check tablature is valid\n      if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string')\n      if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)')\n      if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)')\n\n      // check fingering is valid\n      if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string')\n      if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)')\n      if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)')\n      if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret')\n\n      // convert 6 chars into 6 integers (null for x)\n      let frets = []\n      for (let char of chord.tablature) frets.push(char === 'x' ? null : Utils.char2fret(char))\n\n      // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n      let minFret = frets.filter(x => x).length > 0 ? Math.min(...frets.filter(x => x)) : 1\n      let maxFret = frets.filter(x => x).length > 0 ? Math.max(...frets.filter(x => x)) : 1\n\n      // get number of frets to display on diagram (with minimum of 4)\n      let nbFrets = Math.max(4, maxFret + 1 - minFret)\n\n      // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n      let startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret\n\n      // get relative barred fret (\"-\" kept as is)\n      let fingering = chord.fingering.split('/')\n      if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret)\n\n      // build a relative tablature (\"0\" and \"x\" kept as is)\n      let relTablature = ''\n      for (let char of chord.tablature) relTablature += char === 'x' || char === '0' ? char : Utils.abs2rel(char, startingFret)\n\n      // use nice ♯ and ♭ in diagram (replace only last occurence)\n      let name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature\n\n      // build final url\n      return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png'\n    } catch (e) {\n      throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message)\n    }\n  }\n}\n","import { Utils } from './utils'\n\nlet DEBUG = 0\n\nexport class VexTabException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'VexTab error: ' + this.message\n  }\n}\n\nexport class VexTab {\n  // build VexTab chord notation\n  static Chord2VexTab (chord, strings, transpose) {\n    var vextabchord = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      vextabchord.push((o.mute ? 'X' : transpose + o.fret) + '/' + o.string)\n    }\n    return '(' + vextabchord.join('.') + ')'\n  }\n\n  static Note2VexTab (note, strokes, accents) {\n    let vextab = ''\n\n    // rest with given duration\n    if (note.rest) vextab += Utils.durationcode(note.duration) + '#5#'\n\n    else {\n      // note duration, slashed if no chord given\n      vextab += note.chord ? Utils.durationcode(note.duration) : Utils.durationcode(note.duration).replace(/(:(?:w|h|q|8|16|32))(d?)/g, '$1S$2')\n\n      // if tied note\n      if (note.tied) vextab += 'T'\n\n      // chord or dummy note (for slash notation)\n      vextab += !note.chord ? '(4/3)' : VexTab.Chord2VexTab(note.chord, note.strings, 0) // do not transpose with capo: chords are tabbed exactly as their diagrm says (author chooses to use capo'd chords or not)\n\n      // stroke flag d or u (dd and uu are not built-in in vextab and are handled later through text2VexTab)\n      if (strokes && note.flags.stroke && note.flags.stroke.length === 1) vextab += note.flags.stroke\n\n      // accent (put on top)\n      if (accents && note.flags.accent) vextab += '$.a>/' + accents + '.$'\n    }\n\n    return vextab\n  }\n\n  static Notes2Stave (songcheat, offset, notes, strokes, accents, subtitle, hs, notation, tablature) {\n    let vextab = ''\n    let barDuration = songcheat.barDuration\n\n    console.log('Drawing ' + (notation ? 'notation ' : '') + (tablature ? 'tablature ' : '') + 'stave with ' + notes.length + ' notes')\n\n    // start new stave with signature\n    vextab += '\\ntabstave notation=' + (notation ? 'true' : 'false') + ' tablature=' + (tablature ? 'true' : 'false') + '\\n'\n    vextab += 'tuning=' + songcheat.tuning + ' key=' + songcheat.signature.key + ' time=' + songcheat.signature.time.symbol + '\\n'\n\n    // add subtitle if first bar\n    if (subtitle && offset === 0) vextab += 'text .' + hs + ',.font=Arial-10-bold,[' + subtitle + ']\\n'\n\n    vextab += 'notes '\n\n    // initial bar line if needed (double if first bar)\n    if (offset % barDuration === 0) vextab += (offset === 0 ? '=||' : '|')\n\n    // add each note, followed by a bar or phrase sign if needed\n    for (let note of notes) {\n      vextab += VexTab.Note2VexTab(note, strokes, accents)\n      offset += note.duration\n      if (note.lastInPhrase && offset % barDuration !== 0) console.warn('Phrase matches no bar (' + Utils.durationcodes(barDuration - offset % barDuration) + ' away)')\n      if (offset % barDuration === 0) vextab += note.lastInPhrase ? '=||' : '|'\n    }\n\n    return vextab + '\\n'\n  }\n\n  static Text2VexTab (textGroups, barDuration, offset, staveDuration, h, font) {\n    let text = ''\n\n    // for groups that start within our range\n    for (let group of textGroups) {\n      if (group.offset >= offset + staveDuration) break\n      if (group.offset >= offset) {\n        let line = 'text ++,.' + h + ',.font=' + font\n\n        // initial bar line if needed\n        if (offset % barDuration === 0) line += ',|'\n\n        // add empty text groups to fill the gap between start of stave and start of group\n        let gap = group.offset - offset\n        while (gap > 0) {\n          // gap duration may never be more than what's left until end of bar\n          let d = Math.min(gap, barDuration - (offset % barDuration))\n          for (let code of Utils.durationcodes(d)) line += ',' + code + ', '\n          if ((offset + d) % barDuration === 0) line += ',|'\n\n          // continue with remaining gap\n          gap -= d\n        }\n\n        // add actual text group on all available duration until end of stave (or more precisely the largest duration code which is <= available duration)\n        let available = offset + staveDuration - group.offset\n        for (let code of Utils.durationcodes(available)) { line += ',' + code + ',' + (group.text.replace(/\\n/g, '') || ' '); break }\n\n        // remove trailing spaces and comma: vextab does not allow to finish on an empty word group\n        text += line.replace(/[ ,]+$/, '') + '\\n'\n      }\n    }\n\n    return text\n  }\n\n  static Songcheat2VexTab (songcheat) {\n    let vextab = ''\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (typeof songcheat.showUnitIndex === 'undefined' || songcheat.showUnitIndex === null || songcheat.showUnitIndex === unitIndex) {\n        vextab += VexTab.Unit2VexTab(songcheat, unit, unitIndex) + '\\n'\n      }\n      unitIndex++\n    }\n    return vextab\n  }\n\n  static Unit2VexTab (songcheat, unit, unitIndex) {\n    let stems = songcheat.mode.indexOf('s') >= 0\n    let showLyrics = songcheat.lyricsMode === 's'\n    let barDuration = songcheat.barDuration\n\n    let vextab = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=' + (stems ? 'true' : 'false') + ' tab-stem-direction=up\\n'\n    unitIndex = unitIndex || 0\n\n    let staveDuration = 0\n    let notes = []\n    let notesSlashed = []\n\n    console.log('VexTabbing unit ' + (unitIndex + 1) + ' \"' + unit.name + '\"')\n\n    // space before first unit and between units\n    vextab += 'options space=' + (unitIndex > 0 && songcheat.showUnitIndex === null ? 50 : 20) + '\\n'\n\n    // get lyrics word groups\n    let lyricsGroups = []\n    if (unit.groups) for (let group of unit.groups) lyricsGroups.push({ offset: group.offset, text: group.text + (DEBUG ? '/' + group.duration : '') })\n\n    // get rhythm wise chord changes (same as ascii lyrics)\n    let offset = 0\n    let chordGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChange of bar.chordChanges['rhythm']) {\n          chordGroups.push({ offset: offset, text: chordChange.chord.name + (DEBUG ? '/' + chordChange.duration : '') })\n          offset += chordChange.duration\n        }\n      }\n    }\n\n    // get PIMA and dd/uu word groups\n    offset = 0\n    let fingeringGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.fingering) fingeringGroups.push({ offset: offset, text: note.flags.fingering.toLowerCase() })\n          else if (note.flags.stroke && note.flags.stroke.length === 2) fingeringGroups.push({ offset: offset, text: note.flags.stroke === 'dd' ? '⤋' : '⤊' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // get PM word groups\n    offset = 0\n    let pmGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.pm) pmGroups.push({ offset: offset, text: 'PM' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // for each phrase in unit\n    offset = 0\n    let phraseIndex = 0\n    for (let phrase of unit.part.phrases) {\n      console.log('\\tphrase ' + (phraseIndex + 1))\n      let lastPhraseInPart = phraseIndex === unit.part.phrases.length - 1\n\n      // for each bar in phrase\n      let barIndex = 0\n      for (let bar of phrase.bars) {\n        console.log('\\t\\tbar ' + (barIndex + 1))\n        let lastBarInPhrase = barIndex === phrase.bars.length - 1\n\n        // for each note in rhythm\n        let noteIndex = 0\n        for (let note of bar.rhythm.compiledScore) {\n          // note with no chord set (slash)\n          let phraseNote = JSON.parse(JSON.stringify(note))\n          phraseNote.lastInPhrase = lastBarInPhrase && noteIndex === bar.rhythm.compiledScore.length - 1\n          notesSlashed.push(phraseNote)\n\n          // register note with corresponding chord\n          let chordedPhraseNote = JSON.parse(JSON.stringify(phraseNote))\n          chordedPhraseNote.chord = bar.chords[note.placeholderIndex]\n          if (!chordedPhraseNote.chord) throw new VexTabException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n          notes.push(chordedPhraseNote)\n\n          // draw staves when we have completed barsPerLine bars or if the part is done\n          staveDuration += note.duration\n          let partDone = lastPhraseInPart && phraseNote.lastInPhrase\n          if (staveDuration >= songcheat.barsPerLine * barDuration || partDone) {\n            console.log((partDone ? 'EOP' : 'EOL') + ' @ ' + staveDuration + ' units: drawing ' + notes.length + ' notes stave' + (songcheat.mode.length > 1 ? 's' : ''))\n\n            // notation: shows unit.name, chords, accents, stems (slashes) and lyrics\n            // if tablature is not displayed, it also shows strokes/fingering\n            // it never shows PM and frets\n            if (songcheat.mode.indexOf('r') >= 0) {\n              let strokes = songcheat.mode.indexOf('t') < 0\n              vextab += VexTab.Notes2Stave(songcheat, offset, notesSlashed, strokes, 'top', unit.name, -1, true, false)\n              if (strokes && fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 11, 'Arial-9-normal') // PIMA on same line as strokes\n              if (showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, strokes ? 13 : 11, 'Times-11-italic')\n              if (chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, 2, 'Arial-10-normal')\n              vextab += 'options space=' + (strokes ? 40 : 20) + '\\n'\n            }\n\n            // tablature: shows PM, frets and strokes/fingering\n            // if notation is not displayed, it also shows unit.name, chords, lyrics and stems (if mode \"ts\")\n            // it never shows accents\n            if (songcheat.mode.indexOf('t') >= 0) {\n              if (stems) vextab += 'options space=' + 30 + '\\n'\n              vextab += VexTab.Notes2Stave(songcheat, offset, notes, true, false, songcheat.mode.indexOf('r') < 0 ? unit.name : false, stems ? -3 : -1, false, true)\n              if (fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PIMA on same line as strokes\n              if (pmGroups.length > 0) vextab += VexTab.Text2VexTab(pmGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PM on same line as strokes\n              if (songcheat.mode.indexOf('r') < 0 && showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, 12, 'Times-11-italic')\n              if (songcheat.mode.indexOf('r') < 0 && chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, stems ? -1 : 1, 'Arial-10-normal')\n              vextab += 'options space=' + (songcheat.mode.indexOf('r') ? 30 : 10) + '\\n'\n            }\n\n            // space after staves\n            vextab += 'options space=' + 10 + '\\n'\n\n            // increment offset\n            offset += staveDuration\n\n            // clear workspace\n            notes = []\n            notesSlashed = []\n            staveDuration = 0\n          }\n\n          // next note in rhythm\n          noteIndex++\n        }\n\n        // next bar in phrase\n        barIndex++\n      }\n\n      // next phrase in part\n      phraseIndex++\n    }\n\n    return vextab\n  }\n}\n","module.exports = {\n  \"Bass\": require(\"./Bass.json\"),\n  \"BassAmp360\": require(\"./BassAmp360.json\"),\n  \"BassFuzz\": require(\"./BassFuzz.json\"),\n  \"BassFuzz2\": require(\"./BassFuzz2.json\"),\n  \"BassSubDub\": require(\"./BassSubDub.json\"),\n  \"BassSubDub2\": require(\"./BassSubDub2.json\"),\n  \"Brass\": require(\"./Brass.json\"),\n  \"BritBlues\": require(\"./BritBlues.json\"),\n  \"BritBluesDriven\": require(\"./BritBluesDriven.json\"),\n  \"Buzzy1\": require(\"./Buzzy1.json\"),\n  \"Buzzy2\": require(\"./Buzzy2.json\"),\n  \"Celeste\": require(\"./Celeste.json\"),\n  \"ChorusStrings\": require(\"./ChorusStrings.json\"),\n  \"Dissonant1\": require(\"./Dissonant1.json\"),\n  \"Dissonant2\": require(\"./Dissonant2.json\"),\n  \"DissonantPiano\": require(\"./DissonantPiano.json\"),\n  \"DroppedSaw\": require(\"./DroppedSaw.json\"),\n  \"DroppedSquare\": require(\"./DroppedSquare.json\"),\n  \"DynaEPBright\": require(\"./DynaEPBright.json\"),\n  \"DynaEPMed\": require(\"./DynaEPMed.json\"),\n  \"Ethnic33\": require(\"./Ethnic33.json\"),\n  \"Full1\": require(\"./Full1.json\"),\n  \"Full2\": require(\"./Full2.json\"),\n  \"GuitarFuzz\": require(\"./GuitarFuzz.json\"),\n  \"Harsh\": require(\"./Harsh.json\"),\n  \"MklHard\": require(\"./MklHard.json\"),\n  \"Noise\": require(\"./Noise.json\"),\n  \"Organ2\": require(\"./Organ2.json\"),\n  \"Organ3\": require(\"./Organ3.json\"),\n  \"PhonemeAh\": require(\"./PhonemeAh.json\"),\n  \"PhonemeBah\": require(\"./PhonemeBah.json\"),\n  \"PhonemeEe\": require(\"./PhonemeEe.json\"),\n  \"PhonemeO\": require(\"./PhonemeO.json\"),\n  \"PhonemeOoh\": require(\"./PhonemeOoh.json\"),\n  \"PhonemePopAhhhs\": require(\"./PhonemePopAhhhs.json\"),\n  \"Piano\": require(\"./Piano.json\"),\n  \"Pulse\": require(\"./Pulse.json\"),\n  \"PutneyWavering\": require(\"./PutneyWavering.json\"),\n  \"Saw\": require(\"./Saw.json\"),\n  \"Square\": require(\"./Square.json\"),\n  \"TB303Square\": require(\"./TB303Square.json\"),\n  \"Throaty\": require(\"./Throaty.json\"),\n  \"Triangle\": require(\"./Triangle.json\"),\n  \"Trombone\": require(\"./Trombone.json\"),\n  \"TwelveOpTines\": require(\"./TwelveOpTines.json\"),\n  \"TwelveStringGuitar1\": require(\"./TwelveStringGuitar1.json\"),\n  \"WarmSaw\": require(\"./WarmSaw.json\"),\n  \"WarmSquare\": require(\"./WarmSquare.json\"),\n  \"WarmTriangle\": require(\"./WarmTriangle.json\"),\n  \"Wurlitzer\": require(\"./Wurlitzer.json\"),\n  \"Wurlitzer2\": require(\"./Wurlitzer2.json\")\n}\n","import { Utils } from './utils'\nimport waveTables from '@mohayonao/wave-tables'\n\nexport class Player {\n  constructor (audioCtx, notes, config) {\n    this.MODE_RHYTHM = 1 // play beeps only\n    this.MODE_BASS = 2 // when there is a strummed chord, play only bass (no effect onindividual strings)\n    this.MODE_CHORDS = 3 // play actual strummed chords\n\n    config = config || {}\n    config.signature = config.signature || {}\n    config.signature.time = config.signature.time || {}\n\n    // audio context\n    this.audioCtx = audioCtx\n\n    // notes to beep\n    this.notes = notes\n\n    // config: loop or not and callback at end if no loop\n    this.loop = config.loop || false\n    this.onDone = config.onDone || null\n    this.onCountdown = config.onCountdown || function () {}\n\n    // config: capo and signature (tempo, time, shuffle)\n    this.capo = config.capo || 0\n    this.tempo = config.signature.tempo || 100\n    this.beatsPerBar = config.signature.time.beatsPerBar || 4\n    this.beatDuration = config.signature.time.beatDuration || ':q'\n    this.shuffle = config.signature.shuffle ? Utils.duration(config.signature.shuffle) : false\n\n    // tuning, defaults to standard tuning\n    this.tuning = config.tuning || [329.63, // E4\n      246.94, // B3\n      196.00, // G3\n      146.83, // D3\n      110.00, // A2\n      82.41\n    ] // E2\n\n    // play control\n    this.stopped = true\n    this.paused = false\n\n    // initialize to defaults\n    this.speed(100)\n    this.setDisto(0)\n    this.setVolume(50)\n    this.setMode(this.MODE_CHORDS)\n    this.setType(config.type || 'Piano')\n  }\n\n  makeDistortionCurve (amount) {\n    let k = typeof amount === 'number' ? amount : 50\n    let nSamples = 44100\n    let curve = new Float32Array(nSamples)\n    let deg = Math.PI / 180\n    for (let i = 0; i < nSamples; ++i) {\n      let x = i * 2 / nSamples - 1\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x))\n    }\n    return curve\n  }\n\n  /**\n   * duration of the tone in milliseconds\n   * frequency of the tone in hertz\n   * volume of the tone between 0 and 1\n   * type of tone. Possible values are sine, square, sawtooth, triangle, and custom.\n   * callback to use on end of tone\n   */\n  sound (time, duration, frequency, volume, distortion, type, onended) {\n    let audioCtx = this.audioCtx\n    let gainNode = audioCtx.createGain()\n    gainNode.gain.value = volume\n\n    if (distortion) {\n      let distoNode = audioCtx.createWaveShaper()\n      distoNode.curve = this.makeDistortionCurve(parseInt(distortion, 10))\n      distoNode.oversample = '4x'\n      distoNode.connect(audioCtx.destination)\n      gainNode.connect(distoNode)\n    } else gainNode.connect(audioCtx.destination)\n\n    let oscillator = audioCtx.createOscillator()\n    oscillator.connect(gainNode)\n\n    oscillator.frequency.value = frequency\n    oscillator.onended = onended\n\n    // type can be a periodic wave or a standard oscillator type\n    if (waveTables[type]) oscillator.setPeriodicWave(audioCtx.createPeriodicWave(waveTables[type].real, waveTables[type].imag))\n    else oscillator.type = type\n\n    oscillator.start(time)\n    oscillator.stop(time + duration)\n  }\n\n  chord2frequencies (chord, strings, transpose) {\n    let freqs = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      if (!o.mute) freqs.push(this.tuning[o.string - 1] * Math.pow(Math.pow(2, 1 / 12), transpose + o.fret))\n    }\n    return freqs\n  }\n\n  ms_ (note) {\n    // base duration of note\n    let ms_ = note.duration * this.msPerUnit\n\n    // change duration proportions for shuffled notes\n    if (this.shuffle && note.duration === this.shuffle) {\n      if (note.offset % (2 * this.shuffle) === 0) ms_ *= 1.3333\n      else ms_ *= 0.6667\n    }\n\n    return ms_\n  }\n\n  note_ (time) {\n    let audioCtx = this.audioCtx\n    var self = this\n\n    // stop or pause requested\n    if (this.stopped || this.paused) {\n      this.donePlaying = true\n      return true\n    }\n\n    // get note to play\n    if (!this.notes) return false\n    let note = this.notes[this.noteIndex]\n    if (!note) return false\n\n    let isBar = note.offset === 0\n    let isBeat = note.offset % Utils.duration(this.beatDuration) === 0\n    let isUp = note.flags.stroke === 'u' || note.flags.stroke === 'uu'\n    let isDown = note.flags.stroke === 'd' || note.flags.stroke === 'dd'\n    let isArpeggiated = note.flags.stroke && note.flags.stroke.length === 2\n\n    // get number of ms that this note should last\n    let ms = note.tied ? 0 : this.ms_(note)\n\n    // consume next ties note(s) if any\n    for (let nextNoteIndex = this.noteIndex + 1; nextNoteIndex < this.notes.length && this.notes[nextNoteIndex].tied; nextNoteIndex++) ms += this.ms_(this.notes[nextNoteIndex])\n\n    // beep or chord volume\n    let volume = 0.25 * (this.volume / 100.0) // base gain from 0 to 1.5 according to user volume slider\n    if (note.flags.accent) volume *= 1.5 // increase gain by 50% if accent\n    if (note.rest) volume = 0 // silence if rest\n\n    // beep frequency\n    let freqs = [440 * 1.5]\n    if (isBar) freqs[0] *= 2 // octave\n    else if (isBeat) freqs[0] *= 1.5 // quinte\n\n    // get note chord, ignored in rhythm mode\n    let chord = this.mode === this.MODE_RHYTHM ? null : note.chord\n\n    // beep duration is 5 ms\n    // actual notes are played for the whole duration if tied otherwise for 90%\n    let beepduration = chord ? (note.tied ? ms : ms * 0.90) : Math.min(ms, 5)\n\n    // for rhythm type is always square and no distortion, for actual notes use the user-defined settings\n    let type = chord ? this.type : 'square'\n    let distortion = chord ? this.distortion : null\n\n    // played chord (for a rest, chord is set but strings is not)\n    if (chord && note.strings) {\n      // get frequencies for chord notes\n      freqs = this.chord2frequencies(chord, this.mode === this.MODE_BASS ? note.strings.replace(/\\*/g, 'B') : note.strings, this.capo)\n\n      // reverse string order if up stroke\n      if (isUp) freqs = freqs.reverse()\n\n      // adjust volume according to number of simultaneous notes\n      // volume = volume / (2.0 * Math.sqrt(freqs.length));\n      // UPDATE: no, bass among chords is otherwise louder than it should\n      // UPDATE: instead increase volume only if BASS ONLY mode\n      if (this.mode === this.MODE_BASS) volume *= 3\n    }\n\n    // set next note to play\n    this.noteIndex = (this.noteIndex + 1) % this.notes.length\n\n    // info message, scheduled to display at the same time as oscillator will play our sound\n    let what = note.rest ? 'REST' : (note.tied ? 'TIED' : (chord ? chord.name + '/' + freqs.length + ' ' + (isDown ? 'B' : '') + (isUp ? 'H' : '') : 'BEEP'))\n    let message = (isBar ? '\\n|\\t' : '\\t') + ('[' + what + ']').padEnd(10, ' ') + (note.offset + Utils.durationcode(note.duration)).padEnd(5, ' ') + ' ' + ms.toFixed(0) + ' ms [VOL ' + (volume * 100) + '] ' + (isBar ? ' [BAR]' : (isBeat ? ' [BEAT]' : '')) + (note.flags.accent ? ' [ACCENT]' : '')\n    setTimeout(function () { console.info(message) }, Math.max(0, time - audioCtx.currentTime) * 1000)\n\n    // jump to next note if tied\n    if (note.tied) {\n      self.note_(time)\n      return\n    }\n\n    // play beep (1 note) or chord (N notes)\n    let fIndex = 0\n    let delay = 0\n    for (let frequency of freqs) {\n      // handle next node when last note has done playing\n      this.sound(time + delay / 1000.0, (beepduration - delay) / 1000.0, frequency, volume, distortion, type, fIndex < freqs.length - 1 ? null : function () {\n        // back on first note: stop and callback if not loop\n        if (self.noteIndex === 0 && !self.loop) {\n          self.stop()\n          if (self.onDone) self.onDone()\n        } else self.note_(time + ms / 1000.0)\n      })\n\n      // simulate the fact that strings hit first will sound first (but they'll all stop at the same time, hence substrating delay from beepduration above)\n      // when a chord is arpeggiated, take 3/4 of available duration to hit strings the one after the other\n      delay += (isArpeggiated ? (beepduration * 0.75) / freqs.length : (note.tied ? 0 : 10))\n\n      // simulate the fact that first hit strings will sound louder\n      volume *= 0.95\n\n      fIndex++\n    }\n  }\n\n  stop () {\n    this.stopped = true\n    this.paused = false\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  pause () {\n    this.stopped = false\n    this.paused = true\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  play (countdown) {\n    let audioCtx = this.audioCtx\n    let self = this\n\n    if (!this.paused) this.noteIndex = 0\n    this.stopped = false\n    this.paused = false\n\n    this.onCountdown(countdown)\n    if (countdown) this.cd = setTimeout(function () { self.play(countdown - 1) }, 1000)\n    else {\n      // compute for each note the offset wrt the bar it's contained in\n      let offset = 0\n      for (let note of this.notes) {\n        note.offset = offset\n        offset = (offset + note.duration) % (this.beatsPerBar * Utils.duration(this.beatDuration))\n      }\n\n      this.note_(audioCtx.currentTime)\n    }\n  }\n\n  rewind () {\n    if (this.stopped) return\n\n    if (this.paused) {\n      this.noteIndex = 0\n      return\n    }\n\n    let self = this\n    this.donePlaying = false\n    this.stop()\n    let recfun = function () {\n      if (self.donePlaying) self.play()\n      else setTimeout(recfun, 100)\n    }\n    recfun()\n  }\n\n  getTempo () {\n    return (this.tempo * this.speedpct / 100.0).toFixed(0)\n  }\n\n  speed (pct) {\n    if (pct < 0) throw new Error('Invalid tempo percentage: ' + pct)\n\n    this.speedpct = pct\n\n    // compute ms per duration unit based on given tempo and beat duration\n    let msPerBeat = 60000 / (this.tempo * this.speedpct / 100.0) // ms/beat = ms/minute : beats/minute\n    this.msPerUnit = msPerBeat / Utils.duration(this.beatDuration) // ms/unit = ms/beat : units/beat\n    console.info('Player gone to ' + msPerBeat + ' ms / beat')\n  }\n\n  speedup (step) {\n    this.speed(Math.min(500, this.speedpct + step))\n  }\n\n  slowdown (step) {\n    this.speed(Math.max(20, this.speedpct - step))\n  }\n\n  setMode (mode) {\n    this.mode = parseInt(mode, 10)\n    console.info('Player gone to mode ' + mode)\n  }\n\n  setType (type) {\n    this.type = type\n    console.info('Player gone to type ' + type)\n  }\n\n  setDisto (d) {\n    this.distortion = parseInt(d, 10)\n    console.info('Player gone to disto ' + d)\n  }\n\n  setVolume (v) {\n    this.volume = parseInt(v, 10)\n    console.info('Player gone to volume ' + v)\n  }\n}\n","import { Utils, Player, waveTables } from 'songcheat-core'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\nexport function PlayerUI (audioCtx, songcheat, notes, loop) {\n  var self = this\n\n  if (!notes) {\n    // whole song (or selected unit)\n    notes = []\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (songcheat.showUnitIndex !== null && songcheat.showUnitIndex !== unitIndex) { unitIndex++; continue }\n      for (let phrase of unit.part.phrases) {\n        for (let bar of phrase.bars) {\n          for (let note of bar.rhythm.compiledScore) {\n            let chordedNote = JSON.parse(JSON.stringify(note))\n            chordedNote.chord = bar.chords[note.placeholderIndex % bar.chords.length]\n            if (!chordedNote.chord) throw new Error('No chord found for placeholder ' + (note.placeholderIndex + 1))\n            notes.push(chordedNote)\n          }\n        }\n      }\n      unitIndex++\n    }\n  }\n\n  // create player\n  let player = new Player(audioCtx, notes, {\n    loop: loop,\n    capo: parseInt(songcheat.capo, 10),\n    signature: songcheat.signature,\n    type: songcheat.wave,\n    onDone: function () { $stopLink.trigger('click') },\n    onCountdown: function (c) { $countdownZone.html(c || '') }\n  })\n\n  // controls\n  this.$div = $('<div>').css({ 'margin-top': '10px', 'position': 'relative' })\n\n  let $speedMention = $('<span>').css({ 'font-size': '.9em', 'font-weight': 'bold', 'padding-left': '10px' })\n  let updateSpeed = function () {\n    $speedMention.html(player.getTempo() + ' bpm')\n    $tempoSlider.val(player.speedpct)\n  }\n  let $countdownZone = $('<span>').css({ 'font-size': '4em', 'font-weight': 'normal', 'color': 'red', 'text-shadow': '4px 4px 2px rgba(200, 150, 150, 1)', 'position': 'absolute', 'top': '10px', 'right': '10px' })\n\n  let $speed100Link = $('<a>').css({ 'padding-left': '10px' }).html('Original').on('click', function () {\n    player.speed(100)\n    updateSpeed()\n  })\n\n  let $playLink = $('<a>').html('&#9658;').on('click', function () {\n    player.play(player.paused || loop ? 0 : 3)\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $playLink.hide()\n  })\n\n  let $rewindLink = $('<a>').html('&#9668;').on('click', function () {\n    player.rewind()\n  })\n\n  let $pauseLink = $('<a>').html('&#10074;&#10074;').on('click', function () {\n    player.pause()\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $pauseLink.hide()\n  })\n\n  let $stopLink = $('<a>').html('&#9724').on('click', function () {\n    player.stop()\n    self.$div.find('.autohide').hide()\n    $speedMention.hide()\n    $playLink.show()\n  })\n\n  this.$div\n    .append($playLink)\n    .append($pauseLink)\n    .append($stopLink)\n    .append($rewindLink)\n    .append('&nbsp;&nbsp;')\n    .append($countdownZone)\n    .append('<hr class=\"autohide\" style=\"clear:both; border:1px solid #ccc\"/>')\n\n  let unique = Date.now()\n\n  // enable mode and type switch if at least one actual musical note found (with chords and strings to play)\n  let musicalSwitches = false\n  for (let note of notes) { if (note.chord && note.strings) { musicalSwitches = true; break } }\n  if (musicalSwitches) {\n    let $divMusicalSwitches = $(\"<div style='float:right'>\")\n    this.$div.append($divMusicalSwitches)\n\n    // mode switch\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '10px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_CHORDS + '\" checked>')).append(' Chords ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_BASS + '\">')).append(' Bass only ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_RHYTHM + '\">')).append(' Rhythm '))\n    this.$div.find('input[name=modeswitch' + unique + ']').change(function () { player.setMode($(this).val()) })\n\n    // type switch\n    let $typeSwitch = $('<select>')\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' }).append('Wave form: ').append($typeSwitch))\n    for (let type of ['sine', 'square', 'sawtooth', 'triangle']) $typeSwitch.append($('<option>').attr('selected', player.type === type).attr('value', type).text('(' + type + ')'))\n    for (let instrument in waveTables) $typeSwitch.append($('<option>').attr('selected', player.type === instrument).attr('value', instrument).text(instrument))\n    $typeSwitch.change(function () { player.setType($(this).val()) })\n\n    // disto slider\n    let $distoSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.distortion + '\" class=\"slider\" style=\"margin-top: 10px\">')\n    // $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append(\"Distortion: \").append($distoSlider));\n    $distoSlider.on('input', function () { player.setDisto(parseInt($(this).val(), 10)) })\n    $distoSlider.on('change', function () { player.setDisto(parseInt($(this).val(), 10)) })\n  }\n\n  // tempo slider\n  let $tempoSlider = $('<input type=\"range\" min=\"1\" max=\"200\" value=\"' + player.speedpct + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Tempo: ').append($tempoSlider).append($speedMention).append($speed100Link))\n  $tempoSlider.on('input', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n  $tempoSlider.on('change', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n\n  // volume slider\n  let $volumeSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.volume + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Volume: ').append($volumeSlider))\n  $volumeSlider.on('input', function () { player.setVolume(parseInt($(this).val(), 10)) })\n  $volumeSlider.on('change', function () { player.setVolume(parseInt($(this).val(), 10)) })\n\n  // allow to disable shuffle if song has a shuffle defined\n  if (songcheat.signature.shuffle) {\n    this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"on\" checked>')).append(' Shuffle On ')\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"off\">')).append(' Shuffle Off '))\n    this.$div.find('input[name=shuffleswitch' + unique + ']').change(function () {\n      player.shuffle = $(this).val() === 'on' ? Utils.duration(songcheat.signature.shuffle) : null\n    })\n  }\n\n  this.$div.find('a').css({ 'cursor': 'pointer', 'font-size': '1em', 'margin-right': '10px' }).addClass('autohide')\n\n  // initialize in stopped state\n  updateSpeed()\n  $stopLink.trigger('click')\n}\n\nPlayerUI.prototype.div = function () {\n  return this.$div\n}\n","import { Utils, Compiler, Lyrics, ChordPix, VexTab as SongcheatVexTab } from 'songcheat-core'\nimport { PlayerUI } from './player_ui'\nimport samples from '../dist/samples.json'\n\n// create audio context\nlet audioCtx = new (window.AudioContext || window.webkitAudioContext || window.audioContext)()\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// https://github.com/rollup/rollup/issues/1803/\n// import { VexTab, Artist, Vex } from 'vextab'\nlet VexTab = window.VexTab\nlet Artist = window.Artist\nlet Vex = window.Vex\n\nlet DEBUG = 0\nlet localStorage = window.localStorage\nlet compiler = new Compiler(DEBUG)\n\nArtist.NOLOGO = true\n\nfunction addEvent (elem, event, fn) {\n  if (elem.addEventListener) return elem.addEventListener(event, fn, false)\n  elem.attachEvent('on' + event, function () { return (fn.call(elem, window.event)) })\n}\n\nfunction onChange (elem, fn, data) {\n  var priorValue = elem.value\n\n  function checkNotify (e, delay) {\n    // notify if actually changed\n    if (elem.value !== priorValue) {\n      priorValue = elem.value\n      fn.call(this, e, data)\n    } else {\n      // the actual data change happens after some events so we queue a check\n      if (delay) setTimeout(function () { checkNotify(e, false) }, 0)\n    }\n  }\n\n  var events = ['keyup', false, 'blur', false, /* \"focus\", false, */ 'drop', true, 'change', false, 'input', false, 'paste', true, 'cut', true, 'copy', true]\n  for (let i = 0; i < events.length; i += 2) addEvent(elem, events[i], function (e) { checkNotify.call(this, e, events[i + 1]) })\n}\n\nfunction go (song, songcheat) {\n  let data = { 'song': song, 'debug': DEBUG }\n  for (let p of ['mode', 'lyricsMode', 'showUnit', 'maxsp', 'barsPerLine', 'splitUnits', 'splitParts', 'partdisplay']) data[p] = songcheat[p]\n  window.location.href = 'viewer.html?' + Utils.encodeQueryData(data)\n}\n\nfunction songcheat (songcheat, $divScore, $divChords, $divParts, $divStructure, $divLyrics, $divRhythms, scoreWidth, chordWidth, rhythmsWidth) {\n  var get = new window.URLSearchParams(window.location.search)\n  DEBUG = parseInt(get.get('debug'), 10) || DEBUG // debug level\n\n  scoreWidth = scoreWidth || 800\n  chordWidth = chordWidth || 250\n\n  let canvas = $divScore[0]\n  canvas.getContext('2d')\n\n  // default values for mode, bars per line and scale\n  songcheat.scale = songcheat.scale || 0.92\n  songcheat.mode = songcheat.mode || 'rt'\n  songcheat.lyricsMode = songcheat.lyricsMode || 's'\n  songcheat.showUnit = songcheat.showUnit || '*'\n  songcheat.barsPerLine = songcheat.barsPerLine || 4\n  songcheat.maxsp = typeof songcheat.maxsp === 'undefined' ? 1 : songcheat.maxsp\n  songcheat.splitUnits = typeof songcheat.splitUnits === 'undefined' ? 0 : songcheat.splitUnits\n  songcheat.splitParts = typeof songcheat.splitParts === 'undefined' ? 4 : songcheat.splitParts\n  songcheat.partdisplay = songcheat.partdisplay || 'compact'\n\n  // settings that may be forced in GET\n  songcheat.mode = get.get('mode') || songcheat.mode\n  songcheat.lyricsMode = get.get('lyricsMode') || songcheat.lyricsMode\n  songcheat.showUnit = get.get('showUnit') || songcheat.showUnit\n  songcheat.barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : songcheat.barsPerLine\n  songcheat.maxsp = get.get('maxsp') ? parseInt(get.get('maxsp'), 10) : songcheat.maxsp\n  songcheat.splitUnits = get.get('splitUnits') ? parseInt(get.get('splitUnits'), 10) : songcheat.splitUnits\n  songcheat.splitParts = get.get('splitParts') ? parseInt(get.get('splitParts'), 10) : songcheat.splitParts\n  songcheat.partdisplay = get.get('partdisplay') || songcheat.partdisplay\n\n  // ensure showUnit is within the bounds\n  songcheat.showUnitIndex = songcheat.showUnit === '*' ? null : Math.min(songcheat.structure.length - 1, parseInt(songcheat.showUnit, 10))\n  if (songcheat.showUnitIndex < 0) songcheat.showUnitIndex = null\n  songcheat.showUnit = songcheat.showUnitIndex !== null ? songcheat.showUnitIndex : '*'\n\n  // compile\n  try {\n    songcheat = compiler.compile(songcheat)\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n    return false\n  }\n\n  // links to other songs\n  $('a[rel]').click(function () {\n    go(parseInt($(this).attr('rel'), 10) + 1, songcheat)\n  })\n\n  // build unit select\n  let unitIndex = 0\n  for (let unit of songcheat.structure) $('select[name=showUnit]').append($('<option>').val(unitIndex++).text(unit.name))\n\n  // for each user controlled setting\n  $('select').each(function () {\n    // initialize\n    $(this).val(songcheat[$(this).attr('name')])\n\n    // reload on change\n    $(this).change(function () {\n      songcheat[$(this).attr('name')] = $(this).val()\n      go(window.scIndex + 1, songcheat)\n    })\n  })\n\n  // shuffle\n  if (songcheat.signature.shuffle) {\n    $('#left h3:first').append($('<span>').html('<br/>Shuffle ' + (songcheat.signature.shuffle === ':4' ? 'quarter notes' : songcheat.signature.shuffle.substr(1) + 'th notes')))\n  }\n\n  // shuffle 8th image\n  if (songcheat.signature.shuffle === ':8') {\n    $('#left h3:first').append($('<img>').css({ 'padding-left': '50px', 'width': '100px', 'display': 'inline', 'vertical-align': 'bottom' }).attr('src', '../img/shuffle_8th.svg'))\n  }\n\n  // chord diagrams\n  for (let chord of songcheat.chords) {\n    var url = DEBUG ? '../img/missing_diagram.png' : ChordPix.url(chord, chordWidth)\n    let $cDiv = $('<div>').css({ 'display': 'inline-block', 'vertical-align': 'top' })\n    $divChords.append($cDiv)\n    $cDiv.append($('<img>').attr('src', url).attr('title', chord.comment).css({ 'display': 'block' /* removes whitespace below image */, 'width': chordWidth + 'px' }))\n    $cDiv.append($('<p>').css({ 'width': chordWidth + 'px', 'font-size': '0.85em', 'text-align': 'center', 'margin-top': '0px' }).html(chord.comment))\n  }\n\n  //  ascii parts\n  for (let part of songcheat.parts) {\n    let $divPart = $('<div>').css({ 'color': part.color })\n    let $partsZone = $('<p>')\n    $divPart.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '0px' }).html(part.name))\n    $divPart.append($partsZone)\n    $divParts.append($divPart)\n    displayParts(songcheat, part, $partsZone)\n  }\n\n  //  ascii structure\n  for (let unit of songcheat.structure) {\n    $divStructure.append($('<p>').css({ 'font-weight': 'bold', 'margin': '5px 0px', 'color': unit.part.color }).html('[' + unit.name + ']'))\n  }\n\n  //  ascii lyrics\n  for (let unit of songcheat.structure) {\n    // load from local storage\n    let lskey = 'SongCheatLyrics.' + songcheat.id + '.unit.' + unit.name\n    unit.lyrics = localStorage.getItem(lskey) || unit.lyrics\n\n    // view zone\n    let $divUnit = $('<div>').css({ 'color': unit.part.color })\n    let $editLink = $('<a>').html('Edit').css('text-decoration', 'underline').css('cursor', 'pointer').css('font-size', '0.75em').css('float', 'right').css('margin-right', '10px')\n    let $lyricsZone = $('<p>').css('line-height', '150%')\n    $divUnit.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '2px', 'margin-top': '35px' }).html('[' + unit.name + '] ').append($editLink))\n    $divUnit.append($lyricsZone)\n    $divLyrics.append($divUnit)\n    displayLyrics(songcheat, unit, $lyricsZone)\n\n    // hidden edit zone\n    let $divUnitEdit = $('<div>')\n    let $closeLink = $('<a>').html('Close').css('text-decoration', 'underline').css('cursor', 'pointer')\n    $divUnitEdit.append($('<textarea>').css('font-size', '1em').css('width', '400px').css('height', '200px'))\n    $divUnitEdit.append('<br/>').append($closeLink)\n    $divLyrics.append($divUnitEdit.hide())\n\n    // save lyrics and update ui\n    let saveAndUpdate = function (updateVextab) {\n      // save to local storage\n      unit.lyrics = $(this).val()\n      localStorage.setItem(lskey, unit.lyrics)\n\n      // re-display ascii\n      displayLyrics(songcheat, unit, $lyricsZone)\n\n      if (updateVextab) {\n        // recreate canvas\n        let $canvas = $('<canvas>')\n        $(canvas).after($canvas).remove()\n        canvas = $canvas[0]\n\n        // reload vextab score\n        let renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS)\n        let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n        let vextab = new VexTab(artist)\n        console.info('Parsing score...')\n        vextab.parse(SongcheatVexTab.Songcheat2VexTab(songcheat))\n        console.info('Rendering score...')\n        artist.render(renderer)\n        console.info('Score done!')\n      }\n    }\n\n    // edit action\n    $editLink.on('click', function () {\n      $divUnit.find('p:last') // .hide();\n      $divUnitEdit.show().find('textarea').val(unit.lyrics).focus()\n    })\n\n    // close action\n    $closeLink.on('click', function () {\n      $divUnitEdit.hide()\n      saveAndUpdate.call($divUnitEdit.find('textarea')[0], true)\n    })\n\n    // auto-save\n    onChange($divUnitEdit.find('textarea')[0], function (e) {\n      console.log('Auto saving on event ' + e.type)\n      saveAndUpdate.call(this, true)\n    })\n  }\n\n  // parse and render rhythms with vextab\n  for (let rhythm of songcheat.rhythms) {\n    let $divRhythm = $('<div>')\n    $divRhythms.append($divRhythm)\n\n    // player controls\n    $divRhythm.before(new PlayerUI(audioCtx, songcheat, rhythm.compiledScore, true).div())\n\n    // warning if not a whole number of bars\n    if (rhythm.duration % songcheat.barDuration) {\n      let warning = 'Rhythm ' + rhythm.id + ' is currently equivalent to ' + Math.floor(rhythm.duration / songcheat.barDuration) + ' bar(s) and ' + Utils.durationcodes(rhythm.duration % songcheat.barDuration) + '. A rhythm unit should be equivalent to a whole number of bars.'\n      $divRhythm.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n    }\n\n    try {\n      console.info('Converting rhythm to vextab score...')\n      let score = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=false tab-stem-direction=up\\n'\n      score += SongcheatVexTab.Notes2Stave(songcheat, 0, rhythm.compiledScore, true, 'top', 'Rhythm ' + (rhythm.name || rhythm.id), 1, true, false) + ' options space=20'\n      console.info('Parsing score...')\n      let artist = new Artist(10, 10, rhythmsWidth, { scale: 1.0 })\n      let vextab = new VexTab(artist)\n      vextab.parse(score)\n      console.info('Rendering score...')\n      artist.render(new Vex.Flow.Renderer($divRhythm[0], Vex.Flow.Renderer.Backends.SVG))\n      console.info('Score done!')\n    } catch (e) {\n      $divRhythm.html(e.message).css('color', 'red')\n      console.error(e)\n    }\n  }\n\n    // player controls\n  $(canvas).before(new PlayerUI(audioCtx, songcheat).div())\n\n    // parse and render full song score with vextab\n  try {\n    console.info('Converting songcheat to vextab score...')\n    let score = SongcheatVexTab.Songcheat2VexTab(songcheat)\n    console.info('Parsing score...')\n    let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n    let vextab = new VexTab(artist)\n    vextab.parse(score)\n    console.info('Rendering score...')\n    artist.render(new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS))\n    console.info('Score done!')\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n  }\n}\n\nfunction displayParts (songcheat, part, $partsZone) {\n  // clear eveyrthing\n  $partsZone.parent().find('p.warning,p.error').remove()\n  $partsZone.html('')\n\n  try {\n    // if compact part display enabled, set maxsp = 1\n    // if full part display enabled, force maxsp = 0: we want the exact position of chords\n    // always split by N bars (no lyrics so split as entered makes no sense, splitParts is never 0)\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    let lyrics = new Lyrics(songcheat, DEBUG)\n    $partsZone.append(lyrics.getPartText(part, songcheat.partdisplay === 'compact' ? 1 : 0, songcheat.splitParts, 'rhythm', false))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $partsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nfunction displayLyrics (songcheat, unit, $lyricsZone) {\n  // clear eveyrthing\n  $lyricsZone.parent().find('p.warning,p.error').remove()\n  $lyricsZone.html('')\n\n  try {\n    // parse lyrics\n    let lyrics = new Lyrics(songcheat, DEBUG)\n    let warnings = lyrics.parseLyrics(unit)\n\n    // display parser warnings\n    for (let warning of warnings) {\n      $lyricsZone.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n      console.warn('[' + unit.name + '] ' + warning)\n    }\n\n    // build and display lyrics\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $lyricsZone.append(lyrics.getUnitText(unit, songcheat.maxsp, songcheat.splitUnits, 'rhythm', songcheat.maxsp !== 1))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $lyricsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nvar get = new window.URLSearchParams(window.location.search)\nlet scIndex = window.scIndex = (parseInt(get.get('song'), 10) || 1) - 1\nlet sc = samples[scIndex]\nsc.id = scIndex + 1 // simulate a mongodb id for saving lyrics\n\ndocument.title = sc.title + ' | ' + document.title\n$('#left h1').html(sc.title)\n$('#left h2').html(sc.artist + ', ' + sc.year)\n$('#left h3.tempo').html('Tempo: ' + sc.signature.tempo + ' bpm')\n$('#left p').html(sc.comment)\n\n$('#left h3.capo').html('Capo: ' + (sc.capo > 0 ? sc.capo : 'n/a'))\n$('#left h3.tuning').html('Tuning: ' + sc.tuning)\n\n$('#middle h4, #right h4').css('text-decoration', 'underline').css('font-size', '1.1em').css('margin', '0.5em 0em')\n\nlet barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : (sc.barsPerLine || 4)\nlet naturalSize = $(window).width() * 0.45\nlet absMinSize = 640\nlet minSize = Math.max(barsPerLine * 300, absMinSize)\nlet maxSize = Math.max(barsPerLine * 450, absMinSize)\nvar scoreWidth = Math.min(maxSize, Math.max(minSize, naturalSize))\nvar rhythmWidth = Math.min(750, Math.max(400, $(window).width() * 0.24))\n$('#right').css('width', scoreWidth + 'px')\n\nvar _scIndex = 0\nfor (var sc_ of samples) {\n  /* if (_scIndex != scIndex) */\n  $('#links').append($(\"<a style='font-size: 0.9em; color: black; cursor: pointer; text-decoration:underline'>\").attr('rel', _scIndex).html(sc_.title + ' (' + sc_.artist + ', ' + sc_.year + ')')).append('<br/>')\n  _scIndex++\n}\n\nsongcheat(sc, $('#score'), $('#chords'), $('#parts'), $('#structure'), $('#lyrics'), $('#rhythms'), scoreWidth, 175, rhythmWidth)\n$('body').show()\n"]}