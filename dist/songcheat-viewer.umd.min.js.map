{"version":3,"sources":["../src/player_ui.js","../index.js","../../songcheat-core/dist/songcheat-core.esm.js","../../songcheat-chordpix/dist/songcheat-chordpix.esm.js","../../songcheat-vextab/dist/songcheat-vextab.esm.js","../../songcheat-player/node_modules/@mohayonao/wave-tables/index.js","../../songcheat-player/src/player.js"],"names":["PlayerUI","audioCtx","songcheat","notes","loop","self","this","unitIndex","unit","structure","showUnitIndex","phrase","part","phrases","bar","bars","note","rhythm","compiledScore","chordedNote","JSON","parse","stringify","chord","chords","placeholderIndex","length","Error","push","player","Player","capo","parseInt","signature","type","wave","onDone","$stopLink","trigger","onCountdown","c","$countdownZone","html","$div","$","css","margin-top","position","$speedMention","font-size","font-weight","padding-left","updateSpeed","getTempo","$tempoSlider","val","speedpct","color","text-shadow","top","right","$speed100Link","on","speed","$playLink","play","paused","find","show","hide","$rewindLink","rewind","$pauseLink","pause","stop","append","unique","Date","now","musicalSwitches","strings","$divMusicalSwitches","display","MODE_CHORDS","MODE_BASS","MODE_RHYTHM","change","setMode","$typeSwitch","attr","text","instrument","waveTables","setType","$distoSlider","distortion","setDisto","$volumeSlider","volume","setVolume","shuffle","Utils","duration","cursor","margin-right","addClass","addEvent","elem","event","fn","addEventListener","attachEvent","call","window","onChange","data","checkNotify","e","delay","value","priorValue","setTimeout","events","i","go","song","debug","DEBUG","p","location","href","encodeQueryData","displayLyrics","$lyricsZone","parent","remove","warnings","compiler","parseLyrics","warning","before","console","warn","name","getUnitText","maxsp","splitUnits","message","error","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","toConsumableArray","arr","Array","isArray","arr2","from","a","b","str","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","join","ret","d","encodeURIComponent","code","units","_arr","_i","codes","current","rest","durationcode","fret","String","fromCharCode","charCodeAt","startingFret","char2fret","relFret","fret2char","tablature","fingering","result","string","indexOf","mute","ParserException","line","Parser_","blocks","tokens","tokenize","tokenIndex","token","keyword","isKeyword","params","handler","handleDefault","lastResult","chordIndex","rhythmIndex","partIndex","rhythms","parts","paramIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","Math","floor","err","return","camelCase","reSpaces","reNewline","lineNumber","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","parseFloat","handleSignature","beatsPerBar","beatDuration","symbol","comment","id","score","splice","pIndex","param","substr","found","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_part","_found","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_chord","handleChord","args","apply","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","lyrics","CompilerException","Parser","parser_","getPrecedingKeyword","Compiler_","log","arguments","mode","lyricsMode","barsPerLine","time","lyricsUnit","barDuration","resolveIds","unitsByPart","numberByPart","_unit","colors","compileRhythm","_part2","phraseIndex","chordChanges","lastChord","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","addChordChanges","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","barIndex","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_bar","chordChangesMode","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_c","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_c2","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_phrase","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_bar2","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","resolveId","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_part3","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","chordId","collection","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","initialNoteDuration","noteDuration","placeholdercount","lastToken","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","tied","flags","flagsString","stroke","accent","pm","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","flag","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","o","resetAtBars","offset","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","hidden","defaultCursorStep","groups","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","registerGroup","missingDuration","durationcodes","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","group","groupLength","getGroupLength","plen","max","ceil","pmax","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","_group","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","chordDuration","_group3","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","g","getChordDisplay","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","_phrase2","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","_arr2","_i2","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","_chordDuration","_group4","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","_g","debugText","zeroDuration","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","_group2","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","concat","needFinalSpace","maxLength","min","minLength","filler","groupText","chordInserts","_iteratorNormalCompletion37","_didIteratorError37","_iteratorError37","_step37","_iterator37","_group5","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","_iteratorNormalCompletion40","_didIteratorError40","_iteratorError40","_step40","_iterator40","_iteratorNormalCompletion41","_didIteratorError41","_iteratorError41","_step41","_iterator41","_chordChange","positionDelta","positionDelta_","_iteratorNormalCompletion38","_didIteratorError38","_iteratorError38","_step38","_iterator38","chordInsert","skip","unitText_","chordText","_iteratorNormalCompletion39","_didIteratorError39","_iteratorError39","_step39","_iterator39","_iteratorNormalCompletion42","_didIteratorError42","_iteratorError42","_step42","_iterator42","_chordInsert","inserted","interlace","step","addDuration","Compiler","compiler_","set","title","scc","compile","classCallCheck$1","createClass$1","toConsumableArray$1","ChordPixException","ChordPix","url","barredFret","rel2abs","chordWidth","frets","minFret","filter","x","maxFret","nbFrets","abs2rel","relTablature","_char","VexTabException","VexTab","transpose","vextabchord","chordStrings","strokes","accents","vextab","Chord2VexTab","subtitle","hs","notation","tuning","Note2VexTab","lastInPhrase","textGroups","staveDuration","h","font","gap","available","Unit2VexTab","stems","showLyrics","tempo","notesSlashed","lyricsGroups","chordGroups","chordChange","fingeringGroups","pmGroups","_note","_phrase3","lastPhraseInPart","_bar3","lastBarInPhrase","noteIndex","_note2","phraseNote","chordedPhraseNote","partDone","Notes2Stave","Text2VexTab","Bass","BassAmp360","BassFuzz","BassFuzz2","BassSubDub","BassSubDub2","Brass","BritBlues","BritBluesDriven","Buzzy1","Buzzy2","Celeste","ChorusStrings","Dissonant1","Dissonant2","DissonantPiano","DroppedSaw","DroppedSquare","DynaEPBright","DynaEPMed","Ethnic33","Full1","Full2","GuitarFuzz","Harsh","MklHard","Noise","Organ2","Organ3","PhonemeAh","PhonemeBah","PhonemeEe","PhonemeO","PhonemeOoh","PhonemePopAhhhs","Piano","Pulse","PutneyWavering","Saw","Square","TB303Square","Throaty","Triangle","Trombone","TwelveOpTines","TwelveStringGuitar1","WarmSaw","WarmSquare","WarmTriangle","Wurlitzer","Wurlitzer2","[object Object]","config","stopped","amount","k","curve","Float32Array","deg","PI","abs","frequency","onended","gainNode","createGain","gain","distoNode","createWaveShaper","makeDistortionCurve","oversample","connect","destination","oscillator","createOscillator","setPeriodicWave","createPeriodicWave","real","imag","start","freqs","pow","ms_","msPerUnit","donePlaying","isBar","isBeat","isUp","isDown","isArpeggiated","ms","nextNoteIndex","beepduration","chord2frequencies","reverse","what","padEnd","info","currentTime","note_","fIndex","sound","cd","clearTimeout","countdown","recfun","pct","msPerBeat","jQuery","div","AudioContext","webkitAudioContext","audioContext","Artist","Vex","localStorage","NOLOGO","get","URLSearchParams","search","scIndex","sc","samples","document","artist","year","naturalSize","width","minSize","maxSize","scoreWidth","rhythmWidth","_scIndex","sc_","$divScore","$divChords","$divParts","$divStructure","$divLyrics","$divRhythms","rhythmsWidth","canvas","getContext","scale","showUnit","splitParts","partdisplay","click","each","vertical-align","$cDiv","text-align","$divPart","$partsZone","text-decoration","margin-bottom","getPartText","displayParts","margin","lskey","getItem","$divUnit","$editLink","$divUnitEdit","$closeLink","saveAndUpdate","updateVextab","setItem","$canvas","after","renderer","Flow","Renderer","Backends","CANVAS","SongcheatVexTab","Songcheat2VexTab","render","focus","$divRhythm","SVG"],"mappings":"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","sourcesContent":["import { Utils } from 'songcheat-core'\nimport { Player, waveTables } from 'songcheat-player'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\nexport function PlayerUI (audioCtx, songcheat, notes, loop) {\n  var self = this\n\n  if (!notes) {\n    // whole song (or selected unit)\n    notes = []\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (songcheat.showUnitIndex !== null && songcheat.showUnitIndex !== unitIndex) { unitIndex++; continue }\n      for (let phrase of unit.part.phrases) {\n        for (let bar of phrase.bars) {\n          for (let note of bar.rhythm.compiledScore) {\n            let chordedNote = JSON.parse(JSON.stringify(note))\n            chordedNote.chord = bar.chords[note.placeholderIndex % bar.chords.length]\n            if (!chordedNote.chord) throw new Error('No chord found for placeholder ' + (note.placeholderIndex + 1))\n            notes.push(chordedNote)\n          }\n        }\n      }\n      unitIndex++\n    }\n  }\n\n  // create player\n  let player = new Player(audioCtx, notes, {\n    loop: loop,\n    capo: parseInt(songcheat.capo, 10),\n    signature: songcheat.signature,\n    type: songcheat.wave,\n    onDone: function () { $stopLink.trigger('click') },\n    onCountdown: function (c) { $countdownZone.html(c || '') }\n  })\n\n  // controls\n  this.$div = $('<div>').css({ 'margin-top': '10px', 'position': 'relative' })\n\n  let $speedMention = $('<span>').css({ 'font-size': '.9em', 'font-weight': 'bold', 'padding-left': '10px' })\n  let updateSpeed = function () {\n    $speedMention.html(player.getTempo() + ' bpm')\n    $tempoSlider.val(player.speedpct)\n  }\n  let $countdownZone = $('<span>').css({ 'font-size': '4em', 'font-weight': 'normal', 'color': 'red', 'text-shadow': '4px 4px 2px rgba(200, 150, 150, 1)', 'position': 'absolute', 'top': '10px', 'right': '10px' })\n\n  let $speed100Link = $('<a>').css({ 'padding-left': '10px' }).html('Original').on('click', function () {\n    player.speed(100)\n    updateSpeed()\n  })\n\n  let $playLink = $('<a>').html('&#9658;').on('click', function () {\n    player.play(player.paused || loop ? 0 : 3)\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $playLink.hide()\n  })\n\n  let $rewindLink = $('<a>').html('&#9668;').on('click', function () {\n    player.rewind()\n  })\n\n  let $pauseLink = $('<a>').html('&#10074;&#10074;').on('click', function () {\n    player.pause()\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $pauseLink.hide()\n  })\n\n  let $stopLink = $('<a>').html('&#9724').on('click', function () {\n    player.stop()\n    self.$div.find('.autohide').hide()\n    $speedMention.hide()\n    $playLink.show()\n  })\n\n  this.$div\n    .append($playLink)\n    .append($pauseLink)\n    .append($stopLink)\n    .append($rewindLink)\n    .append('&nbsp;&nbsp;')\n    .append($countdownZone)\n    .append('<hr class=\"autohide\" style=\"clear:both; border:1px solid #ccc\"/>')\n\n  let unique = Date.now()\n\n  // enable mode and type switch if at least one actual musical note found (with chords and strings to play)\n  let musicalSwitches = false\n  for (let note of notes) { if (note.chord && note.strings) { musicalSwitches = true; break } }\n  if (musicalSwitches) {\n    let $divMusicalSwitches = $(\"<div style='float:right'>\")\n    this.$div.append($divMusicalSwitches)\n\n    // mode switch\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '10px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_CHORDS + '\" checked>')).append(' Chords ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_BASS + '\">')).append(' Bass only ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_RHYTHM + '\">')).append(' Rhythm '))\n    this.$div.find('input[name=modeswitch' + unique + ']').change(function () { player.setMode($(this).val()) })\n\n    // type switch\n    let $typeSwitch = $('<select>')\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' }).append('Wave form: ').append($typeSwitch))\n    for (let type of ['sine', 'square', 'sawtooth', 'triangle']) $typeSwitch.append($('<option>').attr('selected', player.type === type).attr('value', type).text('(' + type + ')'))\n    for (let instrument in waveTables) $typeSwitch.append($('<option>').attr('selected', player.type === instrument).attr('value', instrument).text(instrument))\n    $typeSwitch.change(function () { player.setType($(this).val()) })\n\n    // disto slider\n    let $distoSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.distortion + '\" class=\"slider\" style=\"margin-top: 10px\">')\n    // $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append(\"Distortion: \").append($distoSlider));\n    $distoSlider.on('input', function () { player.setDisto(parseInt($(this).val(), 10)) })\n    $distoSlider.on('change', function () { player.setDisto(parseInt($(this).val(), 10)) })\n  }\n\n  // tempo slider\n  let $tempoSlider = $('<input type=\"range\" min=\"1\" max=\"200\" value=\"' + player.speedpct + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Tempo: ').append($tempoSlider).append($speedMention).append($speed100Link))\n  $tempoSlider.on('input', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n  $tempoSlider.on('change', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n\n  // volume slider\n  let $volumeSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.volume + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Volume: ').append($volumeSlider))\n  $volumeSlider.on('input', function () { player.setVolume(parseInt($(this).val(), 10)) })\n  $volumeSlider.on('change', function () { player.setVolume(parseInt($(this).val(), 10)) })\n\n  // allow to disable shuffle if song has a shuffle defined\n  if (songcheat.signature.shuffle) {\n    this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"on\" checked>')).append(' Shuffle On ')\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"off\">')).append(' Shuffle Off '))\n    this.$div.find('input[name=shuffleswitch' + unique + ']').change(function () {\n      player.shuffle = $(this).val() === 'on' ? Utils.duration(songcheat.signature.shuffle) : null\n    })\n  }\n\n  this.$div.find('a').css({ 'cursor': 'pointer', 'font-size': '1em', 'margin-right': '10px' }).addClass('autohide')\n\n  // initialize in stopped state\n  updateSpeed()\n  $stopLink.trigger('click')\n}\n\nPlayerUI.prototype.div = function () {\n  return this.$div\n}\n","import { Utils, Compiler } from 'songcheat-core'\nimport { ChordPix } from 'songcheat-chordpix'\nimport { VexTab as SongcheatVexTab } from 'songcheat-vextab'\nimport { PlayerUI } from './src/player_ui.js'\nimport samples from 'songcheat-samples'\n\n// create audio context\nlet audioCtx = new (window.AudioContext || window.webkitAudioContext || window.audioContext)()\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// https://github.com/rollup/rollup/issues/1803/\n// import { VexTab, Artist, Vex } from 'vextab'\nlet VexTab = window.VexTab\nlet Artist = window.Artist\nlet Vex = window.Vex\n\nlet DEBUG = 0\nlet localStorage = window.localStorage\nlet compiler = null\n\nArtist.NOLOGO = true\n\nfunction addEvent (elem, event, fn) {\n  if (elem.addEventListener) return elem.addEventListener(event, fn, false)\n  elem.attachEvent('on' + event, function () { return (fn.call(elem, window.event)) })\n}\n\nfunction onChange (elem, fn, data) {\n  var priorValue = elem.value\n\n  function checkNotify (e, delay) {\n    // notify if actually changed\n    if (elem.value !== priorValue) {\n      priorValue = elem.value\n      fn.call(this, e, data)\n    } else {\n      // the actual data change happens after some events so we queue a check\n      if (delay) setTimeout(function () { checkNotify(e, false) }, 0)\n    }\n  }\n\n  var events = ['keyup', false, 'blur', false, /* \"focus\", false, */ 'drop', true, 'change', false, 'input', false, 'paste', true, 'cut', true, 'copy', true]\n  for (let i = 0; i < events.length; i += 2) addEvent(elem, events[i], function (e) { checkNotify.call(this, e, events[i + 1]) })\n}\n\nfunction go (song, songcheat) {\n  let data = { 'song': song, 'debug': DEBUG }\n  for (let p of ['mode', 'lyricsMode', 'showUnit', 'maxsp', 'barsPerLine', 'splitUnits', 'splitParts', 'partdisplay']) data[p] = songcheat[p]\n  window.location.href = 'index.html?' + Utils.encodeQueryData(data)\n}\n\nfunction songcheat (songcheat, $divScore, $divChords, $divParts, $divStructure, $divLyrics, $divRhythms, scoreWidth, chordWidth, rhythmsWidth) {\n  var get = new window.URLSearchParams(window.location.search)\n  DEBUG = parseInt(get.get('debug'), 10) || DEBUG // debug level\n\n  scoreWidth = scoreWidth || 800\n  chordWidth = chordWidth || 250\n\n  let canvas = $divScore[0]\n  canvas.getContext('2d')\n\n  // default values for mode, bars per line and scale\n  songcheat.scale = songcheat.scale || 0.92\n  songcheat.mode = songcheat.mode || 'rt'\n  songcheat.lyricsMode = songcheat.lyricsMode || 's'\n  songcheat.showUnit = songcheat.showUnit || '*'\n  songcheat.barsPerLine = songcheat.barsPerLine || 4\n  songcheat.maxsp = typeof songcheat.maxsp === 'undefined' ? 1 : songcheat.maxsp\n  songcheat.splitUnits = typeof songcheat.splitUnits === 'undefined' ? 0 : songcheat.splitUnits\n  songcheat.splitParts = typeof songcheat.splitParts === 'undefined' ? 4 : songcheat.splitParts\n  songcheat.partdisplay = songcheat.partdisplay || 'compact'\n\n  // settings that may be forced in GET\n  songcheat.mode = get.get('mode') || songcheat.mode\n  songcheat.lyricsMode = get.get('lyricsMode') || songcheat.lyricsMode\n  songcheat.showUnit = get.get('showUnit') || songcheat.showUnit\n  songcheat.barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : songcheat.barsPerLine\n  songcheat.maxsp = get.get('maxsp') ? parseInt(get.get('maxsp'), 10) : songcheat.maxsp\n  songcheat.splitUnits = get.get('splitUnits') ? parseInt(get.get('splitUnits'), 10) : songcheat.splitUnits\n  songcheat.splitParts = get.get('splitParts') ? parseInt(get.get('splitParts'), 10) : songcheat.splitParts\n  songcheat.partdisplay = get.get('partdisplay') || songcheat.partdisplay\n\n  // ensure showUnit is within the bounds\n  songcheat.showUnitIndex = songcheat.showUnit === '*' ? null : Math.min(songcheat.structure.length - 1, parseInt(songcheat.showUnit, 10))\n  if (songcheat.showUnitIndex < 0) songcheat.showUnitIndex = null\n  songcheat.showUnit = songcheat.showUnitIndex !== null ? songcheat.showUnitIndex : '*'\n\n  // compile\n  try {\n    compiler = new Compiler(songcheat, DEBUG)\n    songcheat = compiler.scc\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n    return false\n  }\n\n  // links to other songs\n  $('a[rel]').click(function () {\n    go(parseInt($(this).attr('rel'), 10) + 1, songcheat)\n  })\n\n  // build unit select\n  let unitIndex = 0\n  for (let unit of songcheat.structure) $('select[name=showUnit]').append($('<option>').val(unitIndex++).text(unit.name))\n\n  // for each user controlled setting\n  $('select').each(function () {\n    // initialize\n    $(this).val(songcheat[$(this).attr('name')])\n\n    // reload on change\n    $(this).change(function () {\n      songcheat[$(this).attr('name')] = $(this).val()\n      go(window.scIndex + 1, songcheat)\n    })\n  })\n\n  // shuffle\n  if (songcheat.signature.shuffle) {\n    $('#left h3:first').append($('<span>').html('<br/>Shuffle ' + (songcheat.signature.shuffle === ':4' ? 'quarter notes' : songcheat.signature.shuffle.substr(1) + 'th notes')))\n  }\n\n  // shuffle 8th image\n  if (songcheat.signature.shuffle === ':8') {\n    $('#left h3:first').append($('<img>').css({ 'padding-left': '50px', 'width': '100px', 'display': 'inline', 'vertical-align': 'bottom' }).attr('src', 'img/shuffle_8th.svg'))\n  }\n\n  // chord diagrams\n  for (let chord of songcheat.chords) {\n    var url = DEBUG ? 'img/missing_diagram.png' : ChordPix.url(chord, chordWidth)\n    let $cDiv = $('<div>').css({ 'display': 'inline-block', 'vertical-align': 'top' })\n    $divChords.append($cDiv)\n    $cDiv.append($('<img>').attr('src', url).attr('title', chord.comment).css({ 'display': 'block' /* removes whitespace below image */, 'width': chordWidth + 'px' }))\n    $cDiv.append($('<p>').css({ 'width': chordWidth + 'px', 'font-size': '0.85em', 'text-align': 'center', 'margin-top': '0px' }).html(chord.comment))\n  }\n\n  //  ascii parts\n  for (let part of songcheat.parts) {\n    let $divPart = $('<div>').css({ 'color': part.color })\n    let $partsZone = $('<p>')\n    $divPart.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '0px' }).html(part.name))\n    $divPart.append($partsZone)\n    $divParts.append($divPart)\n    displayParts(songcheat, part, $partsZone)\n  }\n\n  //  ascii structure\n  for (let unit of songcheat.structure) {\n    $divStructure.append($('<p>').css({ 'font-weight': 'bold', 'margin': '5px 0px', 'color': unit.part.color }).html('[' + unit.name + ']'))\n  }\n\n  //  ascii lyrics\n  for (let unit of songcheat.structure) {\n    // load from local storage\n    let lskey = 'SongCheatLyrics.' + songcheat.id + '.unit.' + unit.name\n    unit.lyrics = localStorage.getItem(lskey) || unit.lyrics\n\n    // view zone\n    let $divUnit = $('<div>').css({ 'color': unit.part.color })\n    let $editLink = $('<a>').html('Edit').css('text-decoration', 'underline').css('cursor', 'pointer').css('font-size', '0.75em').css('float', 'right').css('margin-right', '10px')\n    let $lyricsZone = $('<p>').css('line-height', '150%')\n    $divUnit.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '2px', 'margin-top': '35px' }).html('[' + unit.name + '] ').append($editLink))\n    $divUnit.append($lyricsZone)\n    $divLyrics.append($divUnit)\n    displayLyrics(songcheat, unit, $lyricsZone)\n\n    // hidden edit zone\n    let $divUnitEdit = $('<div>')\n    let $closeLink = $('<a>').html('Close').css('text-decoration', 'underline').css('cursor', 'pointer')\n    $divUnitEdit.append($('<textarea>').css('font-size', '1em').css('width', '400px').css('height', '200px'))\n    $divUnitEdit.append('<br/>').append($closeLink)\n    $divLyrics.append($divUnitEdit.hide())\n\n    // save lyrics and update ui\n    let saveAndUpdate = function (updateVextab) {\n      // save to local storage\n      unit.lyrics = $(this).val()\n      localStorage.setItem(lskey, unit.lyrics)\n\n      // re-display ascii\n      displayLyrics(songcheat, unit, $lyricsZone)\n\n      if (updateVextab) {\n        // recreate canvas\n        let $canvas = $('<canvas>')\n        $(canvas).after($canvas).remove()\n        canvas = $canvas[0]\n\n        // reload vextab score\n        let renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS)\n        let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n        let vextab = new VexTab(artist)\n        console.info('Parsing score...')\n        vextab.parse(SongcheatVexTab.Songcheat2VexTab(songcheat))\n        console.info('Rendering score...')\n        artist.render(renderer)\n        console.info('Score done!')\n      }\n    }\n\n    // edit action\n    $editLink.on('click', function () {\n      $divUnit.find('p:last') // .hide();\n      $divUnitEdit.show().find('textarea').val(unit.lyrics).focus()\n    })\n\n    // close action\n    $closeLink.on('click', function () {\n      $divUnitEdit.hide()\n      saveAndUpdate.call($divUnitEdit.find('textarea')[0], true)\n    })\n\n    // auto-save\n    onChange($divUnitEdit.find('textarea')[0], function (e) {\n      console.log('Auto saving on event ' + e.type)\n      saveAndUpdate.call(this, true)\n    })\n  }\n\n  // parse and render rhythms with vextab\n  for (let rhythm of songcheat.rhythms) {\n    let $divRhythm = $('<div>')\n    $divRhythms.append($divRhythm)\n\n    // player controls\n    $divRhythm.before(new PlayerUI(audioCtx, songcheat, rhythm.compiledScore, true).div())\n\n    // warning if not a whole number of bars\n    if (rhythm.duration % songcheat.barDuration) {\n      let warning = 'Rhythm ' + rhythm.id + ' is currently equivalent to ' + Math.floor(rhythm.duration / songcheat.barDuration) + ' bar(s) and ' + Utils.durationcodes(rhythm.duration % songcheat.barDuration) + '. A rhythm unit should be equivalent to a whole number of bars.'\n      $divRhythm.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n    }\n\n    try {\n      console.info('Converting rhythm to vextab score...')\n      let score = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=false tab-stem-direction=up\\n'\n      score += SongcheatVexTab.Notes2Stave(songcheat, 0, rhythm.compiledScore, true, 'top', 'Rhythm ' + (rhythm.name || rhythm.id), 1, true, false) + ' options space=20'\n      console.info('Parsing score...')\n      let artist = new Artist(10, 10, rhythmsWidth, { scale: 1.0 })\n      let vextab = new VexTab(artist)\n      vextab.parse(score)\n      console.info('Rendering score...')\n      artist.render(new Vex.Flow.Renderer($divRhythm[0], Vex.Flow.Renderer.Backends.SVG))\n      console.info('Score done!')\n    } catch (e) {\n      $divRhythm.html(e.message).css('color', 'red')\n      console.error(e)\n    }\n  }\n\n    // player controls\n  $(canvas).before(new PlayerUI(audioCtx, songcheat).div())\n\n    // parse and render full song score with vextab\n  try {\n    console.info('Converting songcheat to vextab score...')\n    let score = SongcheatVexTab.Songcheat2VexTab(songcheat)\n    console.info('Parsing score...')\n    let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n    let vextab = new VexTab(artist)\n    vextab.parse(score)\n    console.info('Rendering score...')\n    artist.render(new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS))\n    console.info('Score done!')\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n  }\n}\n\nfunction displayParts (songcheat, part, $partsZone) {\n  // clear eveyrthing\n  $partsZone.parent().find('p.warning,p.error').remove()\n  $partsZone.html('')\n\n  try {\n    // if compact part display enabled, set maxsp = 1\n    // if full part display enabled, force maxsp = 0: we want the exact position of chords\n    // always split by N bars (no lyrics so split as entered makes no sense, splitParts is never 0)\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $partsZone.append(compiler.getPartText(part, songcheat.partdisplay === 'compact' ? 1 : 0, songcheat.splitParts, 'rhythm', false))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $partsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nfunction displayLyrics (songcheat, unit, $lyricsZone) {\n  // clear eveyrthing\n  $lyricsZone.parent().find('p.warning,p.error').remove()\n  $lyricsZone.html('')\n\n  try {\n    // parse lyrics\n    let warnings = compiler.parseLyrics(unit)\n\n    // display parser warnings\n    for (let warning of warnings) {\n      $lyricsZone.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n      console.warn('[' + unit.name + '] ' + warning)\n    }\n\n    // build and display lyrics\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $lyricsZone.append(compiler.getUnitText(unit, songcheat.maxsp, songcheat.splitUnits, 'rhythm', songcheat.maxsp !== 1))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $lyricsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nvar get = new window.URLSearchParams(window.location.search)\nlet scIndex = window.scIndex = (parseInt(get.get('song'), 10) || 1) - 1\nlet sc = samples[scIndex]\nsc.id = scIndex + 1 // simulate a mongodb id for saving lyrics\n\ndocument.title = sc.title + ' | ' + document.title\n$('#left h1').html(sc.title)\n$('#left h2').html(sc.artist + ', ' + sc.year)\n$('#left h3.tempo').html('Tempo: ' + sc.signature.tempo + ' bpm')\n$('#left p').html(sc.comment)\n\n$('#left h3.capo').html('Capo: ' + (sc.capo > 0 ? sc.capo : 'n/a'))\n$('#left h3.tuning').html('Tuning: ' + sc.tuning)\n\n$('#middle h4, #right h4').css('text-decoration', 'underline').css('font-size', '1.1em').css('margin', '0.5em 0em')\n\nlet barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : (sc.barsPerLine || 4)\nlet naturalSize = $(window).width() * 0.45\nlet absMinSize = 640\nlet minSize = Math.max(barsPerLine * 300, absMinSize)\nlet maxSize = Math.max(barsPerLine * 450, absMinSize)\nvar scoreWidth = Math.min(maxSize, Math.max(minSize, naturalSize))\nvar rhythmWidth = Math.min(750, Math.max(400, $(window).width() * 0.24))\n$('#right').css('width', scoreWidth + 'px')\n\nvar _scIndex = 0\nfor (var sc_ of samples) {\n  /* if (_scIndex != scIndex) */\n  $('#links').append($(\"<a style='font-size: 0.9em; color: black; cursor: pointer; text-decoration:underline'>\").attr('rel', _scIndex).html(sc_.title + ' (' + sc_.artist + ', ' + sc_.year + ')')).append('<br/>')\n  _scIndex++\n}\n\nsongcheat(sc, $('#score'), $('#chords'), $('#parts'), $('#structure'), $('#lyrics'), $('#rhythms'), scoreWidth, 175, rhythmWidth)\n$('body').show()\n","/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nexport { Utils, Parser, ParserException, Compiler, CompilerException };\n//# sourceMappingURL=songcheat-core.esm.js.map\n","/**\n * SongCheat ChordPix 1.0.0 built on Tue Dec 26 2017 01:29:00 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-chordpix\n */\n\n/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nvar classCallCheck$1 = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray$1 = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar ChordPixException = function () {\n  function ChordPixException(message) {\n    classCallCheck$1(this, ChordPixException);\n\n    this.message = message;\n  }\n\n  createClass$1(ChordPixException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Chordpix error: ' + this.message;\n    }\n  }]);\n  return ChordPixException;\n}();\n\nvar ChordPix = function () {\n  function ChordPix() {\n    classCallCheck$1(this, ChordPix);\n  }\n\n  createClass$1(ChordPix, null, [{\n    key: 'parse',\n    value: function parse(url) {\n      try {\n        // validate and explode url at slashes\n        if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL');\n        var parts = url.split(/\\//);\n\n        // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n        var name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b');\n\n        // get starting fret\n        var startingFret = parseInt(parts[7], 10);\n\n        // get absolute barred fret (single char) (\"-\" kept as is)\n        var barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret);\n\n        // build an absolute tablature (single char x6) (\"x\" kept as is)\n        var tablature = '';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = parts[8][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var char = _step.value;\n            tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return {\n          name: name,\n          tablature: tablature,\n          fingering: parts[9] + '/' + barredFret,\n          comment: ''\n        };\n      } catch (e) {\n        throw new ChordPixException('[URL ' + url + '] ' + e.message);\n      }\n    }\n  }, {\n    key: 'url',\n    value: function url(chord, chordWidth) {\n      try {\n        // check tablature is valid\n        if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string');\n        if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)');\n        if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)');\n\n        // check fingering is valid\n        if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string');\n        if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)');\n        if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)');\n        if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret');\n\n        // convert 6 chars into 6 integers (null for x)\n        var frets = [];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = chord.tablature[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var char = _step2.value;\n            frets.push(char === 'x' ? null : Utils.char2fret(char));\n          } // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var minFret = frets.filter(function (x) {\n          return x;\n        }).length > 0 ? Math.min.apply(Math, toConsumableArray$1(frets.filter(function (x) {\n          return x;\n        }))) : 1;\n        var maxFret = frets.filter(function (x) {\n          return x;\n        }).length > 0 ? Math.max.apply(Math, toConsumableArray$1(frets.filter(function (x) {\n          return x;\n        }))) : 1;\n\n        // get number of frets to display on diagram (with minimum of 4)\n        var nbFrets = Math.max(4, maxFret + 1 - minFret);\n\n        // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n        var startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret;\n\n        // get relative barred fret (\"-\" kept as is)\n        var fingering = chord.fingering.split('/');\n        if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret);\n\n        // build a relative tablature (\"0\" and \"x\" kept as is)\n        var relTablature = '';\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = chord.tablature[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _char = _step3.value;\n            relTablature += _char === 'x' || _char === '0' ? _char : Utils.abs2rel(_char, startingFret);\n          } // use nice ♯ and ♭ in diagram (replace only last occurence)\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature;\n\n        // build final url\n        return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png';\n      } catch (e) {\n        throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message);\n      }\n    }\n  }]);\n  return ChordPix;\n}();\n\nexport { ChordPix, ChordPixException };\n//# sourceMappingURL=songcheat-chordpix.esm.js.map\n","/**\n * SongCheat VexTab 1.0.0 built on Tue Dec 26 2017 01:31:53 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-vextab\n */\n\n/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nvar classCallCheck$1 = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar DEBUG = 0;\n\nvar VexTabException = function () {\n  function VexTabException(message) {\n    classCallCheck$1(this, VexTabException);\n\n    this.message = message;\n  }\n\n  createClass$1(VexTabException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'VexTab error: ' + this.message;\n    }\n  }]);\n  return VexTabException;\n}();\n\nvar VexTab = function () {\n  function VexTab() {\n    classCallCheck$1(this, VexTab);\n  }\n\n  createClass$1(VexTab, null, [{\n    key: 'Chord2VexTab',\n\n    // build VexTab chord notation\n    value: function Chord2VexTab(chord, strings, transpose) {\n      var vextabchord = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Utils.chordStrings(chord, strings)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var o = _step.value;\n\n          vextabchord.push((o.mute ? 'X' : transpose + o.fret) + '/' + o.string);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return '(' + vextabchord.join('.') + ')';\n    }\n  }, {\n    key: 'Note2VexTab',\n    value: function Note2VexTab(note, strokes, accents) {\n      var vextab = '';\n\n      // rest with given duration\n      if (note.rest) vextab += Utils.durationcode(note.duration) + '#5#';else {\n        // note duration, slashed if no chord given\n        vextab += note.chord ? Utils.durationcode(note.duration) : Utils.durationcode(note.duration).replace(/(:(?:w|h|q|8|16|32))(d?)/g, '$1S$2');\n\n        // if tied note\n        if (note.tied) vextab += 'T';\n\n        // chord or dummy note (for slash notation)\n        vextab += !note.chord ? '(4/3)' : VexTab.Chord2VexTab(note.chord, note.strings, 0); // do not transpose with capo: chords are tabbed exactly as their diagrm says (author chooses to use capo'd chords or not)\n\n        // stroke flag d or u (dd and uu are not built-in in vextab and are handled later through text2VexTab)\n        if (strokes && note.flags.stroke && note.flags.stroke.length === 1) vextab += note.flags.stroke;\n\n        // accent (put on top)\n        if (accents && note.flags.accent) vextab += '$.a>/' + accents + '.$';\n      }\n\n      return vextab;\n    }\n  }, {\n    key: 'Notes2Stave',\n    value: function Notes2Stave(songcheat, offset, notes, strokes, accents, subtitle, hs, notation, tablature) {\n      var vextab = '';\n      var barDuration = songcheat.barDuration;\n\n      console.log('Drawing ' + (notation ? 'notation ' : '') + (tablature ? 'tablature ' : '') + 'stave with ' + notes.length + ' notes');\n\n      // start new stave with signature\n      vextab += '\\ntabstave notation=' + (notation ? 'true' : 'false') + ' tablature=' + (tablature ? 'true' : 'false') + '\\n';\n      vextab += 'tuning=' + songcheat.tuning + ' key=' + songcheat.signature.key + ' time=' + songcheat.signature.time.symbol + '\\n';\n\n      // add subtitle if first bar\n      if (subtitle && offset === 0) vextab += 'text .' + hs + ',.font=Arial-10-bold,[' + subtitle + ']\\n';\n\n      vextab += 'notes ';\n\n      // initial bar line if needed (double if first bar)\n      if (offset % barDuration === 0) vextab += offset === 0 ? '=||' : '|';\n\n      // add each note, followed by a bar or phrase sign if needed\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = notes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var note = _step2.value;\n\n          vextab += VexTab.Note2VexTab(note, strokes, accents);\n          offset += note.duration;\n          if (note.lastInPhrase && offset % barDuration !== 0) console.warn('Phrase matches no bar (' + Utils.durationcodes(barDuration - offset % barDuration) + ' away)');\n          if (offset % barDuration === 0) vextab += note.lastInPhrase ? '=||' : '|';\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return vextab + '\\n';\n    }\n  }, {\n    key: 'Text2VexTab',\n    value: function Text2VexTab(textGroups, barDuration, offset, staveDuration, h, font) {\n      var text = '';\n\n      // for groups that start within our range\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = textGroups[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var group = _step3.value;\n\n          if (group.offset >= offset + staveDuration) break;\n          if (group.offset >= offset) {\n            var line = 'text ++,.' + h + ',.font=' + font;\n\n            // initial bar line if needed\n            if (offset % barDuration === 0) line += ',|';\n\n            // add empty text groups to fill the gap between start of stave and start of group\n            var gap = group.offset - offset;\n            while (gap > 0) {\n              // gap duration may never be more than what's left until end of bar\n              var d = Math.min(gap, barDuration - offset % barDuration);\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = Utils.durationcodes(d)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var code = _step4.value;\n                  line += ',' + code + ', ';\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              if ((offset + d) % barDuration === 0) line += ',|';\n\n              // continue with remaining gap\n              gap -= d;\n            }\n\n            // add actual text group on all available duration until end of stave (or more precisely the largest duration code which is <= available duration)\n            var available = offset + staveDuration - group.offset;\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = Utils.durationcodes(available)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var _code = _step5.value;\n                line += ',' + _code + ',' + (group.text.replace(/\\n/g, '') || ' ');break;\n              }\n\n              // remove trailing spaces and comma: vextab does not allow to finish on an empty word group\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            text += line.replace(/[ ,]+$/, '') + '\\n';\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return text;\n    }\n  }, {\n    key: 'Songcheat2VexTab',\n    value: function Songcheat2VexTab(songcheat) {\n      var vextab = '';\n      var unitIndex = 0;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.structure[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var unit = _step6.value;\n\n          if (songcheat.showUnitIndex === null || songcheat.showUnitIndex === unitIndex) vextab += VexTab.Unit2VexTab(songcheat, unit, unitIndex) + '\\n';\n          unitIndex++;\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return vextab;\n    }\n  }, {\n    key: 'Unit2VexTab',\n    value: function Unit2VexTab(songcheat, unit, unitIndex) {\n      var stems = songcheat.mode.indexOf('s') >= 0;\n      var showLyrics = songcheat.lyricsMode === 's';\n      var barDuration = songcheat.barDuration;\n\n      var vextab = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=' + (stems ? 'true' : 'false') + ' tab-stem-direction=up\\n';\n      unitIndex = unitIndex || 0;\n\n      var staveDuration = 0;\n      var notes = [];\n      var notesSlashed = [];\n\n      console.log('VexTabbing unit ' + (unitIndex + 1) + ' \"' + unit.name + '\"');\n\n      // space before first unit and between units\n      vextab += 'options space=' + (unitIndex > 0 && songcheat.showUnitIndex === null ? 50 : 20) + '\\n';\n\n      // get lyrics word groups\n      var lyricsGroups = [];\n      if (unit.groups) {\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = unit.groups[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var group = _step7.value;\n            lyricsGroups.push({ offset: group.offset, text: group.text + (DEBUG ? '/' + group.duration : '') });\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      } // get rhythm wise chord changes (same as ascii lyrics)\n      var offset = 0;\n      var chordGroups = [];\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = unit.part.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var phrase = _step8.value;\n          var _iteratorNormalCompletion12 = true;\n          var _didIteratorError12 = false;\n          var _iteratorError12 = undefined;\n\n          try {\n            for (var _iterator12 = phrase.bars[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n              var bar = _step12.value;\n              var _iteratorNormalCompletion13 = true;\n              var _didIteratorError13 = false;\n              var _iteratorError13 = undefined;\n\n              try {\n                for (var _iterator13 = bar.chordChanges['rhythm'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                  var chordChange = _step13.value;\n\n                  chordGroups.push({ offset: offset, text: chordChange.chord.name + (DEBUG ? '/' + chordChange.duration : '') });\n                  offset += chordChange.duration;\n                }\n              } catch (err) {\n                _didIteratorError13 = true;\n                _iteratorError13 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                    _iterator13.return();\n                  }\n                } finally {\n                  if (_didIteratorError13) {\n                    throw _iteratorError13;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError12 = true;\n            _iteratorError12 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                _iterator12.return();\n              }\n            } finally {\n              if (_didIteratorError12) {\n                throw _iteratorError12;\n              }\n            }\n          }\n        }\n\n        // get PIMA and dd/uu word groups\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      offset = 0;\n      var fingeringGroups = [];\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = unit.part.phrases[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var _phrase = _step9.value;\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n\n          try {\n            for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var _bar = _step14.value;\n              var _iteratorNormalCompletion15 = true;\n              var _didIteratorError15 = false;\n              var _iteratorError15 = undefined;\n\n              try {\n                for (var _iterator15 = _bar.rhythm.compiledScore[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                  var note = _step15.value;\n\n                  if (note.flags.fingering) fingeringGroups.push({ offset: offset, text: note.flags.fingering.toLowerCase() });else if (note.flags.stroke && note.flags.stroke.length === 2) fingeringGroups.push({ offset: offset, text: note.flags.stroke === 'dd' ? '⤋' : '⤊' });\n                  offset += note.duration;\n                }\n              } catch (err) {\n                _didIteratorError15 = true;\n                _iteratorError15 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                    _iterator15.return();\n                  }\n                } finally {\n                  if (_didIteratorError15) {\n                    throw _iteratorError15;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n        }\n\n        // get PM word groups\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      offset = 0;\n      var pmGroups = [];\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = unit.part.phrases[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var _phrase2 = _step10.value;\n          var _iteratorNormalCompletion16 = true;\n          var _didIteratorError16 = false;\n          var _iteratorError16 = undefined;\n\n          try {\n            for (var _iterator16 = _phrase2.bars[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n              var _bar2 = _step16.value;\n              var _iteratorNormalCompletion17 = true;\n              var _didIteratorError17 = false;\n              var _iteratorError17 = undefined;\n\n              try {\n                for (var _iterator17 = _bar2.rhythm.compiledScore[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                  var _note = _step17.value;\n\n                  if (_note.flags.pm) pmGroups.push({ offset: offset, text: 'PM' });\n                  offset += _note.duration;\n                }\n              } catch (err) {\n                _didIteratorError17 = true;\n                _iteratorError17 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                    _iterator17.return();\n                  }\n                } finally {\n                  if (_didIteratorError17) {\n                    throw _iteratorError17;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError16 = true;\n            _iteratorError16 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                _iterator16.return();\n              }\n            } finally {\n              if (_didIteratorError16) {\n                throw _iteratorError16;\n              }\n            }\n          }\n        }\n\n        // for each phrase in unit\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      offset = 0;\n      var phraseIndex = 0;\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = unit.part.phrases[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var _phrase3 = _step11.value;\n\n          console.log('\\tphrase ' + (phraseIndex + 1));\n          var lastPhraseInPart = phraseIndex === unit.part.phrases.length - 1;\n\n          // for each bar in phrase\n          var barIndex = 0;\n          var _iteratorNormalCompletion18 = true;\n          var _didIteratorError18 = false;\n          var _iteratorError18 = undefined;\n\n          try {\n            for (var _iterator18 = _phrase3.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n              var _bar3 = _step18.value;\n\n              console.log('\\t\\tbar ' + (barIndex + 1));\n              var lastBarInPhrase = barIndex === _phrase3.bars.length - 1;\n\n              // for each note in rhythm\n              var noteIndex = 0;\n              var _iteratorNormalCompletion19 = true;\n              var _didIteratorError19 = false;\n              var _iteratorError19 = undefined;\n\n              try {\n                for (var _iterator19 = _bar3.rhythm.compiledScore[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                  var _note2 = _step19.value;\n\n                  // note with no chord set (slash)\n                  var phraseNote = JSON.parse(JSON.stringify(_note2));\n                  phraseNote.lastInPhrase = lastBarInPhrase && noteIndex === _bar3.rhythm.compiledScore.length - 1;\n                  notesSlashed.push(phraseNote);\n\n                  // register note with corresponding chord\n                  var chordedPhraseNote = JSON.parse(JSON.stringify(phraseNote));\n                  chordedPhraseNote.chord = _bar3.chords[_note2.placeholderIndex];\n                  if (!chordedPhraseNote.chord) throw new VexTabException('No chord found for placeholder ' + (_note2.placeholderIndex + 1));\n                  notes.push(chordedPhraseNote);\n\n                  // draw staves when we have completed barsPerLine bars or if the part is done\n                  staveDuration += _note2.duration;\n                  var partDone = lastPhraseInPart && phraseNote.lastInPhrase;\n                  if (staveDuration >= songcheat.barsPerLine * barDuration || partDone) {\n                    console.log((partDone ? 'EOP' : 'EOL') + ' @ ' + staveDuration + ' units: drawing ' + notes.length + ' notes stave' + (songcheat.mode.length > 1 ? 's' : ''));\n\n                    // notation: shows unit.name, chords, accents, stems (slashes) and lyrics\n                    // if tablature is not displayed, it also shows strokes/fingering\n                    // it never shows PM and frets\n                    if (songcheat.mode.indexOf('r') >= 0) {\n                      var strokes = songcheat.mode.indexOf('t') < 0;\n                      vextab += VexTab.Notes2Stave(songcheat, offset, notesSlashed, strokes, 'top', unit.name, -1, true, false);\n                      if (strokes && fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 11, 'Arial-9-normal'); // PIMA on same line as strokes\n                      if (showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, strokes ? 13 : 11, 'Times-11-italic');\n                      if (chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, 2, 'Arial-10-normal');\n                      vextab += 'options space=' + (strokes ? 40 : 20) + '\\n';\n                    }\n\n                    // tablature: shows PM, frets and strokes/fingering\n                    // if notation is not displayed, it also shows unit.name, chords, lyrics and stems (if mode \"ts\")\n                    // it never shows accents\n                    if (songcheat.mode.indexOf('t') >= 0) {\n                      if (stems) vextab += 'options space=' + 30 + '\\n';\n                      vextab += VexTab.Notes2Stave(songcheat, offset, notes, true, false, songcheat.mode.indexOf('r') < 0 ? unit.name : false, stems ? -3 : -1, false, true);\n                      if (fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal'); // PIMA on same line as strokes\n                      if (pmGroups.length > 0) vextab += VexTab.Text2VexTab(pmGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal'); // PM on same line as strokes\n                      if (songcheat.mode.indexOf('r') < 0 && showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, 12, 'Times-11-italic');\n                      if (songcheat.mode.indexOf('r') < 0 && chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, stems ? -1 : 1, 'Arial-10-normal');\n                      vextab += 'options space=' + (songcheat.mode.indexOf('r') ? 30 : 10) + '\\n';\n                    }\n\n                    // space after staves\n                    vextab += 'options space=' + 10 + '\\n';\n\n                    // increment offset\n                    offset += staveDuration;\n\n                    // clear workspace\n                    notes = [];\n                    notesSlashed = [];\n                    staveDuration = 0;\n                  }\n\n                  // next note in rhythm\n                  noteIndex++;\n                }\n\n                // next bar in phrase\n              } catch (err) {\n                _didIteratorError19 = true;\n                _iteratorError19 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                    _iterator19.return();\n                  }\n                } finally {\n                  if (_didIteratorError19) {\n                    throw _iteratorError19;\n                  }\n                }\n              }\n\n              barIndex++;\n            }\n\n            // next phrase in part\n          } catch (err) {\n            _didIteratorError18 = true;\n            _iteratorError18 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                _iterator18.return();\n              }\n            } finally {\n              if (_didIteratorError18) {\n                throw _iteratorError18;\n              }\n            }\n          }\n\n          phraseIndex++;\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      return vextab;\n    }\n  }]);\n  return VexTab;\n}();\n\nexport { VexTab, VexTabException };\n//# sourceMappingURL=songcheat-vextab.esm.js.map\n","module.exports = {\n  \"Bass\": require(\"./Bass.json\"),\n  \"BassAmp360\": require(\"./BassAmp360.json\"),\n  \"BassFuzz\": require(\"./BassFuzz.json\"),\n  \"BassFuzz2\": require(\"./BassFuzz2.json\"),\n  \"BassSubDub\": require(\"./BassSubDub.json\"),\n  \"BassSubDub2\": require(\"./BassSubDub2.json\"),\n  \"Brass\": require(\"./Brass.json\"),\n  \"BritBlues\": require(\"./BritBlues.json\"),\n  \"BritBluesDriven\": require(\"./BritBluesDriven.json\"),\n  \"Buzzy1\": require(\"./Buzzy1.json\"),\n  \"Buzzy2\": require(\"./Buzzy2.json\"),\n  \"Celeste\": require(\"./Celeste.json\"),\n  \"ChorusStrings\": require(\"./ChorusStrings.json\"),\n  \"Dissonant1\": require(\"./Dissonant1.json\"),\n  \"Dissonant2\": require(\"./Dissonant2.json\"),\n  \"DissonantPiano\": require(\"./DissonantPiano.json\"),\n  \"DroppedSaw\": require(\"./DroppedSaw.json\"),\n  \"DroppedSquare\": require(\"./DroppedSquare.json\"),\n  \"DynaEPBright\": require(\"./DynaEPBright.json\"),\n  \"DynaEPMed\": require(\"./DynaEPMed.json\"),\n  \"Ethnic33\": require(\"./Ethnic33.json\"),\n  \"Full1\": require(\"./Full1.json\"),\n  \"Full2\": require(\"./Full2.json\"),\n  \"GuitarFuzz\": require(\"./GuitarFuzz.json\"),\n  \"Harsh\": require(\"./Harsh.json\"),\n  \"MklHard\": require(\"./MklHard.json\"),\n  \"Noise\": require(\"./Noise.json\"),\n  \"Organ2\": require(\"./Organ2.json\"),\n  \"Organ3\": require(\"./Organ3.json\"),\n  \"PhonemeAh\": require(\"./PhonemeAh.json\"),\n  \"PhonemeBah\": require(\"./PhonemeBah.json\"),\n  \"PhonemeEe\": require(\"./PhonemeEe.json\"),\n  \"PhonemeO\": require(\"./PhonemeO.json\"),\n  \"PhonemeOoh\": require(\"./PhonemeOoh.json\"),\n  \"PhonemePopAhhhs\": require(\"./PhonemePopAhhhs.json\"),\n  \"Piano\": require(\"./Piano.json\"),\n  \"Pulse\": require(\"./Pulse.json\"),\n  \"PutneyWavering\": require(\"./PutneyWavering.json\"),\n  \"Saw\": require(\"./Saw.json\"),\n  \"Square\": require(\"./Square.json\"),\n  \"TB303Square\": require(\"./TB303Square.json\"),\n  \"Throaty\": require(\"./Throaty.json\"),\n  \"Triangle\": require(\"./Triangle.json\"),\n  \"Trombone\": require(\"./Trombone.json\"),\n  \"TwelveOpTines\": require(\"./TwelveOpTines.json\"),\n  \"TwelveStringGuitar1\": require(\"./TwelveStringGuitar1.json\"),\n  \"WarmSaw\": require(\"./WarmSaw.json\"),\n  \"WarmSquare\": require(\"./WarmSquare.json\"),\n  \"WarmTriangle\": require(\"./WarmTriangle.json\"),\n  \"Wurlitzer\": require(\"./Wurlitzer.json\"),\n  \"Wurlitzer2\": require(\"./Wurlitzer2.json\")\n}\n","import { Utils } from 'songcheat-core'\nimport waveTables from '@mohayonao/wave-tables'\n\nexport class Player {\n  constructor (audioCtx, notes, config) {\n    this.MODE_RHYTHM = 1 // play beeps only\n    this.MODE_BASS = 2 // when there is a strummed chord, play only bass (no effect onindividual strings)\n    this.MODE_CHORDS = 3 // play actual strummed chords\n\n    config = config || {}\n    config.signature = config.signature || {}\n    config.signature.time = config.signature.time || {}\n\n    // audio context\n    this.audioCtx = audioCtx\n\n    // notes to beep\n    this.notes = notes\n\n    // config: loop or not and callback at end if no loop\n    this.loop = config.loop || false\n    this.onDone = config.onDone || null\n    this.onCountdown = config.onCountdown || function () {}\n\n    // config: capo and signature (tempo, time, shuffle)\n    this.capo = config.capo || 0\n    this.tempo = config.signature.tempo || 100\n    this.beatsPerBar = config.signature.time.beatsPerBar || 4\n    this.beatDuration = config.signature.time.beatDuration || ':q'\n    this.shuffle = config.signature.shuffle ? Utils.duration(config.signature.shuffle) : false\n\n    // tuning, defaults to standard tuning\n    this.tuning = config.tuning || [329.63, // E4\n      246.94, // B3\n      196.00, // G3\n      146.83, // D3\n      110.00, // A2\n      82.41\n    ] // E2\n\n    // play control\n    this.stopped = true\n    this.paused = false\n\n    // initialize to defaults\n    this.speed(100)\n    this.setDisto(0)\n    this.setVolume(50)\n    this.setMode(this.MODE_CHORDS)\n    this.setType(config.type || 'Piano')\n  }\n\n  makeDistortionCurve (amount) {\n    let k = typeof amount === 'number' ? amount : 50\n    let nSamples = 44100\n    let curve = new Float32Array(nSamples)\n    let deg = Math.PI / 180\n    for (let i = 0; i < nSamples; ++i) {\n      let x = i * 2 / nSamples - 1\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x))\n    }\n    return curve\n  }\n\n  /**\n   * duration of the tone in milliseconds\n   * frequency of the tone in hertz\n   * volume of the tone between 0 and 1\n   * type of tone. Possible values are sine, square, sawtooth, triangle, and custom.\n   * callback to use on end of tone\n   */\n  sound (time, duration, frequency, volume, distortion, type, onended) {\n    let audioCtx = this.audioCtx\n    let gainNode = audioCtx.createGain()\n    gainNode.gain.value = volume\n\n    if (distortion) {\n      let distoNode = audioCtx.createWaveShaper()\n      distoNode.curve = this.makeDistortionCurve(parseInt(distortion, 10))\n      distoNode.oversample = '4x'\n      distoNode.connect(audioCtx.destination)\n      gainNode.connect(distoNode)\n    } else gainNode.connect(audioCtx.destination)\n\n    let oscillator = audioCtx.createOscillator()\n    oscillator.connect(gainNode)\n\n    oscillator.frequency.value = frequency\n    oscillator.onended = onended\n\n    // type can be a periodic wave or a standard oscillator type\n    if (waveTables[type]) oscillator.setPeriodicWave(audioCtx.createPeriodicWave(waveTables[type].real, waveTables[type].imag))\n    else oscillator.type = type\n\n    oscillator.start(time)\n    oscillator.stop(time + duration)\n  }\n\n  chord2frequencies (chord, strings, transpose) {\n    let freqs = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      if (!o.mute) freqs.push(this.tuning[o.string - 1] * Math.pow(Math.pow(2, 1 / 12), transpose + o.fret))\n    }\n    return freqs\n  }\n\n  ms_ (note) {\n    // base duration of note\n    let ms_ = note.duration * this.msPerUnit\n\n    // change duration proportions for shuffled notes\n    if (this.shuffle && note.duration === this.shuffle) {\n      if (note.offset % (2 * this.shuffle) === 0) ms_ *= 1.3333\n      else ms_ *= 0.6667\n    }\n\n    return ms_\n  }\n\n  note_ (time) {\n    let audioCtx = this.audioCtx\n    var self = this\n\n    // stop or pause requested\n    if (this.stopped || this.paused) {\n      this.donePlaying = true\n      return true\n    }\n\n    // get note to play\n    if (!this.notes) return false\n    let note = this.notes[this.noteIndex]\n    if (!note) return false\n\n    let isBar = note.offset === 0\n    let isBeat = note.offset % Utils.duration(this.beatDuration) === 0\n    let isUp = note.flags.stroke === 'u' || note.flags.stroke === 'uu'\n    let isDown = note.flags.stroke === 'd' || note.flags.stroke === 'dd'\n    let isArpeggiated = note.flags.stroke && note.flags.stroke.length === 2\n\n    // get number of ms that this note should last\n    let ms = note.tied ? 0 : this.ms_(note)\n\n    // consume next ties note(s) if any\n    for (let nextNoteIndex = this.noteIndex + 1; nextNoteIndex < this.notes.length && this.notes[nextNoteIndex].tied; nextNoteIndex++) ms += this.ms_(this.notes[nextNoteIndex])\n\n    // beep or chord volume\n    let volume = 0.25 * (this.volume / 100.0) // base gain from 0 to 1.5 according to user volume slider\n    if (note.flags.accent) volume *= 1.5 // increase gain by 50% if accent\n    if (note.rest) volume = 0 // silence if rest\n\n    // beep frequency\n    let freqs = [440 * 1.5]\n    if (isBar) freqs[0] *= 2 // octave\n    else if (isBeat) freqs[0] *= 1.5 // quinte\n\n    // get note chord, ignored in rhythm mode\n    let chord = this.mode === this.MODE_RHYTHM ? null : note.chord\n\n    // beep duration is 5 ms\n    // actual notes are played for the whole duration if tied otherwise for 90%\n    let beepduration = chord ? (note.tied ? ms : ms * 0.90) : Math.min(ms, 5)\n\n    // for rhythm type is always square and no distortion, for actual notes use the user-defined settings\n    let type = chord ? this.type : 'square'\n    let distortion = chord ? this.distortion : null\n\n    // played chord (for a rest, chord is set but strings is not)\n    if (chord && note.strings) {\n      // get frequencies for chord notes\n      freqs = this.chord2frequencies(chord, this.mode === this.MODE_BASS ? note.strings.replace(/\\*/g, 'B') : note.strings, this.capo)\n\n      // reverse string order if up stroke\n      if (isUp) freqs = freqs.reverse()\n\n      // adjust volume according to number of simultaneous notes\n      // volume = volume / (2.0 * Math.sqrt(freqs.length));\n      // UPDATE: no, bass among chords is otherwise louder than it should\n      // UPDATE: instead increase volume only if BASS ONLY mode\n      if (this.mode === this.MODE_BASS) volume *= 3\n    }\n\n    // set next note to play\n    this.noteIndex = (this.noteIndex + 1) % this.notes.length\n\n    // info message, scheduled to display at the same time as oscillator will play our sound\n    let what = note.rest ? 'REST' : (note.tied ? 'TIED' : (chord ? chord.name + '/' + freqs.length + ' ' + (isDown ? 'B' : '') + (isUp ? 'H' : '') : 'BEEP'))\n    let message = (isBar ? '\\n|\\t' : '\\t') + ('[' + what + ']').padEnd(10, ' ') + (note.offset + Utils.durationcode(note.duration)).padEnd(5, ' ') + ' ' + ms.toFixed(0) + ' ms [VOL ' + (volume * 100) + '] ' + (isBar ? ' [BAR]' : (isBeat ? ' [BEAT]' : '')) + (note.flags.accent ? ' [ACCENT]' : '')\n    setTimeout(function () { console.info(message) }, Math.max(0, time - audioCtx.currentTime) * 1000)\n\n    // jump to next note if tied\n    if (note.tied) {\n      self.note_(time)\n      return\n    }\n\n    // play beep (1 note) or chord (N notes)\n    let fIndex = 0\n    let delay = 0\n    for (let frequency of freqs) {\n      // handle next node when last note has done playing\n      this.sound(time + delay / 1000.0, (beepduration - delay) / 1000.0, frequency, volume, distortion, type, fIndex < freqs.length - 1 ? null : function () {\n        // back on first note: stop and callback if not loop\n        if (self.noteIndex === 0 && !self.loop) {\n          self.stop()\n          if (self.onDone) self.onDone()\n        } else self.note_(time + ms / 1000.0)\n      })\n\n      // simulate the fact that strings hit first will sound first (but they'll all stop at the same time, hence substrating delay from beepduration above)\n      // when a chord is arpeggiated, take 3/4 of available duration to hit strings the one after the other\n      delay += (isArpeggiated ? (beepduration * 0.75) / freqs.length : (note.tied ? 0 : 10))\n\n      // simulate the fact that first hit strings will sound louder\n      volume *= 0.95\n\n      fIndex++\n    }\n  }\n\n  stop () {\n    this.stopped = true\n    this.paused = false\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  pause () {\n    this.stopped = false\n    this.paused = true\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  play (countdown) {\n    let audioCtx = this.audioCtx\n    let self = this\n\n    if (!this.paused) this.noteIndex = 0\n    this.stopped = false\n    this.paused = false\n\n    this.onCountdown(countdown)\n    if (countdown) this.cd = setTimeout(function () { self.play(countdown - 1) }, 1000)\n    else {\n      // compute for each note the offset wrt the bar it's contained in\n      let offset = 0\n      for (let note of this.notes) {\n        note.offset = offset\n        offset = (offset + note.duration) % (this.beatsPerBar * Utils.duration(this.beatDuration))\n      }\n\n      this.note_(audioCtx.currentTime)\n    }\n  }\n\n  rewind () {\n    if (this.stopped) return\n\n    if (this.paused) {\n      this.noteIndex = 0\n      return\n    }\n\n    let self = this\n    this.donePlaying = false\n    this.stop()\n    let recfun = function () {\n      if (self.donePlaying) self.play()\n      else setTimeout(recfun, 100)\n    }\n    recfun()\n  }\n\n  getTempo () {\n    return (this.tempo * this.speedpct / 100.0).toFixed(0)\n  }\n\n  speed (pct) {\n    if (pct < 0) throw new Error('Invalid tempo percentage: ' + pct)\n\n    this.speedpct = pct\n\n    // compute ms per duration unit based on given tempo and beat duration\n    let msPerBeat = 60000 / (this.tempo * this.speedpct / 100.0) // ms/beat = ms/minute : beats/minute\n    this.msPerUnit = msPerBeat / Utils.duration(this.beatDuration) // ms/unit = ms/beat : units/beat\n    console.info('Player gone to ' + msPerBeat + ' ms / beat')\n  }\n\n  speedup (step) {\n    this.speed(Math.min(500, this.speedpct + step))\n  }\n\n  slowdown (step) {\n    this.speed(Math.max(20, this.speedpct - step))\n  }\n\n  setMode (mode) {\n    this.mode = parseInt(mode, 10)\n    console.info('Player gone to mode ' + mode)\n  }\n\n  setType (type) {\n    this.type = type\n    console.info('Player gone to type ' + type)\n  }\n\n  setDisto (d) {\n    this.distortion = parseInt(d, 10)\n    console.info('Player gone to disto ' + d)\n  }\n\n  setVolume (v) {\n    this.volume = parseInt(v, 10)\n    console.info('Player gone to volume ' + v)\n  }\n}\n"]}