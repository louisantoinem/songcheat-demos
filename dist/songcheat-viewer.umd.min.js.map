{"version":3,"sources":["../src/player_ui.js","../index.js","../../songcheat-core/src/utils.js","../../songcheat-core/src/compiler.js","../../songcheat-core/src/chordpix.js","../../songcheat-core/src/vextab.js","../../songcheat-core/node_modules/@mohayonao/wave-tables/index.js","../../songcheat-core/src/player.js"],"names":["PlayerUI","audioCtx","songcheat","notes","loop","self","this","unitIndex","unit","structure","showUnitIndex","phrase","part","phrases","bar","bars","note","rhythm","compiledScore","chordedNote","JSON","parse","stringify","chord","chords","placeholderIndex","length","Error","push","player","Player","capo","parseInt","signature","type","wave","onDone","$stopLink","trigger","onCountdown","c","$countdownZone","html","$div","$","css","margin-top","position","$speedMention","font-size","font-weight","padding-left","updateSpeed","getTempo","$tempoSlider","val","speedpct","color","text-shadow","top","right","$speed100Link","on","speed","$playLink","play","paused","find","show","hide","$rewindLink","rewind","$pauseLink","pause","stop","append","unique","Date","now","musicalSwitches","strings","$divMusicalSwitches","display","MODE_CHORDS","MODE_BASS","MODE_RHYTHM","change","setMode","$typeSwitch","attr","text","instrument","waveTables","setType","$distoSlider","distortion","setDisto","$volumeSlider","volume","setVolume","shuffle","Utils","duration","cursor","margin-right","addClass","addEvent","elem","event","fn","addEventListener","attachEvent","call","window","onChange","data","checkNotify","e","delay","value","priorValue","setTimeout","events","i","go","song","debug","DEBUG","p","location","href","encodeQueryData","displayLyrics","$lyricsZone","parent","remove","warnings","compiler","parseLyrics","warning","before","console","warn","name","getUnitText","maxsp","splitUnits","message","error","[object Object]","a","b","str","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","join","ret","d","encodeURIComponent","code","units","codes","current","rest","durationcode","fret","String","fromCharCode","charCodeAt","startingFret","char2fret","relFret","fret2char","tablature","fingering","result","string","indexOf","mute","MIN_LYRICS_BARLEN","LYRICS_SUM_DURATIONS","KEEP_EMPTY_LINES","CompilerException","Compiler_","log","apply","arguments","mode","lyricsMode","barsPerLine","key","time","beatDuration","beatsPerBar","symbol","lyricsUnit","rhythms","parts","barDuration","resolveIds","unitsByPart","numberByPart","id","colors","partIndex","compileRhythm","phraseIndex","chordChanges","lastChord","addChordChanges","barIndex","chordChangesMode","resolveId","Array","chordId","collection","initialNoteDuration","score","noteDuration","placeholdercount","lastToken","token","tied","flags","flagsString","stroke","accent","pm","flag","o","resetAtBars","offset","hidden","defaultCursorStep","lyrics","groups","registerGroup","missingDuration","Math","floor","durationcodes","group","groupLength","getGroupLength","plen","max","ceil","pmax","chordDuration","g","getChordDisplay","debugText","zeroDuration","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","needFinalSpace","maxLength","min","minLength","filler","groupText","chordInserts","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","chordChange","positionDelta","positionDelta_","chordInsert","skip","unitText_","chordText","inserted","interlace","step","addDuration","Compiler","compiler_","set","title","scc","compile","ChordPixException","ChordPix","url","barredFret","rel2abs","comment","chordWidth","frets","minFret","filter","x","maxFret","nbFrets","abs2rel","relTablature","VexTabException","VexTab","transpose","vextabchord","chordStrings","strokes","accents","vextab","Chord2VexTab","subtitle","hs","notation","tuning","Note2VexTab","lastInPhrase","textGroups","staveDuration","h","font","line","gap","available","Unit2VexTab","stems","showLyrics","tempo","notesSlashed","lyricsGroups","chordGroups","fingeringGroups","pmGroups","lastPhraseInPart","lastBarInPhrase","noteIndex","phraseNote","chordedPhraseNote","partDone","Notes2Stave","Text2VexTab","Bass","BassAmp360","BassFuzz","BassFuzz2","BassSubDub","BassSubDub2","Brass","BritBlues","BritBluesDriven","Buzzy1","Buzzy2","Celeste","ChorusStrings","Dissonant1","Dissonant2","DissonantPiano","DroppedSaw","DroppedSquare","DynaEPBright","DynaEPMed","Ethnic33","Full1","Full2","GuitarFuzz","Harsh","MklHard","Noise","Organ2","Organ3","PhonemeAh","PhonemeBah","PhonemeEe","PhonemeO","PhonemeOoh","PhonemePopAhhhs","Piano","Pulse","PutneyWavering","Saw","Square","TB303Square","Throaty","Triangle","Trombone","TwelveOpTines","TwelveStringGuitar1","WarmSaw","WarmSquare","WarmTriangle","Wurlitzer","Wurlitzer2","config","stopped","amount","k","curve","Float32Array","deg","PI","abs","frequency","onended","gainNode","createGain","gain","distoNode","createWaveShaper","makeDistortionCurve","oversample","connect","destination","oscillator","createOscillator","setPeriodicWave","createPeriodicWave","real","imag","start","freqs","pow","ms_","msPerUnit","donePlaying","isBar","isBeat","isUp","isDown","isArpeggiated","ms","nextNoteIndex","beepduration","chord2frequencies","reverse","what","padEnd","info","currentTime","note_","fIndex","sound","cd","clearTimeout","countdown","recfun","pct","msPerBeat","jQuery","prototype","div","AudioContext","webkitAudioContext","audioContext","Artist","Vex","localStorage","NOLOGO","get","URLSearchParams","search","scIndex","sc","samples","document","artist","year","naturalSize","width","minSize","maxSize","scoreWidth","rhythmWidth","_scIndex","sc_","$divScore","$divChords","$divParts","$divStructure","$divLyrics","$divRhythms","rhythmsWidth","canvas","getContext","scale","showUnit","splitParts","partdisplay","click","each","substr","vertical-align","$cDiv","text-align","$divPart","$partsZone","text-decoration","margin-bottom","getPartText","displayParts","margin","lskey","getItem","$divUnit","$editLink","$divUnitEdit","$closeLink","saveAndUpdate","updateVextab","setItem","$canvas","after","renderer","Flow","Renderer","Backends","CANVAS","SongcheatVexTab","Songcheat2VexTab","render","focus","$divRhythm","SVG"],"mappings":"uJAMA,SAAgBA,EAAUC,EAAUC,EAAWC,EAAOC,GACpD,IAAIC,EAAOC,KAEX,IAAKH,EAAO,CAEVA,KACA,IAAII,EAAY,EAChB,IAAK,IAAIC,KAAQN,EAAUO,UACzB,GAAgC,OAA5BP,EAAUQ,eAA0BR,EAAUQ,gBAAkBH,EAApE,CACA,IAAK,IAAII,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIC,KAAOH,EAAOI,KACrB,IAAK,IAAIC,KAAQF,EAAIG,OAAOC,cAAe,CACzC,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,UAAUN,IAE5C,GADAG,EAAYI,MAAQT,EAAIU,OAAOR,EAAKS,iBAAmBX,EAAIU,OAAOE,SAC7DP,EAAYI,MAAO,MAAM,IAAII,MAAM,mCAAqCX,EAAKS,iBAAmB,IACrGtB,EAAMyB,KAAKT,GAIjBZ,SAXiFA,IAgBrF,IAAIsB,EAAS,IAAIC,GAAO7B,EAAUE,GAChCC,KAAMA,EACN2B,KAAMC,SAAS9B,EAAU6B,KAAM,IAC/BE,UAAW/B,EAAU+B,UACrBC,KAAMhC,EAAUiC,KAChBC,OAAQ,WAAcC,EAAUC,QAAQ,UACxCC,YAAa,SAAUC,GAAKC,EAAeC,KAAKF,GAAK,OAIvDlC,KAAKqC,KAAOC,GAAE,SAASC,KAAMC,aAAc,OAAQC,SAAY,aAE/D,IAAIC,EAAgBJ,GAAE,UAAUC,KAAMI,YAAa,OAAQC,cAAe,OAAQC,eAAgB,SAC9FC,EAAc,WAChBJ,EAAcN,KAAKb,EAAOwB,WAAa,QACvCC,EAAaC,IAAI1B,EAAO2B,WAEtBf,EAAiBG,GAAE,UAAUC,KAAMI,YAAa,MAAOC,cAAe,SAAUO,MAAS,MAAOC,cAAe,qCAAsCX,SAAY,WAAYY,IAAO,OAAQC,MAAS,SAErMC,EAAgBjB,GAAE,OAAOC,KAAMM,eAAgB,SAAUT,KAAK,YAAYoB,GAAG,QAAS,WACxFjC,EAAOkC,MAAM,KACbX,MAGEY,EAAYpB,GAAE,OAAOF,KAAK,WAAWoB,GAAG,QAAS,WACnDjC,EAAOoC,KAAKpC,EAAOqC,QAAU9D,EAAO,EAAI,GACxCC,EAAKsC,KAAKwB,KAAK,aAAaC,OAC5BpB,EAAcoB,OACdJ,EAAUK,SAGRC,EAAc1B,GAAE,OAAOF,KAAK,WAAWoB,GAAG,QAAS,WACrDjC,EAAO0C,WAGLC,EAAa5B,GAAE,OAAOF,KAAK,oBAAoBoB,GAAG,QAAS,WAC7DjC,EAAO4C,QACPpE,EAAKsC,KAAKwB,KAAK,aAAaC,OAC5BpB,EAAcoB,OACdI,EAAWH,SAGThC,EAAYO,GAAE,OAAOF,KAAK,UAAUoB,GAAG,QAAS,WAClDjC,EAAO6C,OACPrE,EAAKsC,KAAKwB,KAAK,aAAaE,OAC5BrB,EAAcqB,OACdL,EAAUI,SAGZ9D,KAAKqC,KACFgC,OAAOX,GACPW,OAAOH,GACPG,OAAOtC,GACPsC,OAAOL,GACPK,OAAO,gBACPA,OAAOlC,GACPkC,OAAO,oEAEV,IAAIC,EAASC,KAAKC,MAGdC,GAAkB,EACtB,IAAK,IAAI/D,KAAQb,EAAS,GAAIa,EAAKO,OAASP,EAAKgE,QAAS,CAAED,GAAkB,EAAM,MACpF,GAAIA,EAAiB,CACnB,IAAIE,EAAsBrC,GAAE,6BAC5BtC,KAAKqC,KAAKgC,OAAOM,GAGjBA,EAAoBN,OAAO/B,GAAE,0BAA0BC,KAAMC,aAAc,OAAQoC,QAAW,UAC3FP,OAAO/B,GAAE,uCAAyCgC,EAAS,YAAc/C,EAAOsD,YAAc,eAAeR,OAAO,YACpHA,OAAO/B,GAAE,uCAAyCgC,EAAS,YAAc/C,EAAOuD,UAAY,OAAOT,OAAO,eAC1GA,OAAO/B,GAAE,uCAAyCgC,EAAS,YAAc/C,EAAOwD,YAAc,OAAOV,OAAO,aAC/GrE,KAAKqC,KAAKwB,KAAK,wBAA0BS,EAAS,KAAKU,OAAO,WAAczD,EAAO0D,QAAQ3C,GAAEtC,MAAMiD,SAGnG,IAAIiC,EAAc5C,GAAE,YACpBqC,EAAoBN,OAAO/B,GAAE,0BAA0BC,KAAMC,aAAc,OAAQoC,QAAW,UAAWP,OAAO,eAAeA,OAAOa,IACtI,IAAK,IAAItD,KAAS,OAAQ,SAAU,WAAY,YAAasD,EAAYb,OAAO/B,GAAE,YAAY6C,KAAK,WAAY5D,EAAOK,OAASA,GAAMuD,KAAK,QAASvD,GAAMwD,KAAK,IAAMxD,EAAO,MAC3K,IAAK,IAAIyD,KAAcC,GAAYJ,EAAYb,OAAO/B,GAAE,YAAY6C,KAAK,WAAY5D,EAAOK,OAASyD,GAAYF,KAAK,QAASE,GAAYD,KAAKC,IAChJH,EAAYF,OAAO,WAAczD,EAAOgE,QAAQjD,GAAEtC,MAAMiD,SAGxD,IAAIuC,EAAelD,GAAE,gDAAkDf,EAAOkE,WAAa,8CAE3FD,EAAahC,GAAG,QAAS,WAAcjC,EAAOmE,SAAShE,SAASY,GAAEtC,MAAMiD,MAAO,OAC/EuC,EAAahC,GAAG,SAAU,WAAcjC,EAAOmE,SAAShE,SAASY,GAAEtC,MAAMiD,MAAO,OAIlF,IAAID,EAAeV,GAAE,gDAAkDf,EAAO2B,SAAW,8CACzFlD,KAAKqC,KAAKgC,OAAO/B,GAAE,0BAA0BC,KAAMC,aAAc,MAAOoC,QAAW,UAAWP,OAAO,WAAWA,OAAOrB,GAAcqB,OAAO3B,GAAe2B,OAAOd,IAClKP,EAAaQ,GAAG,QAAS,WACvBjC,EAAOkC,MAAM/B,SAASY,GAAEtC,MAAMiD,MAAO,KACrCH,MAEFE,EAAaQ,GAAG,SAAU,WACxBjC,EAAOkC,MAAM/B,SAASY,GAAEtC,MAAMiD,MAAO,KACrCH,MAIF,IAAI6C,EAAgBrD,GAAE,gDAAkDf,EAAOqE,OAAS,8CACxF5F,KAAKqC,KAAKgC,OAAO/B,GAAE,0BAA0BC,KAAMC,aAAc,MAAOoC,QAAW,UAAWP,OAAO,YAAYA,OAAOsB,IACxHA,EAAcnC,GAAG,QAAS,WAAcjC,EAAOsE,UAAUnE,SAASY,GAAEtC,MAAMiD,MAAO,OACjF0C,EAAcnC,GAAG,SAAU,WAAcjC,EAAOsE,UAAUnE,SAASY,GAAEtC,MAAMiD,MAAO,OAG9ErD,EAAU+B,UAAUmE,UACtB9F,KAAKqC,KAAKgC,OAAO/B,GAAE,0BAA0BC,KAAMC,aAAc,OAAQoC,QAAW,UACjFP,OAAO/B,GAAE,0CAA4CgC,EAAS,0BAA0BD,OAAO,gBAC/FA,OAAO/B,GAAE,0CAA4CgC,EAAS,mBAAmBD,OAAO,kBAC3FrE,KAAKqC,KAAKwB,KAAK,2BAA6BS,EAAS,KAAKU,OAAO,WAC/DzD,EAAOuE,QAA4B,OAAlBxD,GAAEtC,MAAMiD,MAAiB8C,EAAMC,SAASpG,EAAU+B,UAAUmE,SAAW,QAI5F9F,KAAKqC,KAAKwB,KAAK,KAAKtB,KAAM0D,OAAU,UAAWtD,YAAa,MAAOuD,eAAgB,SAAUC,SAAS,YAGtGrD,IACAf,EAAUC,QAAQ,SC/HpB,SAASoE,EAAUC,EAAMC,EAAOC,GAC9B,GAAIF,EAAKG,iBAAkB,OAAOH,EAAKG,iBAAiBF,EAAOC,GAAI,GACnEF,EAAKI,YAAY,KAAOH,EAAO,WAAc,OAAQC,EAAGG,KAAKL,EAAMM,OAAOL,SAG5E,SAASM,EAAUP,EAAME,EAAIM,GAG3B,SAASC,EAAaC,EAAGC,GAEnBX,EAAKY,QAAUC,GACjBA,EAAab,EAAKY,MAClBV,EAAGG,KAAK1G,KAAM+G,EAAGF,IAGbG,GAAOG,WAAW,WAAcL,EAAYC,GAAG,IAAU,GATjE,IAAIG,EAAab,EAAKY,MAalBG,GAAU,SAAS,EAAO,QAAQ,EAA6B,QAAQ,EAAM,UAAU,EAAO,SAAS,EAAO,SAAS,EAAM,OAAO,EAAM,QAAQ,GACtJ,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOhG,OAAQiG,GAAK,EAAGjB,EAASC,EAAMe,EAAOC,GAAI,SAAUN,GAAKD,EAAYJ,KAAK1G,KAAM+G,EAAGK,EAAOC,EAAI,MAG3H,SAASC,EAAIC,EAAM3H,GACjB,IAAIiH,GAASU,KAAQA,EAAMC,MAASC,IACpC,IAAK,IAAIC,KAAM,OAAQ,aAAc,WAAY,QAAS,cAAe,aAAc,aAAc,eAAgBb,EAAKa,GAAK9H,EAAU8H,GACzIf,OAAOgB,SAASC,KAAO,cAAgB7B,EAAM8B,gBAAgBhB,GAiP/D,SAASiB,EAAelI,EAAWM,EAAM6H,GAEvCA,EAAYC,SAASnE,KAAK,qBAAqBoE,SAC/CF,EAAY3F,KAAK,IAEjB,IAEE,IAAI8F,EAAWC,GAASC,YAAYlI,GAGpC,IAAK,IAAImI,KAAWH,EAClBH,EAAYO,OAAOhG,GAAE,OAAO6D,SAAS,WAAW5D,IAAI,QAAS,UAAUH,KAAK,YAAciG,IAC1FE,QAAQC,KAAK,IAAMtI,EAAKuI,KAAO,KAAOJ,GAKxCN,EAAY1D,OAAO8D,GAASO,YAAYxI,EAAMN,EAAU+I,MAAO/I,EAAUgJ,WAAY,SAA8B,IAApBhJ,EAAU+I,QACzG,MAAO5B,GAEPgB,EAAYO,OAAOhG,GAAE,OAAO6D,SAAS,SAAS5D,IAAI,QAAS,OAAOH,KAAK,UAAY2E,EAAE8B,UACrFN,QAAQO,MAAM/B,UCvTLhB,EAKXgD,mBAAoBC,EAAGC,GACrB,GAAID,IAAMC,EAAG,OAAO,EACpB,GAAU,OAAND,GAAoB,OAANC,EAAY,OAAO,EACrC,GAAID,EAAE5H,SAAW6H,EAAE7H,OAAQ,OAAO,EAClC,IAAK,IAAIiG,EAAI,EAAGA,EAAI2B,EAAE5H,SAAUiG,EAC9B,GAAI2B,EAAE3B,KAAO4B,EAAE5B,GAAI,OAAO,EAE5B,OAAO,EAOT0B,aAAcG,GACZ,MAAO,KAAOlJ,KAAKmJ,OAAOD,EAAI9H,OAAS,EAAG,KAAO,SAAW8H,EAAM,SAAWlJ,KAAKmJ,OAAOD,EAAI9H,OAAS,EAAG,KAAO,KAGlH2H,kBAAmBK,GACjB,OAAOA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GAG7CR,iBAAkBK,EAAGI,GACnB,IAAIC,EAAQL,EAAEM,cAAcC,QAAQ,eAAgB,SAAUC,EAAOC,GAAU,OAAOA,EAAOP,gBAC7F,OAAOE,EAAaC,EAAMJ,OAAO,GAAGC,cAAgBG,EAAMF,MAAM,GAAKE,EAGvEV,cAAe3H,EAAQ0I,GACrB,GAAIC,MAAM3I,KAAY4I,SAAS5I,IAAWA,EAAS,EAAG,MAAM,IAAIC,MAAM,wCAEtE,IAAK,IADD+H,EAAI,GACC/B,EAAI,EAAGA,EAAIjG,EAAQiG,IAAK+B,GAAKU,GAAQ,IAC9C,OAAOV,EAQTL,iBAAkBkB,EAAOC,EAAOC,EAASC,GACvC,IAAIC,EAAKJ,EAAMK,MAAM,SACjBC,EAAKL,EAAMI,MAAM,SAMrB,OALQD,EAAGG,IAAI,SAAUC,EAAGpD,GAC1B,IAAIqD,EAAQN,GAAmBG,EAAGlD,IAAMkD,EAAGlD,GAAGsD,QAAWF,EAAGF,EAAGlD,KAAOoD,GAEtE,MADuB,iBAAZN,GAAsBO,EAAMpJ,KAAK6I,GACrCO,EAAME,KAAK,QAEXA,KAAK,MAOhB7B,uBAAwBlC,GACtB,IAAIgE,KACJ,IAAK,IAAIC,KAAKjE,EAAQgE,EAAIvJ,KAAKyJ,mBAAmBD,GAAK,IAAMC,mBAAmBlE,EAAKiE,KACrF,OAAOD,EAAID,KAAK,KAOlB7B,gBAAiBiC,GACf,GAAa,QAATA,EAAgB,OAAO,EAC3B,GAAa,QAATA,EAAgB,OAAO,EAC3B,GAAa,OAATA,EAAe,OAAO,EAC1B,GAAa,OAATA,EAAe,OAAO,GAC1B,GAAa,OAATA,EAAe,OAAO,GAC1B,GAAa,OAATA,EAAe,OAAO,GAE1B,GAAa,SAATA,EAAiB,OAAO,EAC5B,GAAa,SAATA,EAAiB,OAAO,EAC5B,GAAa,QAATA,EAAgB,OAAO,GAC3B,GAAa,QAATA,EAAgB,OAAO,GAC3B,GAAa,QAATA,EAAgB,OAAO,GAC3B,GAAa,QAATA,EAAgB,OAAO,GAE3B,MAAM,IAAI3J,MAAM,0BAA4B2J,EAAO,KAOrDjC,oBAAqBkC,GACnB,IAAK,IAAID,KAAS,IAAK,IAAK,IAAK,IAAK,KAAM,MAAO,CACjD,GAAIhL,KAAKgG,SAAS,IAAMgF,KAAUC,EAAO,MAAO,IAAMD,EACtD,GAAIhL,KAAKgG,SAAS,IAAMgF,EAAO,OAASC,EAAO,MAAO,IAAMD,EAAO,IAGrE,MAAM,IAAI3J,MAAM,yCAA2C4J,EAAQ,UAOrElC,qBAAsBkC,GAMpB,IALA,IAAIC,KAEAC,EAAUF,EACVG,EAAO,EAEJD,EAAU,GACf,IACED,EAAM5J,KAAKtB,KAAKqL,aAAaF,IAC7BA,EAAUC,EACVA,EAAO,EACP,MAAOrE,GACPoE,IACAC,IAIJ,GAAIA,EAAO,EAAG,MAAM,IAAI/J,MAAM,6CAA+C4J,EAAQ,UAErF,OAAOC,EAQTnC,iBAAkBuC,GAChB,GAAIvB,MAAMuB,IAASA,EAAO,GAAKA,EAAO,GAAI,MAAM,IAAIjK,MAAM,8BAAgCiK,EAAO,yDACjG,OAAOA,EAAO,GAAK,GAAKA,EAAOC,OAAOC,aAAa,IAAIC,WAAW,GAAKH,EAAO,IAQhFvC,iBAAkBe,GAChB,GAAoB,iBAATA,EAAmB,MAAM,IAAIzI,MAAM,qBAAuByI,EAAO,sBAC5E,IAAKA,EAAKF,MAAM,cAAe,MAAM,IAAIvI,MAAM,qBAAuByI,EAAO,8CAC7E,OAAOA,GAAQ,IAAM,GAAKA,EAAK2B,WAAW,GAAK,IAAIA,WAAW,GAAK/J,SAASoI,EAAM,IAOpFf,eAAgBe,EAAM4B,GACpB,IAAIJ,EAAOtL,KAAK2L,UAAU7B,GAC1B,GAAIC,MAAMuB,IAASA,EAAO,EAAG,MAAM,IAAIjK,MAAM,uBAAyBiK,EAAO,6CAC7E,GAAa,IAATA,EAAY,OAAO,EACvB,GAAIvB,MAAM2B,IAAiBA,EAAe,EAAG,MAAM,IAAIrK,MAAM,gCAAkCqK,EAAe,6CAC9G,GAAIA,EAAe,EAAIJ,GAAQI,EAAeJ,EAAM,MAAM,IAAIjK,MAAM,QAAUiK,EAAO,6CAA+CI,EAAe,uCACnJ,OAAOJ,EAAO,EAAII,EAOpB3C,eAAgB6C,EAASF,GACvB,OAAO1L,KAAK6L,UAAUD,EAAUA,EAAUF,EAAe,EAAIE,GAQ/D7C,oBAAqB9H,EAAOyD,GAC1B,IAAKzD,EAAM6K,UAAW,MAAM,IAAIzK,MAAM,mCAAqCJ,EAAMwH,MACjF,IAAKxH,EAAM8K,UAAW,MAAM,IAAI1K,MAAM,mCAAqCJ,EAAMwH,MAGjF,IAAK,IADDuD,KACK3E,EAAI,EAAGA,EAAIpG,EAAM6K,UAAU1K,OAAQiG,IAAK,CAE/C,IAAI4E,EAAS,EAAI5E,EAGjB,GAA2B,MAAvBpG,EAAM6K,UAAUzE,KAGpB3C,EAAUA,EAAQiF,QAAQ,MAAQsC,GAAU,EAAIA,EAAS,EAAIA,IAC7DvH,EAAUA,EAAQiF,QAAQ,KAAMsC,IAKpBrC,MAAM,SAAuC,IAA7BlF,EAAQwH,QAAQD,IAAgB,CAC1D,IAAIX,EAAOtL,KAAK2L,UAAU1K,EAAM6K,UAAUzE,IAEtC8E,EAA2B,MAApBzH,EADEA,EAAQkF,MAAM,OAAS,EAAIlF,EAAQwH,QAAQD,GAAU,GAElED,EAAO1K,MACL2K,OAAQA,EACRX,KAAMA,EACNa,KAAMA,KAKZ,OAAOH,GC1MX,IAAII,EAAoB,GACpBC,GAAuB,EACvBC,GAAmB,QAEVC,EACXxD,YAAaF,GACX7I,KAAK6I,QAAUA,EAGjBE,WACE,MAAO,mBAAqB/I,KAAK6I,eAI/B2D,EACJzD,YAAatB,GAEXzH,KAAKyH,MAAQA,EAGfsB,MACM/I,KAAKyH,MAAQ,GAAGc,QAAQkE,IAAIC,MAAMnE,QAASoE,WAGjD5D,QAASnJ,GAoBP,GAlBAA,EAAUgN,KAAOhN,EAAUgN,MAAQ,KACnChN,EAAUiN,WAAajN,EAAUiN,YAAc,IAC/CjN,EAAUkN,YAAclN,EAAUkN,aAAe,EACjDlN,EAAU+B,UAAY/B,EAAU+B,cAChC/B,EAAU+B,UAAUoL,IAAMnN,EAAU+B,UAAUoL,KAAO,IACrDnN,EAAU+B,UAAUqL,KAAOpN,EAAU+B,UAAUqL,OAAUC,aAAc,KAAMC,YAAa,EAAGC,OAAQ,OACrGvN,EAAUwN,WAAaxN,EAAUwN,YAAcxN,EAAU+B,UAAUqL,KAAKC,aACxErN,EAAUsB,OAAStB,EAAUsB,WAC7BtB,EAAUyN,QAAUzN,EAAUyN,YAC9BzN,EAAU0N,MAAQ1N,EAAU0N,UAG5B1N,EAAU2N,YAAc3N,EAAU+B,UAAUqL,KAAKE,YAAcnH,EAAMC,SAASpG,EAAU+B,UAAUqL,KAAKC,cAGvGjN,KAAKwN,WAAW5N,IAGXA,EAAUO,UAAW,CACxBP,EAAUO,aACV,IAAK,IAAIG,KAAQV,EAAU0N,MAAO1N,EAAUO,UAAUmB,MAAOhB,KAAQA,IAIvE,IAAImN,KACAC,KACJ,IAAK,IAAIxN,KAAQN,EAAUO,UAAWsN,EAAYvN,EAAKI,KAAKqN,SAA2C,IAA9BF,EAAYvN,EAAKI,KAAKqN,IAAsB,EAAIF,EAAYvN,EAAKI,KAAKqN,IAAM,EACrJ,IAAK,IAAIzN,KAAQN,EAAUO,UACzBuN,EAAaxN,EAAKI,KAAKqN,SAA4C,IAA/BD,EAAaxN,EAAKI,KAAKqN,IAAsB,EAAID,EAAaxN,EAAKI,KAAKqN,IAAM,EAC7GzN,EAAKuI,OAAMvI,EAAKuI,KAAOvI,EAAKI,KAAKmI,MAAQgF,EAAYvN,EAAKI,KAAKqN,IAAM,EAAI,IAAMD,EAAaxN,EAAKI,KAAKqN,IAAM,KAInH,IAAIC,GAAU,MAAO,UAAW,OAAQ,SAAU,SAAU,WACxDC,EAAY,EAChB,IAAK,IAAIvN,KAAQV,EAAU0N,MAAchN,EAAK6C,QAAO7C,EAAK6C,MAAQyK,EAAOC,IAAcD,EAAOxM,SAG9F,IAAK,IAAIT,KAAUf,EAAUyN,QAASrN,KAAK8N,cAAcnN,EAAQf,EAAU+B,UAAUqL,KAAKC,cAE1F,IAAK,IAAI3M,KAAQV,EAAU0N,MAAO,CAEhC,IAAIS,EAAc,EAClB,IAAK,IAAI1N,KAAUC,EAAKC,QAAS,CAC/BF,EAAO2N,gBACP,IAAIC,EAAY,KAChB,IAAK,IAAIzN,KAAOH,EAAOI,KAAMwN,EAAYjO,KAAKkO,gBAAgB1N,EAAKH,EAAO2N,aAAcpO,EAAU2N,aAAa,EAAOU,GAEtHjO,KAAKyM,IAAI,0CAA4CnM,EAAKmI,KAAO,KAAOsF,EAAc,IACtF,IAAK,IAAI7L,KAAK7B,EAAO2N,aAAchO,KAAKyM,IAAI,MAAQvK,EAAEjB,MAAMwH,KAAO,OAASvG,EAAE8D,SAAW,UAGzF,IAAImI,EAAW,EACf,IAAK,IAAI3N,KAAOH,EAAOI,KAAM,CAC3BD,EAAIwN,cAAiBxN,OAAWG,WAChC,IAAK,IAAIyN,KAAqB,SAAU,OAAQpO,KAAKkO,gBAAgB1N,EAAKA,EAAIwN,aAAaI,GAAmBxO,EAAU2N,YAAkC,QAArBa,GAErIpO,KAAKyM,IAAI,wCAA0CnM,EAAKmI,KAAO,KAAOsF,EAAc,GAAK,KAAOI,EAAW,IAC3G,IAAK,IAAIjM,KAAK1B,EAAIwN,aAAqB,OAAGhO,KAAKyM,IAAI,QAAUvK,EAAEjB,MAAMwH,KAAO,OAASvG,EAAE8D,SAAW,UAClGhG,KAAKyM,IAAI,sCAAwCnM,EAAKmI,KAAO,KAAOsF,EAAc,GAAK,KAAOI,EAAW,IACzG,IAAK,IAAIjM,KAAK1B,EAAIwN,aAAkB,IAAGhO,KAAKyM,IAAI,QAAUvK,EAAEjB,MAAMwH,KAAO,OAASvG,EAAE8D,SAAW,UAE/FmI,IAGFJ,IAIFzN,EAAK0F,SAAW,EAChB,IAAK,IAAI3F,KAAUC,EAAKC,QAAW,IAAK,IAAIC,KAAOH,EAAOI,KAAMH,EAAK0F,UAAYxF,EAAIG,OAAOqF,SAI9F,OAAOpG,EAGTmJ,WAAYnJ,GACV,IAAIK,EAAY,EAChB,GAAIL,EAAUO,UACZ,IAAK,IAAID,KAAQN,EAAUO,UAAW,CACpC,IAAKD,EAAKI,KAAM,MAAM,IAAIiM,EAAkB,8BAAgCtM,EAAY,IAGxF,IAAIK,EAAON,KAAKqO,UAAUzO,EAAU0N,MAAOpN,EAAKI,MAChD,IAAKA,EAAM,MAAM,IAAIiM,EAAkB,QAAUrM,EAAKI,KAAO,cAC7DJ,EAAKI,KAAOA,EAEZL,IAIJ,GAAIL,EAAU0N,MACZ,IAAK,IAAIhN,KAAQV,EAAU0N,MAAO,CAChC,IAAKhN,EAAKC,QAAS,MAAM,IAAIgM,EAAkB,iCAAmCjM,EAAKmI,KAAO,KAC9F,KAAMnI,EAAKC,mBAAmB+N,OAAQ,MAAM,IAAI/B,EAAkB,6BAA+BjM,EAAKmI,KAAO,qCAAwC7I,EAAU0N,MAAM/M,SAErK,IAAIwN,EAAc,EAClB,IAAK,IAAI1N,KAAUC,EAAKC,QAAS,CAC/B,IAAI4N,EAAW,EACf,IAAK,IAAI3N,KAAOH,EAAOI,KAAM,CAC3B,IAAKD,EAAIG,OAAQ,MAAM,IAAI4L,EAAkB,+BAAiC4B,EAAW,GAAK,eAAiBJ,EAAc,GAAK,OAASzN,EAAKmI,MAChJ,IAAKjI,EAAIU,OAAQ,MAAM,IAAIqL,EAAkB,+BAAiC4B,EAAW,GAAK,eAAiBJ,EAAc,GAAK,OAASzN,EAAKmI,MAChJ,KAAMjI,EAAIU,kBAAkBoN,OAAQ,MAAM,IAAI/B,EAAkB,2BAA6B4B,EAAW,GAAK,eAAiBJ,EAAc,GAAK,oCAAuCvN,EAAIU,QAG5L,IAAIP,EAASX,KAAKqO,UAAUzO,EAAUyN,QAAS7M,EAAIG,QACnD,IAAKA,EAAQ,MAAM,IAAI4L,EAAkB,UAAY/L,EAAIG,OAAS,uBAAyBwN,EAAW,GAAK,eAAiBJ,EAAc,IAC1IvN,EAAIG,OAASA,EAGb,IAAIO,KACJ,IAAK,IAAIqN,KAAW/N,EAAIU,OAAQ,CAE9B,IAAID,EAAQjB,KAAKqO,UAAUzO,EAAUsB,OAAQqN,GAC7C,IAAKtN,EAAO,MAAM,IAAIsL,EAAkB,SAAWgC,EAAU,uBAAyBJ,EAAW,GAAK,eAAiBJ,EAAc,IACrI7M,EAAOI,KAAKL,GAGdT,EAAIU,OAASA,EACbiN,IAGFJ,MAMRhF,UAAWyF,EAAYb,GACrB,GAAIa,EAAc,IAAK,IAAInH,KAAKmH,EAAc,GAAInH,EAAEsG,KAAOA,EAAI,OAAOtG,EACtE,OAAO,KAGT0B,cAAepI,EAAQ8N,GACrBzO,KAAKyM,IAAI,oBAAsB9L,EAAOgN,GAAK,gBAAkBhN,EAAO+N,MAAQ,KAG5E,IAAIC,EAAeF,EAGnB9N,EAAOiO,iBAAmB,EAG1B,IAAInM,EAAW,EACXoM,EAAY,KAGhBlO,EAAOC,iBACP,IAAK,IAAIkO,KAASnO,EAAO+N,MAAMpE,MAAM,6DAA8D,CACjG,GAAKwE,EAAQA,EAAMnE,OAAS,CAC1B,IAAIf,EAAQ,KACZ,GAAKA,EAAQkF,EAAMlF,MAAM,4BAEvB+E,EAAe5I,EAAMC,SAAS4D,EAAM,SAC/B,GAAKA,EAAQkF,EAAMlF,MAAM,WAE9BjJ,EAAOC,cAAcU,MAAO8J,MAAM,EAAMpF,SAAU2I,EAAcI,MAAM,EAAOrK,SAAS,EAAOsK,SAAW7N,iBAAkBR,EAAOiO,yBAC5H,CAAA,KAAKhF,EAAQkF,EAAMlF,MAAM,mCA2CzB,MAAM,IAAI2C,EAAkB,kBAAoBuC,EAAQ,4CAA8CrM,GAAYoM,EAAY,YAAcA,EAAY,KAAO,KA3ClG,CAElE,IAAIE,EAAoB,MAAbnF,EAAM,GAGblF,EAAUkF,EAAM,GAGpB,GAFgB,KAAZlF,IAAgBA,EAAU,KACd,MAAZA,IAAiBA,EAAU,OAC1BA,EAAQkF,MAAM,8CAA+C,MAAM,IAAI2C,EAAkB,8CAAgD7H,GAG9I,IAAIuK,EAAcrF,EAAM,GACpBoF,GAAUE,OAAQ,KAAMC,QAAQ,EAAOC,IAAI,EAAOrD,UAAW,MACjE,IAAK,IAAIsD,KAAQJ,EAAY3E,MAAM,0BACjC,GAAI+E,EAAK1E,OACP,GAAI0E,EAAKzF,MAAM,gBAAiB,CAE9B,GAAIoF,EAAMjD,UAAW,MAAM,IAAIQ,EAAkB,cAAgByC,EAAMjD,UAAY,iBAAmBsD,EAAO,uDAAyDP,GACtK,GAAIE,EAAMI,GAAI,MAAM,IAAI7C,EAAkB,gCAAkC8C,EAAO,uDAAyDP,GAC5I,GAAIE,EAAME,OAAQ,MAAM,IAAI3C,EAAkB,+EAAiFuC,GAC/HE,EAAME,OAASG,OACV,GAAIA,EAAKzF,MAAM,aAAc,CAElC,GAAIoF,EAAME,OAAQ,MAAM,IAAI3C,EAAkB,WAAayC,EAAME,OAAS,oBAAsBG,EAAO,uDAAyDP,GAChK,GAAIE,EAAMI,GAAI,MAAM,IAAI7C,EAAkB,mCAAqC8C,EAAO,uDAAyDP,GAC/I,GAAIE,EAAMjD,UAAW,MAAM,IAAIQ,EAAkB,qEAAuEuC,GACxHE,EAAMjD,UAAYsD,OACb,GAAIA,EAAKzF,MAAM,QAAS,CAE7B,GAAIoF,EAAME,OAAQ,MAAM,IAAI3C,EAAkB,WAAayC,EAAME,OAAS,sBAAwBG,EAAO,uDAAyDP,GAClK,GAAIE,EAAMjD,UAAW,MAAM,IAAIQ,EAAkB,cAAgByC,EAAMjD,UAAY,sBAAwBsD,EAAO,uDAAyDP,GAC3K,GAAIE,EAAMI,GAAI,MAAM,IAAI7C,EAAkB,qEAAuEuC,GACjHE,EAAMI,IAAK,MACN,CAAA,IAAIC,EAAKzF,MAAM,OAIf,MAAM,IAAI2C,EAAkB,iBAAmB8C,EAAO,oCAAsCP,EAAQ,KAFzG,GAAIE,EAAMG,OAAQ,MAAM,IAAI5C,EAAkB,8DAAgEuC,GAC9GE,EAAMG,QAAS,EAMrBxO,EAAOC,cAAcU,MAAO8J,MAAM,EAAOpF,SAAU2I,EAAcI,KAAMA,EAAMrK,QAASA,EAASsK,MAAOA,EAAO7N,iBAAkBR,EAAOiO,sBAGxIC,EAAYC,EAGdrM,GAAYqM,EAAM1N,OAIpBT,EAAOqF,SAAW,EAClB,IAAK,IAAIsJ,KAAK3O,EAAOC,cAAeD,EAAOqF,UAAYsJ,EAAEtJ,SAG3D+C,gBAAiBvI,EAAKwN,EAAcT,EAAagC,EAAatB,GAE5D,GAAIzN,EAAIU,OAAOE,OAAS,EAAG,MAAM,IAAImL,EAAkB,6CAA+C/L,EAAIU,OAAOE,OAAS,eAC1H,KAAOZ,EAAIU,OAAOE,OAASZ,EAAIG,OAAOiO,kBAAkBpO,EAAIU,OAAOI,KAAKd,EAAIU,OAAOV,EAAIU,OAAOE,OAAS,IAEvG,IAAIoO,EAAS,EACb,IAAK,IAAI9O,KAAQF,EAAIG,OAAOC,cAAe,CAEzC,IAAIK,EAAQT,EAAIU,OAAOR,EAAKS,kBAC5B,IAAKF,EAAO,MAAM,IAAIsL,EAAkB,mCAAqC7L,EAAKS,iBAAmB,IAGjG8M,IAAchN,GAASuO,EAASjC,GAAgB,EAAGS,EAAaA,EAAa5M,OAAS,GAAG4E,UAAYtF,EAAKsF,SAIzGgI,EAAa1M,MAAOL,MAAOA,EAAO+E,SAAUtF,EAAKsF,SAAUyJ,OAAQxB,IAAchN,IAAUsO,IAEhGtB,EAAYhN,EACZuO,GAAU9O,EAAKsF,SAGjB,OAAOiI,EAGTlF,YAAa7I,EAAMwP,EAAmBnC,GACpC,IAAIrF,KACAsH,EAAS,EAGbtP,EAAKyP,QAAUzP,EAAKyP,QAAU,IAAIhG,QAAQ,MAAO,IAGjDzJ,EAAK0P,UACL,IAAK,IAAItP,KAAQJ,EAAKyP,OAAOrF,MAAM,mCAAoC,CACrE,IAAIV,EAAQ,MAEPA,EAAQtJ,EAAKsJ,MAAM,6BAA8B4F,EAASxP,KAAK6P,cAAc3P,EAAMsP,EAAQ5F,EAAM,GAAK7D,EAAMC,SAAS4D,EAAM,IAAM8F,EAAmBnC,GAGhJjN,EAAKsJ,MAAM,MAAO4F,EAASxP,KAAK6P,cAAc3P,EAAMsP,EAAQjC,EAAeiC,EAASjC,EAAcA,GAGlGjN,EAAKc,OAAS,GAAGlB,EAAK0P,OAAOtO,MAAO8D,KAAM9E,EAAMkP,OAAQA,EAAQxJ,SAAU,IAIjF9F,EAAK0P,OAAOxO,QAA2D,IAAjDlB,EAAK0P,OAAO1P,EAAK0P,OAAOxO,OAAS,GAAG4E,WAAgBwJ,EAASxP,KAAK6P,cAAc3P,EAAMsP,EAAQjC,EAAeiC,EAASjC,EAAcA,IAG9J,IAAIuC,EAAkB5P,EAAKI,KAAK0F,SAAWwJ,EAC3CxP,KAAKyM,IAAI,IAAMvM,EAAKuI,KAAO,wBAA0BqH,EAAkB,WAAa5P,EAAKI,KAAK0F,SAAW,MAAQwJ,EAAS,OAAUM,EAAkBvC,EAAe,iBACjKuC,EAAkB,GAAG5H,EAAS5G,KAAK,kBAAoByO,KAAKC,OAAOF,EAAkBvC,GAAe,YAAcuC,EAAkBvC,EAAc,QAAUxH,EAAMkK,eAAeH,EAAkBvC,GAAe,IAAM,cAC5NiC,EAASxP,KAAK6P,cAAc3P,EAAMsP,EAAQM,EAAiBvC,GAE3D,IAAK,IAAI2C,KAAShQ,EAAK0P,OAAQ,CAE7B,IAAIO,EAAcnQ,KAAKoQ,eAAeF,GAAS,EAG/CA,EAAMG,KAAON,KAAKO,IAAIH,EAAaJ,KAAKQ,KAAKnE,EAAoB8D,EAAMlK,SAAWuH,IAGlF2C,EAAMxI,EAAIwI,EAAMG,KAAOH,EAAMlK,SAG7BkK,EAAM1P,KAAO0P,EAAMV,OAASU,EAAMlK,UAAYuH,GAAgB,EAG9D2C,EAAMlC,cAAiBxN,OAAWG,UAAcN,WAIlDH,EAAKsQ,KAAO,EACZ,IAAK,IAAIN,KAAShQ,EAAK0P,OAAQ1P,EAAKsQ,KAAOT,KAAKO,IAAIpQ,EAAKsQ,KAAMN,EAAMxI,GAGrE8H,EAAS,EACT,IAAK,IAAInP,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIkQ,KAAiBpQ,EAAO2N,aAAc,CAE7C,IAAIkC,EAAQ,KACZ,IAAK,IAAIQ,KAAKxQ,EAAK0P,OAAcc,EAAElB,QAAUA,IAAQU,EAAQQ,GAC7D,IAAKR,EAAO,MAAM,IAAI7O,MAAM,oCAAsCoP,EAAcxP,MAAMwH,KAAO,gBAAkB+G,EAAS,UAGxHU,EAAMlC,aAAqB,OAAE1M,MAAOkO,OAAQA,EAAQpK,KAAMpF,KAAK2Q,gBAAgBF,KAE/EjB,GAAUiB,EAAczK,SAK5BwJ,GAAW7O,OAAU,EAAGH,IAAO,GAC/B,IAAK,IAAIH,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIC,KAAOH,EAAOI,KACrB,IAAK,IAAI2N,KAAqB,SAAU,OACtC,IAAK,IAAIqC,KAAiBjQ,EAAIwN,aAAaI,GAAmB,CAE5D,IAAI8B,EAAQ,KACZ,IAAK,IAAIQ,KAAKxQ,EAAK0P,OAAcc,EAAElB,QAAUA,EAAOpB,KAAmB8B,EAAQQ,GAC/E,IAAKR,EAAO,MAAM,IAAI7O,MAAM,oCAAsCoP,EAAcxP,MAAMwH,KAAO,gBAAkB+G,EAAOpB,GAAoB,UAG1I8B,EAAMlC,aAAaI,GAAkB9M,MAAOkO,OAAQA,EAAOpB,GAAmBhJ,KAAMpF,KAAK2Q,gBAAgBF,KAEzGjB,EAAOpB,IAAqBqC,EAAczK,SAOlD,IAAI4K,EAAY,mBAAqB1Q,EAAKuI,KAAO,OAC7C0F,EAAW,EACf,IAAI0C,GAAe,EACnB,IAAK,IAAIX,KAAShQ,EAAK0P,OACrBgB,GAAa,UAAYzC,EAAW,GAAK,MAAQ+B,EAAM9K,KAAKuE,QAAQ,MAAO,OAAS,KAAOuG,EAAMlK,SAAW,KAAOkK,EAAMV,OAAS,OAASU,EAAMV,OAASU,EAAMlK,UAAY,OAAShG,KAAKoQ,eAAeF,GAAS,OAASA,EAAMG,KAAO,MAAQH,EAAMxI,EAAEoJ,QAAQ,GAAK,yBAA2BZ,EAAMlC,aAAkB,IAAE5M,OAAS,aAAe8O,EAAMlC,aAAqB,OAAE5M,OACxV,IAAnB8O,EAAMlK,WAAgB6K,GAAe,GACrCX,EAAM1P,MACR2N,IACAyC,GAAa,OAEfA,GAAa,KAKf,GAHAA,GAAa,WAAa1Q,EAAKsQ,KAAKM,QAAQ,GAC5C9Q,KAAKyM,IAAImE,GAELC,EAAc,MAAM,IAAIxP,MAAM,kCAElC,OAAO6G,EAGTa,YAAa7I,EAAM6Q,EAAsBzG,EAAO8D,EAAkB4C,GAChE,IAAIC,EAAW,GAGX9C,EAAW,EACX+C,EAAa,EACjB,IAAK,IAAIhB,KAAShQ,EAAK0P,OAAQ,CAE7BM,EAAMzN,aAAewO,EAAStH,QAAQ,MAAO,KAAKvI,OAClD8O,EAAM9O,OAAS2O,KAAKQ,KAAKL,EAAMlK,SAAW9F,EAAKsQ,MAI/C,IAAIW,EAAiBjB,EAAM1P,MAAQ0P,EAAM9K,KAAKwE,MAAM,MAGhDwH,EAAY,KACZL,EAAuB,IAAGK,EAAYpR,KAAKoQ,eAAeF,GAASa,GAAwBI,EAAiB,EAAI,IAChHC,IAAWlB,EAAM9O,OAAS2O,KAAKsB,IAAInB,EAAM9O,OAAQgQ,IAGrD,IAAIE,EAAYpB,EAAM1P,IAAM,EAAI,EAChC,GAAI0P,EAAMlC,aAAaI,GAAqB,IAAK,IAAI/G,EAAI,EAAGA,EAAI6I,EAAMlC,aAAaI,GAAkBhN,OAAQiG,IAAKiK,GAAapB,EAAMlC,aAAaI,GAAkB/G,GAAGjC,KAAKhE,OAC5KkQ,EAAYvB,KAAKO,IAAItQ,KAAKoQ,eAAeF,IAAUiB,EAAiB,EAAI,GAAIG,GAC5EpB,EAAM9O,OAAS2O,KAAKO,IAAIJ,EAAM9O,OAAQkQ,GAGtC,IAAIC,EAASxL,EAAMoD,OAAO+G,EAAM9O,OAASpB,KAAKoQ,eAAeF,GAAQc,GAAYhR,KAAKyH,MAAQ,IAAM,KAGpG8J,EAASA,EAAO5H,QAAQ,OAAQuG,EAAM1P,IAAO8J,EAAQ,IAAO6D,EAAW,GAAK7D,GAAU,EAAK,MAAQ,IAAQtK,KAAKyH,MAAQ,IAAM,MAG9H,IAAI+J,GAAalH,EAAQ,EAAI4F,EAAM9K,KAAKuE,QAAQ,MAAO,IAAMuG,EAAM9K,MAAQmM,EAE3EvR,KAAKyM,IAAI,IAAMvM,EAAKuI,KAAO,oBAAsByI,EAAa,GAAK,KAAOM,EAAU7H,QAAQ,MAAO,OAAS,QAAUuG,EAAM9O,OAAS,iBAAmB8O,EAAMlK,SAAW9F,EAAKsQ,MAAMM,QAAQ,GAAK,QAAUQ,EAAY,SAAWF,GAAa,OAAS,KACxPH,GAAYO,EAEZN,IACIhB,EAAM1P,KAAK2N,IAIjB,IAAKC,EAAkB,OAAO6C,EAG9B,IAAIQ,KACJ,IAAK,IAAIvB,KAAShQ,EAAK0P,OAAQ,CAC7B,IAAI8B,EAAgC,EAChCC,EAA6B,EAGjC,IAAK,IAAIC,KAAe1B,EAAMlC,aAAaI,GAAmBsD,GAAiCE,EAAYxM,KAAKhE,OAEhH,IAAK,IAAIwQ,KAAe1B,EAAMlC,aAAaI,GAAmB,CAE5D,IAAIyD,EAAgB9B,KAAKQ,MAAOqB,EAAYpC,OAASU,EAAMV,QAAUU,EAAMlK,SAAYkK,EAAM9O,QACzF0Q,EAAiBD,EAGrB,KAAOA,EAAgBH,EAAgCxB,EAAM9O,QAAU8O,EAAM1P,IAAM,EAAI,IAAMqR,IAG7F,KAAOA,EAAgBF,EAA6B,GAAKE,IAEzD7R,KAAKyM,IAAI,kBAAoByD,EAAM9K,KAAKuE,QAAQ,MAAO,OAAS,iBAAmBuG,EAAMV,OAAS,iBAAmBU,EAAMzN,SAAW,cAAgBmP,EAAYxM,KAAKuF,OAAS,gBAAkBiH,EAAYpC,OAAS,+CAAiDqC,EAAgB,qBAAuBC,EAAiB,WAChUL,EAAanQ,MAAO8D,KAAMwM,EAAYxM,KAAMoK,OAAQoC,EAAYpC,OAAQ/M,SAAUyN,EAAMzN,SAAWoP,IAEnGF,EAA6BE,EAAgBD,EAAYxM,KAAKhE,OAC9DsQ,GAAiCE,EAAYxM,KAAKhE,QAItD,IAAK,IAAI2Q,KAAeN,EAAczR,KAAKyM,IAAI,IAAMvM,EAAKuI,KAAO,mBAAqBsJ,EAAY3M,KAAO,MAAQ2M,EAAYvC,OAAS,YAAcuC,EAAYtP,SAAW,UAG3K,IAAIA,EAAW,EACXuP,EAAO,EACPC,EAAYhB,EACZiB,EAAY,GAChBjB,EAAW,GACX,IAAK,IAAInH,KAAQmI,EACf,GAAa,OAATnI,EACFmH,GAAY,KACZiB,GAAa,KACbF,EAAO,MACF,CACL,IAAK,IAAID,KAAeN,EACjBM,EAAYI,UACXJ,EAAYtP,UAAYA,IAC1BzC,KAAKyM,IAAI,IAAMvM,EAAKuI,KAAO,eAAiBsJ,EAAY3M,KAAO,MAAQ3C,EAAW,UAClFyP,GAAaH,EAAY3M,KACzB2M,EAAYI,UAAW,EACvBH,EAAOD,EAAY3M,KAAKhE,QAK9BqB,IAIa,IAATuP,EAAcE,GAAsB,MAATpI,EAAeA,EAAO,IAAakI,IAClEf,GAAqB,MAATnH,GAAkBkH,GAAYhR,KAAKyH,MAAeqC,EAAN,IAK5D,OAAO/D,EAAMqM,UAAUF,EAAWjB,EAAU,KAAM3E,GAGpDvD,cAAe7I,EAAMsP,EAAQ6C,EAAM9E,GACjC,IAAKA,EAAa,MAAM,IAAIlM,MAAM,gDAElC,KAAOgR,EAAO,GAAG,CAEf,IAAIC,EAAcvC,KAAKsB,IAAIgB,EAAM9E,EAAeiC,EAASjC,KAGpDrN,EAAK0P,OAAOxO,SAAYiL,GAAwBnM,EAAK0P,OAAO1P,EAAK0P,OAAOxO,OAAS,GAAG4E,SAAW,IAAI9F,EAAK0P,OAAOtO,MAAO8D,KAAM,GAAIoK,OAAQA,EAAQxJ,SAAU,IAG/J9F,EAAK0P,OAAO1P,EAAK0P,OAAOxO,OAAS,GAAG4E,UAAYsM,EAChD9C,GAAU8C,GACVD,GAAQC,GAGG,GAAGpS,EAAK0P,OAAOtO,MAAO8D,KAAMpF,KAAKyH,MAAQ,EAAI,IAAM,GAAI+H,OAAQA,EAAQxJ,SAAU,IAG9F,OAAOwJ,EAGTzG,eAAgBmH,GAKd,UAAWA,EAAM9K,KAAKuE,QAAQ,MAAO,KAAKvI,OAG5C2H,gBAAiB0H,GAEf,OAAIA,EAAchB,OAAe,IAG1BgB,EAAcxP,MAAMwH,KAAO,WAQzB8J,EACXxJ,YAAanJ,EAAW6H,GACtBzH,KAAKwS,UAAY,IAAIhG,EAAU/E,GAC3B7H,GAAWI,KAAKyS,IAAI7S,GAG1BmJ,IAAKnJ,GACHI,KAAKwS,UAAU/F,IAAI1G,EAAM2M,MAAM,sBAC/B1S,KAAK2S,IAAM3S,KAAKwS,UAAUI,QAAQ9R,KAAKC,MAAMD,KAAKE,UAAUpB,KAG9DmJ,YAAa7I,GAEX,OADAF,KAAKwS,UAAU/F,IAAI1G,EAAM2M,MAAM,gBAAkBxS,EAAKuI,OAC/CzI,KAAKwS,UAAUpK,YAAYlI,EAAM6F,EAAMC,SAAShG,KAAK2S,IAAIvF,YAAapN,KAAK2S,IAAIpF,aAGxFxE,YAAa7I,EAAM6Q,EAAsBzG,EAAO8D,EAAkB4C,GAEhE,OADAhR,KAAKwS,UAAU/F,IAAI1G,EAAM2M,yBAAyBxS,EAAKuI,gCAAgCsI,cAAiCzG,yBAA6B8D,iBAAgC4C,OAC9KhR,KAAKwS,UAAU9J,YAAYxI,EAAM6Q,EAAsBzG,EAAO8D,EAAkB4C,GAGzFjI,YAAazI,EAAMyQ,EAAsBzG,EAAO8D,EAAkB4C,GAEhE,IAAI9Q,GAASuI,KAAMnI,EAAKmI,KAAMnI,KAAMA,GAMpC,OAJAN,KAAKwS,UAAU/F,IAAI1G,EAAM2M,MAAM,qBAAuBxS,EAAKuI,OAC3DzI,KAAKwS,UAAUpK,YAAYlI,EAAM6F,EAAMC,SAAShG,KAAK2S,IAAIvF,YAAapN,KAAK2S,IAAIpF,aAE/EvN,KAAKwS,UAAU/F,IAAI1G,EAAM2M,8BAA8BxS,EAAKuI,gCAAgCsI,cAAiCzG,yBAA6B8D,iBAAgC4C,OACnLhR,KAAKwS,UAAU9J,YAAYxI,EAAM6Q,EAAsBzG,EAAO8D,EAAkB4C,UC5iB9E6B,EACX9J,YAAaF,GACX7I,KAAK6I,QAAUA,EAGjBE,WACE,MAAO,mBAAqB/I,KAAK6I,eAIxBiK,EACX/J,aAAcgK,GACZ,IAEE,IAAKA,EAAInJ,MAAM,mGAAoG,MAAM,IAAIiJ,EAAkB,8BAC/I,IAAIvF,EAAQyF,EAAIzI,MAAM,MAGlB7B,EAAO6E,EAAM,IAAIhD,MAAM,KAAK,GAAGX,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAGhE+B,EAAehK,SAAS4L,EAAM,GAAI,IAGlC0F,EAA2B,MAAd1F,EAAM,IAAcA,EAAM,IAAMvH,EAAMkN,QAAQvR,SAAS4L,EAAM,IAAK,IAAK5B,GAGpFI,EAAY,GAChB,IAAK,IAAIhC,KAAQwD,EAAM,GAAIxB,GAAsB,MAAThC,EAAeA,EAAO/D,EAAMkN,QAAQvR,SAASoI,EAAM,IAAK4B,GAEhG,OACEjD,KAAMA,EACNqD,UAAWA,EACXC,UAAWuB,EAAM,GAAK,IAAM0F,EAC5BE,QAAS,IAEX,MAAOnM,GACP,MAAM,IAAI8L,EAAkB,QAAUE,EAAM,KAAOhM,EAAE8B,UAIzDE,WAAY9H,EAAOkS,GACjB,IAEE,GAA+B,iBAApBlS,EAAM6K,UAAwB,MAAM,IAAIzK,MAAM,oCACzD,GAA+B,IAA3BJ,EAAM6K,UAAU1K,OAAc,MAAM,IAAIC,MAAM,kFAClD,IAAKJ,EAAM6K,UAAUlC,MAAM,kBAAmB,MAAM,IAAIvI,MAAM,gHAG9D,GAA+B,iBAApBJ,EAAM8K,UAAwB,MAAM,IAAI1K,MAAM,oCACzD,GAA+B,IAA3BJ,EAAM8K,UAAU3K,OAAc,MAAM,IAAIC,MAAM,gEAClD,IAAKJ,EAAM8K,UAAUnC,MAAM,oBAAqB,MAAM,IAAIvI,MAAM,+GAChE,IAAKJ,EAAM8K,UAAUnC,MAAM,6BAA8B,MAAM,IAAIvI,MAAM,+KAGzE,IAAI+R,KACJ,IAAK,IAAItJ,KAAQ7I,EAAM6K,UAAWsH,EAAM9R,KAAc,MAATwI,EAAe,KAAO/D,EAAM4F,UAAU7B,IAGnF,IAAIuJ,EAAUD,EAAME,OAAOC,GAAKA,GAAGnS,OAAS,EAAI2O,KAAKsB,OAAO+B,EAAME,OAAOC,GAAKA,IAAM,EAChFC,EAAUJ,EAAME,OAAOC,GAAKA,GAAGnS,OAAS,EAAI2O,KAAKO,OAAO8C,EAAME,OAAOC,GAAKA,IAAM,EAGhFE,EAAU1D,KAAKO,IAAI,EAAGkD,EAAU,EAAIH,GAGpC3H,EAAe8H,EAAU,EAAIC,GAAW,EAAI,EAAIJ,EAGhDtH,EAAY9K,EAAM8K,UAAUzB,MAAM,KAClCyB,EAAU,IAAuB,MAAjBA,EAAU,KAAYA,EAAU,GAAKhG,EAAM2N,QAAQ3H,EAAU,GAAIL,IAGrF,IAAIiI,EAAe,GACnB,IAAK,IAAI7J,KAAQ7I,EAAM6K,UAAW6H,GAAyB,MAAT7J,GAAyB,MAATA,EAAeA,EAAO/D,EAAM2N,QAAQ5J,EAAM4B,GAG5G,IAAIjD,EAAOxH,EAAMwH,KAAOxH,EAAMwH,KAAKkB,QAAQ,YAAa,OAAOA,QAAQ,YAAa,OAAS1I,EAAM6K,UAGnG,MAAO,0BAA4BqH,GAAc,KAAO,MAAQM,EAAU,IAAM/H,EAAe,IAAMiI,EAAe,IAAM5H,EAAUnB,KAAK,KAAO,IAAMnC,EAAO,OAC7J,MAAO1B,GACP,MAAM,IAAI8L,EAAkB,UAAY/R,KAAKE,UAAUC,GAAS,KAAO8F,EAAE8B,WClF/E,IAAIpB,EAAQ,QAECmM,EACX7K,YAAaF,GACX7I,KAAK6I,QAAUA,EAGjBE,WACE,MAAO,iBAAmB/I,KAAK6I,eAItBgL,EAEX9K,oBAAqB9H,EAAOyD,EAASoP,GACnC,IAAIC,KACJ,IAAK,IAAIzE,KAAKvJ,EAAMiO,aAAa/S,EAAOyD,GACtCqP,EAAYzS,MAAMgO,EAAEnD,KAAO,IAAM2H,EAAYxE,EAAEhE,MAAQ,IAAMgE,EAAErD,QAEjE,MAAO,IAAM8H,EAAYnJ,KAAK,KAAO,IAGvC7B,mBAAoBrI,EAAMuT,EAASC,GACjC,IAAIC,EAAS,GAsBb,OAnBIzT,EAAK0K,KAAM+I,GAAUpO,EAAMsF,aAAa3K,EAAKsF,UAAY,OAI3DmO,GAAUzT,EAAKO,MAAQ8E,EAAMsF,aAAa3K,EAAKsF,UAAYD,EAAMsF,aAAa3K,EAAKsF,UAAU2D,QAAQ,4BAA6B,SAG9HjJ,EAAKqO,OAAMoF,GAAU,KAGzBA,GAAWzT,EAAKO,MAAkB4S,EAAOO,aAAa1T,EAAKO,MAAOP,EAAKgE,QAAS,GAAxD,QAGpBuP,GAAWvT,EAAKsO,MAAME,QAAuC,IAA7BxO,EAAKsO,MAAME,OAAO9N,SAAc+S,GAAUzT,EAAKsO,MAAME,QAGrFgF,GAAWxT,EAAKsO,MAAMG,SAAQgF,GAAU,QAAUD,EAAU,OAG3DC,EAGTpL,mBAAoBnJ,EAAW4P,EAAQ3P,EAAOoU,EAASC,EAASG,EAAUC,EAAIC,EAAUzI,GACtF,IAAIqI,EAAS,GACT5G,EAAc3N,EAAU2N,YAE5BhF,QAAQkE,IAAI,YAAc8H,EAAW,YAAc,KAAOzI,EAAY,aAAe,IAAM,cAAgBjM,EAAMuB,OAAS,UAG1H+S,GAAU,wBAA0BI,EAAW,OAAS,SAAW,eAAiBzI,EAAY,OAAS,SAAW,KACpHqI,GAAU,UAAYvU,EAAU4U,OAAS,QAAU5U,EAAU+B,UAAUoL,IAAM,SAAWnN,EAAU+B,UAAUqL,KAAKG,OAAS,KAGtHkH,GAAuB,IAAX7E,IAAc2E,GAAU,SAAWG,EAAK,yBAA2BD,EAAW,OAE9FF,GAAU,SAGN3E,EAASjC,GAAgB,IAAG4G,GAAsB,IAAX3E,EAAe,MAAQ,KAGlE,IAAK,IAAI9O,KAAQb,EACfsU,GAAUN,EAAOY,YAAY/T,EAAMuT,EAASC,GAC5C1E,GAAU9O,EAAKsF,SACXtF,EAAKgU,cAAgBlF,EAASjC,GAAgB,GAAGhF,QAAQC,KAAK,0BAA4BzC,EAAMkK,cAAc1C,EAAciC,EAASjC,GAAe,UACpJiC,EAASjC,GAAgB,IAAG4G,GAAUzT,EAAKgU,aAAe,MAAQ,KAGxE,OAAOP,EAAS,KAGlBpL,mBAAoB4L,EAAYpH,EAAaiC,EAAQoF,EAAeC,EAAGC,GACrE,IAAI1P,EAAO,GAGX,IAAK,IAAI8K,KAASyE,EAAY,CAC5B,GAAIzE,EAAMV,QAAUA,EAASoF,EAAe,MAC5C,GAAI1E,EAAMV,QAAUA,EAAQ,CAC1B,IAAIuF,EAAO,YAAcF,EAAI,UAAYC,EAGrCtF,EAASjC,GAAgB,IAAGwH,GAAQ,MAGxC,IAAIC,EAAM9E,EAAMV,OAASA,EACzB,KAAOwF,EAAM,GAAG,CAEd,IAAIlK,EAAIiF,KAAKsB,IAAI2D,EAAKzH,EAAeiC,EAASjC,GAC9C,IAAK,IAAIvC,KAAQjF,EAAMkK,cAAcnF,GAAIiK,GAAQ,IAAM/J,EAAO,MACzDwE,EAAS1E,GAAKyC,GAAgB,IAAGwH,GAAQ,MAG9CC,GAAOlK,EAIT,IAAImK,EAAYzF,EAASoF,EAAgB1E,EAAMV,OAC/C,IAAK,IAAIxE,KAAQjF,EAAMkK,cAAcgF,GAAY,CAAEF,GAAQ,IAAM/J,EAAO,KAAOkF,EAAM9K,KAAKuE,QAAQ,MAAO,KAAO,KAAM,MAGtHvE,GAAQ2P,EAAKpL,QAAQ,SAAU,IAAM,MAIzC,OAAOvE,EAGT2D,wBAAyBnJ,GACvB,IAAIuU,EAAS,GACTlU,EAAY,EAChB,IAAK,IAAIC,KAAQN,EAAUO,eACc,IAA5BP,EAAUQ,eAA6D,OAA5BR,EAAUQ,eAA0BR,EAAUQ,gBAAkBH,IACpHkU,GAAUN,EAAOqB,YAAYtV,EAAWM,EAAMD,GAAa,MAE7DA,IAEF,OAAOkU,EAGTpL,mBAAoBnJ,EAAWM,EAAMD,GACnC,IAAIkV,EAAQvV,EAAUgN,KAAKV,QAAQ,MAAQ,EACvCkJ,EAAsC,MAAzBxV,EAAUiN,WACvBU,EAAc3N,EAAU2N,YAExB4G,EAAS,iBAAmBvU,EAAU+B,UAAU0T,MAAQ,4BAA8BF,EAAQ,OAAS,SAAW,2BACtHlV,EAAYA,GAAa,EAEzB,IAAI2U,EAAgB,EAChB/U,KACAyV,KAEJ/M,QAAQkE,IAAI,oBAAsBxM,EAAY,GAAK,KAAOC,EAAKuI,KAAO,KAGtE0L,GAAU,kBAAoBlU,EAAY,GAAiC,OAA5BL,EAAUQ,cAAyB,GAAK,IAAM,KAG7F,IAAImV,KACJ,GAAIrV,EAAK0P,OAAQ,IAAK,IAAIM,KAAShQ,EAAK0P,OAAQ2F,EAAajU,MAAOkO,OAAQU,EAAMV,OAAQpK,KAAM8K,EAAM9K,MAAQqC,EAAQ,IAAMyI,EAAMlK,SAAW,MAG7I,IAAIwJ,EAAS,EACTgG,KACJ,IAAK,IAAInV,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIC,KAAOH,EAAOI,KACrB,IAAK,IAAImR,KAAepR,EAAIwN,aAAqB,OAC/CwH,EAAYlU,MAAOkO,OAAQA,EAAQpK,KAAMwM,EAAY3Q,MAAMwH,MAAQhB,EAAQ,IAAMmK,EAAY5L,SAAW,MACxGwJ,GAAUoC,EAAY5L,SAM5BwJ,EAAS,EACT,IAAIiG,KACJ,IAAK,IAAIpV,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIC,KAAOH,EAAOI,KACrB,IAAK,IAAIC,KAAQF,EAAIG,OAAOC,cACtBF,EAAKsO,MAAMjD,UAAW0J,EAAgBnU,MAAOkO,OAAQA,EAAQpK,KAAM1E,EAAKsO,MAAMjD,UAAUrC,gBACnFhJ,EAAKsO,MAAME,QAAuC,IAA7BxO,EAAKsO,MAAME,OAAO9N,QAAcqU,EAAgBnU,MAAOkO,OAAQA,EAAQpK,KAA4B,OAAtB1E,EAAKsO,MAAME,OAAkB,IAAM,MAC9IM,GAAU9O,EAAKsF,SAMrBwJ,EAAS,EACT,IAAIkG,KACJ,IAAK,IAAIrV,KAAUH,EAAKI,KAAKC,QAC3B,IAAK,IAAIC,KAAOH,EAAOI,KACrB,IAAK,IAAIC,KAAQF,EAAIG,OAAOC,cACtBF,EAAKsO,MAAMI,IAAIsG,EAASpU,MAAOkO,OAAQA,EAAQpK,KAAM,OACzDoK,GAAU9O,EAAKsF,SAMrBwJ,EAAS,EACT,IAAIzB,EAAc,EAClB,IAAK,IAAI1N,KAAUH,EAAKI,KAAKC,QAAS,CACpCgI,QAAQkE,IAAI,aAAesB,EAAc,IACzC,IAAI4H,EAAmB5H,IAAgB7N,EAAKI,KAAKC,QAAQa,OAAS,EAG9D+M,EAAW,EACf,IAAK,IAAI3N,KAAOH,EAAOI,KAAM,CAC3B8H,QAAQkE,IAAI,YAAc0B,EAAW,IACrC,IAAIyH,EAAkBzH,IAAa9N,EAAOI,KAAKW,OAAS,EAGpDyU,EAAY,EAChB,IAAK,IAAInV,KAAQF,EAAIG,OAAOC,cAAe,CAEzC,IAAIkV,EAAahV,KAAKC,MAAMD,KAAKE,UAAUN,IAC3CoV,EAAWpB,aAAekB,GAAmBC,IAAcrV,EAAIG,OAAOC,cAAcQ,OAAS,EAC7FkU,EAAahU,KAAKwU,GAGlB,IAAIC,EAAoBjV,KAAKC,MAAMD,KAAKE,UAAU8U,IAElD,GADAC,EAAkB9U,MAAQT,EAAIU,OAAOR,EAAKS,mBACrC4U,EAAkB9U,MAAO,MAAM,IAAI2S,EAAgB,mCAAqClT,EAAKS,iBAAmB,IACrHtB,EAAMyB,KAAKyU,GAGXnB,GAAiBlU,EAAKsF,SACtB,IAAIgQ,EAAWL,GAAoBG,EAAWpB,aAC9C,GAAIE,GAAiBhV,EAAUkN,YAAcS,GAAeyI,EAAU,CAMpE,GALAzN,QAAQkE,KAAKuJ,EAAW,MAAQ,OAAS,MAAQpB,EAAgB,mBAAqB/U,EAAMuB,OAAS,gBAAkBxB,EAAUgN,KAAKxL,OAAS,EAAI,IAAM,KAKrJxB,EAAUgN,KAAKV,QAAQ,MAAQ,EAAG,CACpC,IAAI+H,EAAUrU,EAAUgN,KAAKV,QAAQ,KAAO,EAC5CiI,GAAUN,EAAOoC,YAAYrW,EAAW4P,EAAQ8F,EAAcrB,EAAS,MAAO/T,EAAKuI,MAAO,GAAG,GAAM,GAC/FwL,GAAWwB,EAAgBrU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYT,EAAiBlI,EAAaiC,EAAQoF,EAAe,GAAI,mBAC7HQ,GAAcG,EAAanU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYX,EAAchI,EAAaiC,EAAQoF,EAAeX,EAAU,GAAK,GAAI,oBACzIuB,EAAYpU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYV,EAAajI,EAAaiC,EAAQoF,EAAe,EAAG,oBAC7GT,GAAU,kBAAoBF,EAAU,GAAK,IAAM,KAMjDrU,EAAUgN,KAAKV,QAAQ,MAAQ,IAC7BiJ,IAAOhB,GAAU,sBACrBA,GAAUN,EAAOoC,YAAYrW,EAAW4P,EAAQ3P,GAAO,GAAM,EAAOD,EAAUgN,KAAKV,QAAQ,KAAO,GAAIhM,EAAKuI,KAAc0M,GAAS,GAAK,GAAG,GAAO,GAC7IM,EAAgBrU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYT,EAAiBlI,EAAaiC,EAAQoF,EAAe,GAAI,mBAClHc,EAAStU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYR,EAAUnI,EAAaiC,EAAQoF,EAAe,GAAI,mBACpGhV,EAAUgN,KAAKV,QAAQ,KAAO,GAAKkJ,GAAcG,EAAanU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYX,EAAchI,EAAaiC,EAAQoF,EAAe,GAAI,oBAC7JhV,EAAUgN,KAAKV,QAAQ,KAAO,GAAKsJ,EAAYpU,OAAS,IAAG+S,GAAUN,EAAOqC,YAAYV,EAAajI,EAAaiC,EAAQoF,EAAeO,GAAS,EAAI,EAAG,oBAC7JhB,GAAU,kBAAoBvU,EAAUgN,KAAKV,QAAQ,KAAO,GAAK,IAAM,MAIzEiI,GAAU,qBAGV3E,GAAUoF,EAGV/U,KACAyV,KACAV,EAAgB,EAIlBiB,IAIF1H,IAIFJ,IAGF,OAAOoG,ggg5BC3QX7O,IACE6Q,aACAC,mBACAC,iBACAC,kBACAC,mBACAC,oBACAC,cACAC,kBACAC,wBACAC,kBACAC,kBACAC,mBACAC,yBACAC,sBACAC,sBACAC,0BACAC,sBACAC,yBACAC,wBACAC,qBACAC,oBACAC,iBACAC,iBACAC,sBACAC,iBACAC,mBACAC,iBACAC,kBACAC,kBACAC,qBACAC,sBACAC,qBACAC,oBACAC,sBACAC,2BACAC,iBACAC,iBACAC,0BACAC,eACAC,kBACAC,uBACAC,mBACAC,oBACAC,oBACAC,yBACAC,+BACAC,mBACAC,sBACAC,wBACAC,qBACAC,6BChDW7X,GACXuH,YAAapJ,EAAUE,EAAOyZ,GAC5BtZ,KAAK+E,YAAc,EACnB/E,KAAK8E,UAAY,EACjB9E,KAAK6E,YAAc,GAEnByU,EAASA,OACF3X,UAAY2X,EAAO3X,cAC1B2X,EAAO3X,UAAUqL,KAAOsM,EAAO3X,UAAUqL,SAGzChN,KAAKL,SAAWA,EAGhBK,KAAKH,MAAQA,EAGbG,KAAKF,KAAOwZ,EAAOxZ,OAAQ,EAC3BE,KAAK8B,OAASwX,EAAOxX,QAAU,KAC/B9B,KAAKiC,YAAcqX,EAAOrX,aAAe,aAGzCjC,KAAKyB,KAAO6X,EAAO7X,MAAQ,EAC3BzB,KAAKqV,MAAQiE,EAAO3X,UAAU0T,OAAS,IACvCrV,KAAKkN,YAAcoM,EAAO3X,UAAUqL,KAAKE,aAAe,EACxDlN,KAAKiN,aAAeqM,EAAO3X,UAAUqL,KAAKC,cAAgB,KAC1DjN,KAAK8F,UAAUwT,EAAO3X,UAAUmE,SAAUC,EAAMC,SAASsT,EAAO3X,UAAUmE,SAG1E9F,KAAKwU,OAAS8E,EAAO9E,SAAW,OAC9B,OACA,IACA,OACA,IACA,OAIFxU,KAAKuZ,SAAU,EACfvZ,KAAK4D,QAAS,EAGd5D,KAAKyD,MAAM,KACXzD,KAAK0F,SAAS,GACd1F,KAAK6F,UAAU,IACf7F,KAAKiF,QAAQjF,KAAK6E,aAClB7E,KAAKuF,QAAQ+T,EAAO1X,MAAQ,SAG9BmH,oBAAqByQ,GACnB,IAAIC,EAAsB,iBAAXD,EAAsBA,EAAS,GAE1CE,EAAQ,IAAIC,aADD,OAEXC,EAAM7J,KAAK8J,GAAK,IACpB,IAAK,IAAIxS,EAAI,EAAGA,EAHD,QAGiBA,EAAG,CACjC,IAAIkM,EAAQ,EAAJlM,EAJK,MAIc,EAC3BqS,EAAMrS,IAAM,EAAIoS,GAAKlG,EAAI,GAAKqG,GAAO7J,KAAK8J,GAAKJ,EAAI1J,KAAK+J,IAAIvG,IAE9D,OAAOmG,EAUT3Q,MAAOiE,EAAMhH,EAAU+T,EAAWnU,EAAQH,EAAY7D,EAAMoY,GAC1D,IAAIra,EAAWK,KAAKL,SAChBsa,EAAWta,EAASua,aAGxB,GAFAD,EAASE,KAAKlT,MAAQrB,EAElBH,EAAY,CACd,IAAI2U,EAAYza,EAAS0a,mBACzBD,EAAUV,MAAQ1Z,KAAKsa,oBAAoB5Y,SAAS+D,EAAY,KAChE2U,EAAUG,WAAa,KACvBH,EAAUI,QAAQ7a,EAAS8a,aAC3BR,EAASO,QAAQJ,QACZH,EAASO,QAAQ7a,EAAS8a,aAEjC,IAAIC,EAAa/a,EAASgb,mBAC1BD,EAAWF,QAAQP,GAEnBS,EAAWX,UAAU9S,MAAQ8S,EAC7BW,EAAWV,QAAUA,EAGjB1U,GAAW1D,GAAO8Y,EAAWE,gBAAgBjb,EAASkb,mBAAmBvV,GAAW1D,GAAMkZ,KAAMxV,GAAW1D,GAAMmZ,OAChHL,EAAW9Y,KAAOA,EAEvB8Y,EAAWM,MAAMhO,GACjB0N,EAAWtW,KAAK4I,EAAOhH,GAGzB+C,kBAAmB9H,EAAOyD,EAASoP,GACjC,IAAImH,KACJ,IAAK,IAAI3L,KAAKvJ,EAAMiO,aAAa/S,EAAOyD,GACjC4K,EAAEnD,MAAM8O,EAAM3Z,KAAKtB,KAAKwU,OAAOlF,EAAErD,OAAS,GAAK8D,KAAKmL,IAAInL,KAAKmL,IAAI,EAAG,EAAI,IAAKpH,EAAYxE,EAAEhE,OAElG,OAAO2P,EAGTlS,IAAKrI,GAEH,IAAIya,EAAMza,EAAKsF,SAAWhG,KAAKob,UAQ/B,OALIpb,KAAK8F,SAAWpF,EAAKsF,WAAahG,KAAK8F,UACrCpF,EAAK8O,QAAU,EAAIxP,KAAK8F,UAAa,EAAGqV,GAAO,OAC9CA,GAAO,OAGPA,EAGTpS,MAAOiE,GACL,IAAIrN,EAAWK,KAAKL,SACpB,IAAII,EAAOC,KAGX,GAAIA,KAAKuZ,SAAWvZ,KAAK4D,OAEvB,OADA5D,KAAKqb,aAAc,GACZ,EAIT,IAAKrb,KAAKH,MAAO,OAAO,EACxB,IAAIa,EAAOV,KAAKH,MAAMG,KAAK6V,WAC3B,IAAKnV,EAAM,OAAO,EAElB,IAAI4a,EAAwB,IAAhB5a,EAAK8O,OACb+L,EAAS7a,EAAK8O,OAASzJ,EAAMC,SAAShG,KAAKiN,eAAkB,EAC7DuO,EAA6B,MAAtB9a,EAAKsO,MAAME,QAAwC,OAAtBxO,EAAKsO,MAAME,OAC/CuM,EAA+B,MAAtB/a,EAAKsO,MAAME,QAAwC,OAAtBxO,EAAKsO,MAAME,OACjDwM,EAAgBhb,EAAKsO,MAAME,QAAuC,IAA7BxO,EAAKsO,MAAME,OAAO9N,OAGvDua,EAAKjb,EAAKqO,KAAO,EAAI/O,KAAKmb,IAAIza,GAGlC,IAAK,IAAIkb,EAAgB5b,KAAK6V,UAAY,EAAG+F,EAAgB5b,KAAKH,MAAMuB,QAAUpB,KAAKH,MAAM+b,GAAe7M,KAAM6M,IAAiBD,GAAM3b,KAAKmb,IAAInb,KAAKH,MAAM+b,IAG7J,IAAIhW,EAAiB5F,KAAK4F,OAAS,IAAtB,IACTlF,EAAKsO,MAAMG,SAAQvJ,GAAU,KAC7BlF,EAAK0K,OAAMxF,EAAS,GAGxB,IAAIqV,GAAS,KACTK,EAAOL,EAAM,IAAM,EACdM,IAAQN,EAAM,IAAM,KAG7B,IAAIha,EAAQjB,KAAK4M,OAAS5M,KAAK+E,YAAc,KAAOrE,EAAKO,MAIrD4a,EAAe5a,EAASP,EAAKqO,KAAO4M,EAAU,GAALA,EAAa5L,KAAKsB,IAAIsK,EAAI,GAGnE/Z,EAAOX,EAAQjB,KAAK4B,KAAO,SAC3B6D,EAAaxE,EAAQjB,KAAKyF,WAAa,KAGvCxE,GAASP,EAAKgE,UAEhBuW,EAAQjb,KAAK8b,kBAAkB7a,EAAOjB,KAAK4M,OAAS5M,KAAK8E,UAAYpE,EAAKgE,QAAQiF,QAAQ,MAAO,KAAOjJ,EAAKgE,QAAS1E,KAAKyB,MAGvH+Z,IAAMP,EAAQA,EAAMc,WAMpB/b,KAAK4M,OAAS5M,KAAK8E,YAAWc,GAAU,IAI9C5F,KAAK6V,WAAa7V,KAAK6V,UAAY,GAAK7V,KAAKH,MAAMuB,OAGnD,IAAI4a,EAAOtb,EAAK0K,KAAO,OAAU1K,EAAKqO,KAAO,OAAU9N,EAAQA,EAAMwH,KAAO,IAAMwS,EAAM7Z,OAAS,KAAOqa,EAAS,IAAM,KAAOD,EAAO,IAAM,IAAM,OAC7I3S,GAAWyS,EAAQ,QAAU,OAAS,IAAMU,EAAO,KAAKC,OAAO,GAAI,MAAQvb,EAAK8O,OAASzJ,EAAMsF,aAAa3K,EAAKsF,WAAWiW,OAAO,EAAG,KAAO,IAAMN,EAAG7K,QAAQ,GAAK,YAAwB,IAATlL,EAAgB,MAAQ0V,EAAQ,SAAYC,EAAS,UAAY,KAAQ7a,EAAKsO,MAAMG,OAAS,YAAc,IAIjS,GAHAhI,WAAW,WAAcoB,QAAQ2T,KAAKrT,IAAuD,IAA3CkH,KAAKO,IAAI,EAAGtD,EAAOrN,EAASwc,cAG1Ezb,EAAKqO,KAEP,YADAhP,EAAKqc,MAAMpP,GAKb,IAAIqP,EAAS,EACTrV,EAAQ,EACZ,IAAK,IAAI+S,KAAakB,EAEpBjb,KAAKsc,MAAMtP,EAAOhG,EAAQ,KAAS6U,EAAe7U,GAAS,IAAQ+S,EAAWnU,EAAQH,EAAY7D,EAAMya,EAASpB,EAAM7Z,OAAS,EAAI,KAAO,WAElH,IAAnBrB,EAAK8V,WAAoB9V,EAAKD,KAG3BC,EAAKqc,MAAMpP,EAAO2O,EAAK,MAF5B5b,EAAKqE,OACDrE,EAAK+B,QAAQ/B,EAAK+B,YAM1BkF,GAAU0U,EAAgC,IAAfG,EAAuBZ,EAAM7Z,OAAUV,EAAKqO,KAAO,EAAI,GAGlFnJ,GAAU,IAEVyW,IAIJtT,OACE/I,KAAKuZ,SAAU,EACfvZ,KAAK4D,QAAS,EACV5D,KAAKuc,KACPC,aAAaxc,KAAKuc,IAClBvc,KAAKiC,eAIT8G,QACE/I,KAAKuZ,SAAU,EACfvZ,KAAK4D,QAAS,EACV5D,KAAKuc,KACPC,aAAaxc,KAAKuc,IAClBvc,KAAKiC,eAIT8G,KAAM0T,GACJ,IAAI9c,EAAWK,KAAKL,SAChBI,EAAOC,KAOX,GALKA,KAAK4D,SAAQ5D,KAAK6V,UAAY,GACnC7V,KAAKuZ,SAAU,EACfvZ,KAAK4D,QAAS,EAEd5D,KAAKiC,YAAYwa,GACbA,EAAWzc,KAAKuc,GAAKpV,WAAW,WAAcpH,EAAK4D,KAAK8Y,EAAY,IAAM,SACzE,CAEH,IAAIjN,EAAS,EACb,IAAK,IAAI9O,KAAQV,KAAKH,MACpBa,EAAK8O,OAASA,EACdA,GAAUA,EAAS9O,EAAKsF,WAAahG,KAAKkN,YAAcnH,EAAMC,SAAShG,KAAKiN,eAG9EjN,KAAKoc,MAAMzc,EAASwc,cAIxBpT,SACE,GAAI/I,KAAKuZ,QAAS,OAElB,GAAIvZ,KAAK4D,OAEP,YADA5D,KAAK6V,UAAY,GAInB,IAAI9V,EAAOC,KACXA,KAAKqb,aAAc,EACnBrb,KAAKoE,OACL,IAAIsY,EAAS,WACP3c,EAAKsb,YAAatb,EAAK4D,OACtBwD,WAAWuV,EAAQ,MAE1BA,IAGF3T,WACE,OAAQ/I,KAAKqV,MAAQrV,KAAKkD,SAAW,KAAO4N,QAAQ,GAGtD/H,MAAO4T,GACL,GAAIA,EAAM,EAAG,MAAM,IAAItb,MAAM,6BAA+Bsb,GAE5D3c,KAAKkD,SAAWyZ,EAGhB,IAAIC,EAAY,KAAS5c,KAAKqV,MAAQrV,KAAKkD,SAAW,KACtDlD,KAAKob,UAAYwB,EAAY7W,EAAMC,SAAShG,KAAKiN,cACjD1E,QAAQ2T,KAAK,kBAAoBU,EAAY,cAG/C7T,QAASsJ,GACPrS,KAAKyD,MAAMsM,KAAKsB,IAAI,IAAKrR,KAAKkD,SAAWmP,IAG3CtJ,SAAUsJ,GACRrS,KAAKyD,MAAMsM,KAAKO,IAAI,GAAItQ,KAAKkD,SAAWmP,IAG1CtJ,QAAS6D,GACP5M,KAAK4M,KAAOlL,SAASkL,EAAM,IAC3BrE,QAAQ2T,KAAK,uBAAyBtP,GAGxC7D,QAASnH,GACP5B,KAAK4B,KAAOA,EACZ2G,QAAQ2T,KAAK,uBAAyBta,GAGxCmH,SAAU+B,GACR9K,KAAKyF,WAAa/D,SAASoJ,EAAG,IAC9BvC,QAAQ2T,KAAK,wBAA0BpR,GAGzC/B,UAAW0B,GACTzK,KAAK4F,OAASlE,SAAS+I,EAAG,IAC1BlC,QAAQ2T,KAAK,yBAA2BzR,IP1T5C,IAAInI,GAAIqE,OAAOkW,OAqJfnd,EAASod,UAAUC,IAAM,WACvB,OAAO/c,KAAKqC,ms1CCrJd,IAAI1C,GAAW,IAAKgH,OAAOqW,cAAgBrW,OAAOsW,oBAAsBtW,OAAOuW,cAI3E5a,GAAIqE,OAAOkW,OAIXhJ,GAASlN,OAAOkN,OAChBsJ,GAASxW,OAAOwW,OAChBC,GAAMzW,OAAOyW,IAEb3V,GAAQ,EACR4V,GAAe1W,OAAO0W,aACtBlV,GAAW,KAEfgV,GAAOG,QAAS,EAsShB,IAAIC,GAAM,IAAI5W,OAAO6W,gBAAgB7W,OAAOgB,SAAS8V,QACrD,IAAIC,GAAU/W,OAAO+W,SAAWhc,SAAS6b,GAAIA,IAAI,QAAS,KAAO,GAAK,EAClEI,GAAKC,GAAQF,IACjBC,GAAGhQ,GAAK+P,GAAU,EAElBG,SAASnL,MAAQiL,GAAGjL,MAAQ,MAAQmL,SAASnL,MAC7CpQ,GAAE,YAAYF,KAAKub,GAAGjL,OACtBpQ,GAAE,YAAYF,KAAKub,GAAGG,OAAS,KAAOH,GAAGI,MACzCzb,GAAE,kBAAkBF,KAAK,UAAYub,GAAGhc,UAAU0T,MAAQ,QAC1D/S,GAAE,WAAWF,KAAKub,GAAGzK,SAErB5Q,GAAE,iBAAiBF,KAAK,UAAYub,GAAGlc,KAAO,EAAIkc,GAAGlc,KAAO,QAC5Da,GAAE,mBAAmBF,KAAK,WAAaub,GAAGnJ,QAE1ClS,GAAE,yBAAyBC,IAAI,kBAAmB,aAAaA,IAAI,YAAa,SAASA,IAAI,SAAU,aAEvG,IAAIuK,GAAcyQ,GAAIA,IAAI,eAAiB7b,SAAS6b,GAAIA,IAAI,eAAgB,IAAOI,GAAG7Q,aAAe,EACjGkR,GAAkC,IAApB1b,GAAEqE,QAAQsX,QAExBC,GAAUnO,KAAKO,IAAkB,IAAdxD,GADN,KAEbqR,GAAUpO,KAAKO,IAAkB,IAAdxD,GAFN,KAGjB,IAAIsR,GAAarO,KAAKsB,IAAI8M,GAASpO,KAAKO,IAAI4N,GAASF,KACjDK,GAActO,KAAKsB,IAAI,IAAKtB,KAAKO,IAAI,IAAyB,IAApBhO,GAAEqE,QAAQsX,UACxD3b,GAAE,UAAUC,IAAI,QAAS6b,GAAa,MAEtC,IAAIE,GAAW,EACf,IAAK,IAAIC,MAAOX,GAEdtb,GAAE,UAAU+B,OAAO/B,GAAE,0FAA0F6C,KAAK,MAAOmZ,IAAUlc,KAAKmc,GAAI7L,MAAQ,KAAO6L,GAAIT,OAAS,KAAOS,GAAIR,KAAO,MAAM1Z,OAAO,SACzMia,MApSF,SAAoB1e,EAAW4e,EAAWC,EAAYC,EAAWC,EAAeC,EAAYC,EAAaT,EAAYjL,EAAY2L,GAC/H,IAAIvB,EAAM,IAAI5W,OAAO6W,gBAAgB7W,OAAOgB,SAAS8V,QACrDhW,GAAQ/F,SAAS6b,EAAIA,IAAI,SAAU,KAAO9V,GAE1C2W,EAAaA,GAAc,IAC3BjL,EAAaA,GAAc,IAE3B,IAAI4L,EAASP,EAAU,GACvBO,EAAOC,WAAW,MAGlBpf,EAAUqf,MAAQrf,EAAUqf,OAAS,IACrCrf,EAAUgN,KAAOhN,EAAUgN,MAAQ,KACnChN,EAAUiN,WAAajN,EAAUiN,YAAc,IAC/CjN,EAAUsf,SAAWtf,EAAUsf,UAAY,IAC3Ctf,EAAUkN,YAAclN,EAAUkN,aAAe,EACjDlN,EAAU+I,WAAmC,IAApB/I,EAAU+I,MAAwB,EAAI/I,EAAU+I,MACzE/I,EAAUgJ,gBAA6C,IAAzBhJ,EAAUgJ,WAA6B,EAAIhJ,EAAUgJ,WACnFhJ,EAAUuf,gBAA6C,IAAzBvf,EAAUuf,WAA6B,EAAIvf,EAAUuf,WACnFvf,EAAUwf,YAAcxf,EAAUwf,aAAe,UAGjDxf,EAAUgN,KAAO2Q,EAAIA,IAAI,SAAW3d,EAAUgN,KAC9ChN,EAAUiN,WAAa0Q,EAAIA,IAAI,eAAiB3d,EAAUiN,WAC1DjN,EAAUsf,SAAW3B,EAAIA,IAAI,aAAe3d,EAAUsf,SACtDtf,EAAUkN,YAAcyQ,EAAIA,IAAI,eAAiB7b,SAAS6b,EAAIA,IAAI,eAAgB,IAAM3d,EAAUkN,YAClGlN,EAAU+I,MAAQ4U,EAAIA,IAAI,SAAW7b,SAAS6b,EAAIA,IAAI,SAAU,IAAM3d,EAAU+I,MAChF/I,EAAUgJ,WAAa2U,EAAIA,IAAI,cAAgB7b,SAAS6b,EAAIA,IAAI,cAAe,IAAM3d,EAAUgJ,WAC/FhJ,EAAUuf,WAAa5B,EAAIA,IAAI,cAAgB7b,SAAS6b,EAAIA,IAAI,cAAe,IAAM3d,EAAUuf,WAC/Fvf,EAAUwf,YAAc7B,EAAIA,IAAI,gBAAkB3d,EAAUwf,YAG5Dxf,EAAUQ,cAAuC,MAAvBR,EAAUsf,SAAmB,KAAOnP,KAAKsB,IAAIzR,EAAUO,UAAUiB,OAAS,EAAGM,SAAS9B,EAAUsf,SAAU,KAChItf,EAAUQ,cAAgB,IAAGR,EAAUQ,cAAgB,MAC3DR,EAAUsf,SAAuC,OAA5Btf,EAAUQ,cAAyBR,EAAUQ,cAAgB,IAGlF,IACE+H,GAAW,IAAIoK,EAAS3S,EAAW6H,IACnC7H,EAAYuI,GAASwK,IACrB,MAAO5L,GAGP,OAFAyX,EAAUxW,SAAS3D,OAAO/B,GAAE,OAAOF,KAAK2E,EAAE8B,SAAStG,IAAI,QAAS,QAChEgG,QAAQO,MAAM/B,IACP,EAITzE,GAAE,UAAU+c,MAAM,WAChB/X,EAAG5F,SAASY,GAAEtC,MAAMmF,KAAK,OAAQ,IAAM,EAAGvF,KAI5C,IAAIK,EAAY,EAChB,IAAK,IAAIC,KAAQN,EAAUO,UAAWmC,GAAE,yBAAyB+B,OAAO/B,GAAE,YAAYW,IAAIhD,KAAamF,KAAKlF,EAAKuI,OAGjHnG,GAAE,UAAUgd,KAAK,WAEfhd,GAAEtC,MAAMiD,IAAIrD,EAAU0C,GAAEtC,MAAMmF,KAAK,UAGnC7C,GAAEtC,MAAMgF,OAAO,WACbpF,EAAU0C,GAAEtC,MAAMmF,KAAK,SAAW7C,GAAEtC,MAAMiD,MAC1CqE,EAAGX,OAAO+W,QAAU,EAAG9d,OAKvBA,EAAU+B,UAAUmE,SACtBxD,GAAE,kBAAkB+B,OAAO/B,GAAE,UAAUF,KAAK,iBAAmD,OAAhCxC,EAAU+B,UAAUmE,QAAmB,gBAAkBlG,EAAU+B,UAAUmE,QAAQyZ,OAAO,GAAK,cAI9H,OAAhC3f,EAAU+B,UAAUmE,SACtBxD,GAAE,kBAAkB+B,OAAO/B,GAAE,SAASC,KAAMM,eAAgB,OAAQob,MAAS,QAASrZ,QAAW,SAAU4a,iBAAkB,WAAYra,KAAK,MAAO,wBAIvJ,IAAK,IAAIlE,KAASrB,EAAUsB,OAAQ,CAClC,IAAI6R,EAAMtL,GAAQ,0BAA4BqL,EAASC,IAAI9R,EAAOkS,GAClE,IAAIsM,EAAQnd,GAAE,SAASC,KAAMqC,QAAW,eAAgB4a,iBAAkB,QAC1Ef,EAAWpa,OAAOob,GAClBA,EAAMpb,OAAO/B,GAAE,SAAS6C,KAAK,MAAO4N,GAAK5N,KAAK,QAASlE,EAAMiS,SAAS3Q,KAAMqC,QAAW,QAA8CqZ,MAAS9K,EAAa,QAC3JsM,EAAMpb,OAAO/B,GAAE,OAAOC,KAAM0b,MAAS9K,EAAa,KAAMxQ,YAAa,SAAU+c,aAAc,SAAUld,aAAc,QAASJ,KAAKnB,EAAMiS,UAI3I,IAAK,IAAI5S,KAAQV,EAAU0N,MAAO,CAChC,IAAIqS,EAAWrd,GAAE,SAASC,KAAMY,MAAS7C,EAAK6C,QAC1Cyc,EAAatd,GAAE,OACnBqd,EAAStb,OAAO/B,GAAE,OAAOC,KAAMK,cAAe,OAAQid,kBAAmB,SAAUC,gBAAiB,QAAS1d,KAAK9B,EAAKmI,OACvHkX,EAAStb,OAAOub,GAChBlB,EAAUra,OAAOsb,GAgIrB,SAAuB/f,EAAWU,EAAMsf,GAEtCA,EAAW5X,SAASnE,KAAK,qBAAqBoE,SAC9C2X,EAAWxd,KAAK,IAEhB,IAKEwd,EAAWvb,OAAO8D,GAAS4X,YAAYzf,EAAgC,YAA1BV,EAAUwf,YAA4B,EAAI,EAAGxf,EAAUuf,WAAY,UAAU,IAC1H,MAAOpY,GAEP6Y,EAAWtX,OAAOhG,GAAE,OAAO6D,SAAS,SAAS5D,IAAI,QAAS,OAAOH,KAAK,UAAY2E,EAAE8B,UACpFN,QAAQO,MAAM/B,IA7IdiZ,CAAapgB,EAAWU,EAAMsf,GAIhC,IAAK,IAAI1f,KAAQN,EAAUO,UACzBwe,EAActa,OAAO/B,GAAE,OAAOC,KAAMK,cAAe,OAAQqd,OAAU,UAAW9c,MAASjD,EAAKI,KAAK6C,QAASf,KAAK,IAAMlC,EAAKuI,KAAO,MAIrI,IAAK,IAAIvI,KAAQN,EAAUO,UAAW,CAEpC,IAAI+f,EAAQ,mBAAqBtgB,EAAU+N,GAAK,SAAWzN,EAAKuI,KAChEvI,EAAKyP,OAAS0N,GAAa8C,QAAQD,IAAUhgB,EAAKyP,OAGlD,IAAIyQ,EAAW9d,GAAE,SAASC,KAAMY,MAASjD,EAAKI,KAAK6C,QAC/Ckd,EAAY/d,GAAE,OAAOF,KAAK,QAAQG,IAAI,kBAAmB,aAAaA,IAAI,SAAU,WAAWA,IAAI,YAAa,UAAUA,IAAI,QAAS,SAASA,IAAI,eAAgB,QACpKwF,EAAczF,GAAE,OAAOC,IAAI,cAAe,QAC9C6d,EAAS/b,OAAO/B,GAAE,OAAOC,KAAMK,cAAe,OAAQid,kBAAmB,SAAUC,gBAAiB,MAAOtd,aAAc,SAAUJ,KAAK,IAAMlC,EAAKuI,KAAO,MAAMpE,OAAOgc,IACvKD,EAAS/b,OAAO0D,GAChB6W,EAAWva,OAAO+b,GAClBtY,EAAclI,EAAWM,EAAM6H,GAG/B,IAAIuY,EAAehe,GAAE,SACjBie,EAAaje,GAAE,OAAOF,KAAK,SAASG,IAAI,kBAAmB,aAAaA,IAAI,SAAU,WAC1F+d,EAAajc,OAAO/B,GAAE,cAAcC,IAAI,YAAa,OAAOA,IAAI,QAAS,SAASA,IAAI,SAAU,UAChG+d,EAAajc,OAAO,SAASA,OAAOkc,GACpC3B,EAAWva,OAAOic,EAAavc,QAG/B,IAAIyc,EAAgB,SAAUC,GAQ5B,GANAvgB,EAAKyP,OAASrN,GAAEtC,MAAMiD,MACtBoa,GAAaqD,QAAQR,EAAOhgB,EAAKyP,QAGjC7H,EAAclI,EAAWM,EAAM6H,GAE3B0Y,EAAc,CAEhB,IAAIE,EAAUre,GAAE,YAChBA,GAAEyc,GAAQ6B,MAAMD,GAAS1Y,SACzB8W,EAAS4B,EAAQ,GAGjB,IAAIE,EAAW,IAAIzD,GAAI0D,KAAKC,SAAShC,EAAQ3B,GAAI0D,KAAKC,SAASC,SAASC,QACpEnD,EAAS,IAAIX,GAAO,GAAI,GAAIiB,GAAca,MAAOrf,EAAUqf,QAC3D9K,EAAS,IAAIN,GAAOiK,GACxBvV,QAAQ2T,KAAK,oBACb/H,EAAOpT,MAAMmgB,EAAgBC,iBAAiBvhB,IAC9C2I,QAAQ2T,KAAK,sBACb4B,EAAOsD,OAAOP,GACdtY,QAAQ2T,KAAK,iBAKjBmE,EAAU7c,GAAG,QAAS,WACpB4c,EAASvc,KAAK,UACdyc,EAAaxc,OAAOD,KAAK,YAAYZ,IAAI/C,EAAKyP,QAAQ0R,UAIxDd,EAAW/c,GAAG,QAAS,WACrB8c,EAAavc,OACbyc,EAAc9Z,KAAK4Z,EAAazc,KAAK,YAAY,IAAI,KAIvD+C,EAAS0Z,EAAazc,KAAK,YAAY,GAAI,SAAUkD,GACnDwB,QAAQkE,IAAI,wBAA0B1F,EAAEnF,MACxC4e,EAAc9Z,KAAK1G,MAAM,KAK7B,IAAK,IAAIW,KAAUf,EAAUyN,QAAS,CACpC,IAAIiU,EAAahf,GAAE,SAOnB,GANAuc,EAAYxa,OAAOid,GAGnBA,EAAWhZ,OAAO,IAAI5I,EAASC,GAAUC,EAAWe,EAAOC,eAAe,GAAMmc,OAG5Epc,EAAOqF,SAAWpG,EAAU2N,YAAa,CAC3C,IAAIlF,EAAU,UAAY1H,EAAOgN,GAAK,+BAAiCoC,KAAKC,MAAMrP,EAAOqF,SAAWpG,EAAU2N,aAAe,eAAiBxH,EAAMkK,cAActP,EAAOqF,SAAWpG,EAAU2N,aAAe,kEAC7M+T,EAAWhZ,OAAOhG,GAAE,OAAO6D,SAAS,WAAW5D,IAAI,QAAS,UAAUH,KAAK,YAAciG,IAG3F,IACEE,QAAQ2T,KAAK,wCACb,IAAIxN,EAAQ,iBAAmB9O,EAAU+B,UAAU0T,MAAQ,wDAC3D3G,GAASwS,EAAgBjL,YAAYrW,EAAW,EAAGe,EAAOC,eAAe,EAAM,MAAO,WAAaD,EAAO8H,MAAQ9H,EAAOgN,IAAK,GAAG,GAAM,GAAS,oBAChJpF,QAAQ2T,KAAK,oBACb,IAAI4B,EAAS,IAAIX,GAAO,GAAI,GAAI2B,GAAgBG,MAAO,IAC1C,IAAIpL,GAAOiK,GACjB/c,MAAM2N,GACbnG,QAAQ2T,KAAK,sBACb4B,EAAOsD,OAAO,IAAIhE,GAAI0D,KAAKC,SAASO,EAAW,GAAIlE,GAAI0D,KAAKC,SAASC,SAASO,MAC9EhZ,QAAQ2T,KAAK,eACb,MAAOnV,GACPua,EAAWlf,KAAK2E,EAAE8B,SAAStG,IAAI,QAAS,OACxCgG,QAAQO,MAAM/B,IAKlBzE,GAAEyc,GAAQzW,OAAO,IAAI5I,EAASC,GAAUC,GAAWmd,OAGnD,IACExU,QAAQ2T,KAAK,2CACb,IAAIxN,EAAQwS,EAAgBC,iBAAiBvhB,GAC7C2I,QAAQ2T,KAAK,oBACb,IAAI4B,EAAS,IAAIX,GAAO,GAAI,GAAIiB,GAAca,MAAOrf,EAAUqf,QAClD,IAAIpL,GAAOiK,GACjB/c,MAAM2N,GACbnG,QAAQ2T,KAAK,sBACb4B,EAAOsD,OAAO,IAAIhE,GAAI0D,KAAKC,SAAShC,EAAQ3B,GAAI0D,KAAKC,SAASC,SAASC,SACvE1Y,QAAQ2T,KAAK,eACb,MAAOnV,GACPyX,EAAUxW,SAAS3D,OAAO/B,GAAE,OAAOF,KAAK2E,EAAE8B,SAAStG,IAAI,QAAS,QAChEgG,QAAQO,MAAM/B,IA+ElBnH,CAAU+d,GAAIrb,GAAE,UAAWA,GAAE,WAAYA,GAAE,UAAWA,GAAE,cAAeA,GAAE,WAAYA,GAAE,YAAa8b,GAAY,IAAKC,IACrH/b,GAAE,QAAQwB","sourcesContent":["import { Utils, Player, waveTables } from 'songcheat-core'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\nexport function PlayerUI (audioCtx, songcheat, notes, loop) {\n  var self = this\n\n  if (!notes) {\n    // whole song (or selected unit)\n    notes = []\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (songcheat.showUnitIndex !== null && songcheat.showUnitIndex !== unitIndex) { unitIndex++; continue }\n      for (let phrase of unit.part.phrases) {\n        for (let bar of phrase.bars) {\n          for (let note of bar.rhythm.compiledScore) {\n            let chordedNote = JSON.parse(JSON.stringify(note))\n            chordedNote.chord = bar.chords[note.placeholderIndex % bar.chords.length]\n            if (!chordedNote.chord) throw new Error('No chord found for placeholder ' + (note.placeholderIndex + 1))\n            notes.push(chordedNote)\n          }\n        }\n      }\n      unitIndex++\n    }\n  }\n\n  // create player\n  let player = new Player(audioCtx, notes, {\n    loop: loop,\n    capo: parseInt(songcheat.capo, 10),\n    signature: songcheat.signature,\n    type: songcheat.wave,\n    onDone: function () { $stopLink.trigger('click') },\n    onCountdown: function (c) { $countdownZone.html(c || '') }\n  })\n\n  // controls\n  this.$div = $('<div>').css({ 'margin-top': '10px', 'position': 'relative' })\n\n  let $speedMention = $('<span>').css({ 'font-size': '.9em', 'font-weight': 'bold', 'padding-left': '10px' })\n  let updateSpeed = function () {\n    $speedMention.html(player.getTempo() + ' bpm')\n    $tempoSlider.val(player.speedpct)\n  }\n  let $countdownZone = $('<span>').css({ 'font-size': '4em', 'font-weight': 'normal', 'color': 'red', 'text-shadow': '4px 4px 2px rgba(200, 150, 150, 1)', 'position': 'absolute', 'top': '10px', 'right': '10px' })\n\n  let $speed100Link = $('<a>').css({ 'padding-left': '10px' }).html('Original').on('click', function () {\n    player.speed(100)\n    updateSpeed()\n  })\n\n  let $playLink = $('<a>').html('&#9658;').on('click', function () {\n    player.play(player.paused || loop ? 0 : 3)\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $playLink.hide()\n  })\n\n  let $rewindLink = $('<a>').html('&#9668;').on('click', function () {\n    player.rewind()\n  })\n\n  let $pauseLink = $('<a>').html('&#10074;&#10074;').on('click', function () {\n    player.pause()\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $pauseLink.hide()\n  })\n\n  let $stopLink = $('<a>').html('&#9724').on('click', function () {\n    player.stop()\n    self.$div.find('.autohide').hide()\n    $speedMention.hide()\n    $playLink.show()\n  })\n\n  this.$div\n    .append($playLink)\n    .append($pauseLink)\n    .append($stopLink)\n    .append($rewindLink)\n    .append('&nbsp;&nbsp;')\n    .append($countdownZone)\n    .append('<hr class=\"autohide\" style=\"clear:both; border:1px solid #ccc\"/>')\n\n  let unique = Date.now()\n\n  // enable mode and type switch if at least one actual musical note found (with chords and strings to play)\n  let musicalSwitches = false\n  for (let note of notes) { if (note.chord && note.strings) { musicalSwitches = true; break } }\n  if (musicalSwitches) {\n    let $divMusicalSwitches = $(\"<div style='float:right'>\")\n    this.$div.append($divMusicalSwitches)\n\n    // mode switch\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '10px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_CHORDS + '\" checked>')).append(' Chords ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_BASS + '\">')).append(' Bass only ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_RHYTHM + '\">')).append(' Rhythm '))\n    this.$div.find('input[name=modeswitch' + unique + ']').change(function () { player.setMode($(this).val()) })\n\n    // type switch\n    let $typeSwitch = $('<select>')\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' }).append('Wave form: ').append($typeSwitch))\n    for (let type of ['sine', 'square', 'sawtooth', 'triangle']) $typeSwitch.append($('<option>').attr('selected', player.type === type).attr('value', type).text('(' + type + ')'))\n    for (let instrument in waveTables) $typeSwitch.append($('<option>').attr('selected', player.type === instrument).attr('value', instrument).text(instrument))\n    $typeSwitch.change(function () { player.setType($(this).val()) })\n\n    // disto slider\n    let $distoSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.distortion + '\" class=\"slider\" style=\"margin-top: 10px\">')\n    // $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append(\"Distortion: \").append($distoSlider));\n    $distoSlider.on('input', function () { player.setDisto(parseInt($(this).val(), 10)) })\n    $distoSlider.on('change', function () { player.setDisto(parseInt($(this).val(), 10)) })\n  }\n\n  // tempo slider\n  let $tempoSlider = $('<input type=\"range\" min=\"1\" max=\"200\" value=\"' + player.speedpct + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Tempo: ').append($tempoSlider).append($speedMention).append($speed100Link))\n  $tempoSlider.on('input', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n  $tempoSlider.on('change', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n\n  // volume slider\n  let $volumeSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.volume + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Volume: ').append($volumeSlider))\n  $volumeSlider.on('input', function () { player.setVolume(parseInt($(this).val(), 10)) })\n  $volumeSlider.on('change', function () { player.setVolume(parseInt($(this).val(), 10)) })\n\n  // allow to disable shuffle if song has a shuffle defined\n  if (songcheat.signature.shuffle) {\n    this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"on\" checked>')).append(' Shuffle On ')\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"off\">')).append(' Shuffle Off '))\n    this.$div.find('input[name=shuffleswitch' + unique + ']').change(function () {\n      player.shuffle = $(this).val() === 'on' ? Utils.duration(songcheat.signature.shuffle) : null\n    })\n  }\n\n  this.$div.find('a').css({ 'cursor': 'pointer', 'font-size': '1em', 'margin-right': '10px' }).addClass('autohide')\n\n  // initialize in stopped state\n  updateSpeed()\n  $stopLink.trigger('click')\n}\n\nPlayerUI.prototype.div = function () {\n  return this.$div\n}\n","import { Utils, Compiler, ChordPix, VexTab as SongcheatVexTab } from 'songcheat-core'\nimport { PlayerUI } from './src/player_ui.js'\nimport samples from 'songcheat-samples'\n\n// create audio context\nlet audioCtx = new (window.AudioContext || window.webkitAudioContext || window.audioContext)()\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// https://github.com/rollup/rollup/issues/1803/\n// import { VexTab, Artist, Vex } from 'vextab'\nlet VexTab = window.VexTab\nlet Artist = window.Artist\nlet Vex = window.Vex\n\nlet DEBUG = 0\nlet localStorage = window.localStorage\nlet compiler = null\n\nArtist.NOLOGO = true\n\nfunction addEvent (elem, event, fn) {\n  if (elem.addEventListener) return elem.addEventListener(event, fn, false)\n  elem.attachEvent('on' + event, function () { return (fn.call(elem, window.event)) })\n}\n\nfunction onChange (elem, fn, data) {\n  var priorValue = elem.value\n\n  function checkNotify (e, delay) {\n    // notify if actually changed\n    if (elem.value !== priorValue) {\n      priorValue = elem.value\n      fn.call(this, e, data)\n    } else {\n      // the actual data change happens after some events so we queue a check\n      if (delay) setTimeout(function () { checkNotify(e, false) }, 0)\n    }\n  }\n\n  var events = ['keyup', false, 'blur', false, /* \"focus\", false, */ 'drop', true, 'change', false, 'input', false, 'paste', true, 'cut', true, 'copy', true]\n  for (let i = 0; i < events.length; i += 2) addEvent(elem, events[i], function (e) { checkNotify.call(this, e, events[i + 1]) })\n}\n\nfunction go (song, songcheat) {\n  let data = { 'song': song, 'debug': DEBUG }\n  for (let p of ['mode', 'lyricsMode', 'showUnit', 'maxsp', 'barsPerLine', 'splitUnits', 'splitParts', 'partdisplay']) data[p] = songcheat[p]\n  window.location.href = 'index.html?' + Utils.encodeQueryData(data)\n}\n\nfunction songcheat (songcheat, $divScore, $divChords, $divParts, $divStructure, $divLyrics, $divRhythms, scoreWidth, chordWidth, rhythmsWidth) {\n  var get = new window.URLSearchParams(window.location.search)\n  DEBUG = parseInt(get.get('debug'), 10) || DEBUG // debug level\n\n  scoreWidth = scoreWidth || 800\n  chordWidth = chordWidth || 250\n\n  let canvas = $divScore[0]\n  canvas.getContext('2d')\n\n  // default values for mode, bars per line and scale\n  songcheat.scale = songcheat.scale || 0.92\n  songcheat.mode = songcheat.mode || 'rt'\n  songcheat.lyricsMode = songcheat.lyricsMode || 's'\n  songcheat.showUnit = songcheat.showUnit || '*'\n  songcheat.barsPerLine = songcheat.barsPerLine || 4\n  songcheat.maxsp = typeof songcheat.maxsp === 'undefined' ? 1 : songcheat.maxsp\n  songcheat.splitUnits = typeof songcheat.splitUnits === 'undefined' ? 0 : songcheat.splitUnits\n  songcheat.splitParts = typeof songcheat.splitParts === 'undefined' ? 4 : songcheat.splitParts\n  songcheat.partdisplay = songcheat.partdisplay || 'compact'\n\n  // settings that may be forced in GET\n  songcheat.mode = get.get('mode') || songcheat.mode\n  songcheat.lyricsMode = get.get('lyricsMode') || songcheat.lyricsMode\n  songcheat.showUnit = get.get('showUnit') || songcheat.showUnit\n  songcheat.barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : songcheat.barsPerLine\n  songcheat.maxsp = get.get('maxsp') ? parseInt(get.get('maxsp'), 10) : songcheat.maxsp\n  songcheat.splitUnits = get.get('splitUnits') ? parseInt(get.get('splitUnits'), 10) : songcheat.splitUnits\n  songcheat.splitParts = get.get('splitParts') ? parseInt(get.get('splitParts'), 10) : songcheat.splitParts\n  songcheat.partdisplay = get.get('partdisplay') || songcheat.partdisplay\n\n  // ensure showUnit is within the bounds\n  songcheat.showUnitIndex = songcheat.showUnit === '*' ? null : Math.min(songcheat.structure.length - 1, parseInt(songcheat.showUnit, 10))\n  if (songcheat.showUnitIndex < 0) songcheat.showUnitIndex = null\n  songcheat.showUnit = songcheat.showUnitIndex !== null ? songcheat.showUnitIndex : '*'\n\n  // compile\n  try {\n    compiler = new Compiler(songcheat, DEBUG)\n    songcheat = compiler.scc\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n    return false\n  }\n\n  // links to other songs\n  $('a[rel]').click(function () {\n    go(parseInt($(this).attr('rel'), 10) + 1, songcheat)\n  })\n\n  // build unit select\n  let unitIndex = 0\n  for (let unit of songcheat.structure) $('select[name=showUnit]').append($('<option>').val(unitIndex++).text(unit.name))\n\n  // for each user controlled setting\n  $('select').each(function () {\n    // initialize\n    $(this).val(songcheat[$(this).attr('name')])\n\n    // reload on change\n    $(this).change(function () {\n      songcheat[$(this).attr('name')] = $(this).val()\n      go(window.scIndex + 1, songcheat)\n    })\n  })\n\n  // shuffle\n  if (songcheat.signature.shuffle) {\n    $('#left h3:first').append($('<span>').html('<br/>Shuffle ' + (songcheat.signature.shuffle === ':4' ? 'quarter notes' : songcheat.signature.shuffle.substr(1) + 'th notes')))\n  }\n\n  // shuffle 8th image\n  if (songcheat.signature.shuffle === ':8') {\n    $('#left h3:first').append($('<img>').css({ 'padding-left': '50px', 'width': '100px', 'display': 'inline', 'vertical-align': 'bottom' }).attr('src', 'img/shuffle_8th.svg'))\n  }\n\n  // chord diagrams\n  for (let chord of songcheat.chords) {\n    var url = DEBUG ? 'img/missing_diagram.png' : ChordPix.url(chord, chordWidth)\n    let $cDiv = $('<div>').css({ 'display': 'inline-block', 'vertical-align': 'top' })\n    $divChords.append($cDiv)\n    $cDiv.append($('<img>').attr('src', url).attr('title', chord.comment).css({ 'display': 'block' /* removes whitespace below image */, 'width': chordWidth + 'px' }))\n    $cDiv.append($('<p>').css({ 'width': chordWidth + 'px', 'font-size': '0.85em', 'text-align': 'center', 'margin-top': '0px' }).html(chord.comment))\n  }\n\n  //  ascii parts\n  for (let part of songcheat.parts) {\n    let $divPart = $('<div>').css({ 'color': part.color })\n    let $partsZone = $('<p>')\n    $divPart.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '0px' }).html(part.name))\n    $divPart.append($partsZone)\n    $divParts.append($divPart)\n    displayParts(songcheat, part, $partsZone)\n  }\n\n  //  ascii structure\n  for (let unit of songcheat.structure) {\n    $divStructure.append($('<p>').css({ 'font-weight': 'bold', 'margin': '5px 0px', 'color': unit.part.color }).html('[' + unit.name + ']'))\n  }\n\n  //  ascii lyrics\n  for (let unit of songcheat.structure) {\n    // load from local storage\n    let lskey = 'SongCheatLyrics.' + songcheat.id + '.unit.' + unit.name\n    unit.lyrics = localStorage.getItem(lskey) || unit.lyrics\n\n    // view zone\n    let $divUnit = $('<div>').css({ 'color': unit.part.color })\n    let $editLink = $('<a>').html('Edit').css('text-decoration', 'underline').css('cursor', 'pointer').css('font-size', '0.75em').css('float', 'right').css('margin-right', '10px')\n    let $lyricsZone = $('<p>').css('line-height', '150%')\n    $divUnit.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '2px', 'margin-top': '35px' }).html('[' + unit.name + '] ').append($editLink))\n    $divUnit.append($lyricsZone)\n    $divLyrics.append($divUnit)\n    displayLyrics(songcheat, unit, $lyricsZone)\n\n    // hidden edit zone\n    let $divUnitEdit = $('<div>')\n    let $closeLink = $('<a>').html('Close').css('text-decoration', 'underline').css('cursor', 'pointer')\n    $divUnitEdit.append($('<textarea>').css('font-size', '1em').css('width', '400px').css('height', '200px'))\n    $divUnitEdit.append('<br/>').append($closeLink)\n    $divLyrics.append($divUnitEdit.hide())\n\n    // save lyrics and update ui\n    let saveAndUpdate = function (updateVextab) {\n      // save to local storage\n      unit.lyrics = $(this).val()\n      localStorage.setItem(lskey, unit.lyrics)\n\n      // re-display ascii\n      displayLyrics(songcheat, unit, $lyricsZone)\n\n      if (updateVextab) {\n        // recreate canvas\n        let $canvas = $('<canvas>')\n        $(canvas).after($canvas).remove()\n        canvas = $canvas[0]\n\n        // reload vextab score\n        let renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS)\n        let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n        let vextab = new VexTab(artist)\n        console.info('Parsing score...')\n        vextab.parse(SongcheatVexTab.Songcheat2VexTab(songcheat))\n        console.info('Rendering score...')\n        artist.render(renderer)\n        console.info('Score done!')\n      }\n    }\n\n    // edit action\n    $editLink.on('click', function () {\n      $divUnit.find('p:last') // .hide();\n      $divUnitEdit.show().find('textarea').val(unit.lyrics).focus()\n    })\n\n    // close action\n    $closeLink.on('click', function () {\n      $divUnitEdit.hide()\n      saveAndUpdate.call($divUnitEdit.find('textarea')[0], true)\n    })\n\n    // auto-save\n    onChange($divUnitEdit.find('textarea')[0], function (e) {\n      console.log('Auto saving on event ' + e.type)\n      saveAndUpdate.call(this, true)\n    })\n  }\n\n  // parse and render rhythms with vextab\n  for (let rhythm of songcheat.rhythms) {\n    let $divRhythm = $('<div>')\n    $divRhythms.append($divRhythm)\n\n    // player controls\n    $divRhythm.before(new PlayerUI(audioCtx, songcheat, rhythm.compiledScore, true).div())\n\n    // warning if not a whole number of bars\n    if (rhythm.duration % songcheat.barDuration) {\n      let warning = 'Rhythm ' + rhythm.id + ' is currently equivalent to ' + Math.floor(rhythm.duration / songcheat.barDuration) + ' bar(s) and ' + Utils.durationcodes(rhythm.duration % songcheat.barDuration) + '. A rhythm unit should be equivalent to a whole number of bars.'\n      $divRhythm.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n    }\n\n    try {\n      console.info('Converting rhythm to vextab score...')\n      let score = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=false tab-stem-direction=up\\n'\n      score += SongcheatVexTab.Notes2Stave(songcheat, 0, rhythm.compiledScore, true, 'top', 'Rhythm ' + (rhythm.name || rhythm.id), 1, true, false) + ' options space=20'\n      console.info('Parsing score...')\n      let artist = new Artist(10, 10, rhythmsWidth, { scale: 1.0 })\n      let vextab = new VexTab(artist)\n      vextab.parse(score)\n      console.info('Rendering score...')\n      artist.render(new Vex.Flow.Renderer($divRhythm[0], Vex.Flow.Renderer.Backends.SVG))\n      console.info('Score done!')\n    } catch (e) {\n      $divRhythm.html(e.message).css('color', 'red')\n      console.error(e)\n    }\n  }\n\n    // player controls\n  $(canvas).before(new PlayerUI(audioCtx, songcheat).div())\n\n    // parse and render full song score with vextab\n  try {\n    console.info('Converting songcheat to vextab score...')\n    let score = SongcheatVexTab.Songcheat2VexTab(songcheat)\n    console.info('Parsing score...')\n    let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n    let vextab = new VexTab(artist)\n    vextab.parse(score)\n    console.info('Rendering score...')\n    artist.render(new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS))\n    console.info('Score done!')\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n  }\n}\n\nfunction displayParts (songcheat, part, $partsZone) {\n  // clear eveyrthing\n  $partsZone.parent().find('p.warning,p.error').remove()\n  $partsZone.html('')\n\n  try {\n    // if compact part display enabled, set maxsp = 1\n    // if full part display enabled, force maxsp = 0: we want the exact position of chords\n    // always split by N bars (no lyrics so split as entered makes no sense, splitParts is never 0)\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $partsZone.append(compiler.getPartText(part, songcheat.partdisplay === 'compact' ? 1 : 0, songcheat.splitParts, 'rhythm', false))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $partsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nfunction displayLyrics (songcheat, unit, $lyricsZone) {\n  // clear eveyrthing\n  $lyricsZone.parent().find('p.warning,p.error').remove()\n  $lyricsZone.html('')\n\n  try {\n    // parse lyrics\n    let warnings = compiler.parseLyrics(unit)\n\n    // display parser warnings\n    for (let warning of warnings) {\n      $lyricsZone.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n      console.warn('[' + unit.name + '] ' + warning)\n    }\n\n    // build and display lyrics\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $lyricsZone.append(compiler.getUnitText(unit, songcheat.maxsp, songcheat.splitUnits, 'rhythm', songcheat.maxsp !== 1))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $lyricsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nvar get = new window.URLSearchParams(window.location.search)\nlet scIndex = window.scIndex = (parseInt(get.get('song'), 10) || 1) - 1\nlet sc = samples[scIndex]\nsc.id = scIndex + 1 // simulate a mongodb id for saving lyrics\n\ndocument.title = sc.title + ' | ' + document.title\n$('#left h1').html(sc.title)\n$('#left h2').html(sc.artist + ', ' + sc.year)\n$('#left h3.tempo').html('Tempo: ' + sc.signature.tempo + ' bpm')\n$('#left p').html(sc.comment)\n\n$('#left h3.capo').html('Capo: ' + (sc.capo > 0 ? sc.capo : 'n/a'))\n$('#left h3.tuning').html('Tuning: ' + sc.tuning)\n\n$('#middle h4, #right h4').css('text-decoration', 'underline').css('font-size', '1.1em').css('margin', '0.5em 0em')\n\nlet barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : (sc.barsPerLine || 4)\nlet naturalSize = $(window).width() * 0.45\nlet absMinSize = 640\nlet minSize = Math.max(barsPerLine * 300, absMinSize)\nlet maxSize = Math.max(barsPerLine * 450, absMinSize)\nvar scoreWidth = Math.min(maxSize, Math.max(minSize, naturalSize))\nvar rhythmWidth = Math.min(750, Math.max(400, $(window).width() * 0.24))\n$('#right').css('width', scoreWidth + 'px')\n\nvar _scIndex = 0\nfor (var sc_ of samples) {\n  /* if (_scIndex != scIndex) */\n  $('#links').append($(\"<a style='font-size: 0.9em; color: black; cursor: pointer; text-decoration:underline'>\").attr('rel', _scIndex).html(sc_.title + ' (' + sc_.artist + ', ' + sc_.year + ')')).append('<br/>')\n  _scIndex++\n}\n\nsongcheat(sc, $('#score'), $('#chords'), $('#parts'), $('#structure'), $('#lyrics'), $('#rhythms'), scoreWidth, 175, rhythmWidth)\n$('body').show()\n","export class Utils {\n  /**\n  * Array helper functions\n  */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n  * String helper functions\n  */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nlet MIN_LYRICS_BARLEN = 20 // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nlet LYRICS_SUM_DURATIONS = false // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nlet KEEP_EMPTY_LINES = false\n\nexport class CompilerException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Compiler error: ' + this.message\n  }\n}\n\nclass Compiler_ {\n  constructor (DEBUG) {\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  compile (songcheat) {\n    // default values for optional properties\n    songcheat.mode = songcheat.mode || 'rt'\n    songcheat.lyricsMode = songcheat.lyricsMode || 's'\n    songcheat.barsPerLine = songcheat.barsPerLine || 4\n    songcheat.signature = songcheat.signature || {}\n    songcheat.signature.key = songcheat.signature.key || 'C'\n    songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' }\n    songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration\n    songcheat.chords = songcheat.chords || []\n    songcheat.rhythms = songcheat.rhythms || []\n    songcheat.parts = songcheat.parts || []\n\n    // deduce bar duration from signature\n    songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration)\n\n    // resolve all id references (rhythms and chords)\n    this.resolveIds(songcheat)\n\n    // default structure if not specified : one unit for each part\n    if (!songcheat.structure) {\n      songcheat.structure = []\n      for (let part of songcheat.parts) songcheat.structure.push({ 'part': part })\n    }\n\n    // give a name to each unit if not already set = name of part with automatic numbering\n    let unitsByPart = {}\n    let numberByPart = {}\n    for (let unit of songcheat.structure) unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1\n    for (let unit of songcheat.structure) {\n      numberByPart[unit.part.id] = typeof numberByPart[unit.part.id] === 'undefined' ? 1 : numberByPart[unit.part.id] + 1\n      if (!unit.name) unit.name = unit.part.name + (unitsByPart[unit.part.id] > 1 ? ' ' + numberByPart[unit.part.id] : '')\n    }\n\n    // give a color to each part if not already set\n    let colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta']\n    let partIndex = 0\n    for (let part of songcheat.parts) { if (!part.color) part.color = colors[partIndex++ % colors.length] }\n\n    // validate and compile each rhythm\n    for (let rhythm of songcheat.rhythms) this.compileRhythm(rhythm, songcheat.signature.time.beatDuration)\n\n    for (let part of songcheat.parts) {\n      // compute a \"chordChanges\" property in each phrase\n      let phraseIndex = 0\n      for (let phrase of part.phrases) {\n        phrase.chordChanges = []\n        let lastChord = null\n        for (let bar of phrase.bars) lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord)\n\n        this.log('Phrase wise chord durations for phrase ' + part.name + '.' + (phraseIndex + 1))\n        for (let c of phrase.chordChanges) this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n        // compute a \"chordChanges\" property in each bar\n        let barIndex = 0\n        for (let bar of phrase.bars) {\n          bar.chordChanges = { 'bar': [], 'rhythm': [] }\n          for (let chordChangesMode of ['rhythm', 'bar']) this.addChordChanges(bar, bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar')\n\n          this.log('\\tRythm wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['rhythm']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n          this.log('\\tBar wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['bar']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n          barIndex++\n        }\n\n        phraseIndex++\n      }\n\n      // compute duration of part\n      part.duration = 0\n      for (let phrase of part.phrases) { for (let bar of phrase.bars) part.duration += bar.rhythm.duration }\n    }\n\n    // fluid API\n    return songcheat\n  }\n\n  resolveIds (songcheat) {\n    let unitIndex = 0\n    if (songcheat.structure) {\n      for (let unit of songcheat.structure) {\n        if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1))\n\n      // resolve part id\n        let part = this.resolveId(songcheat.parts, unit.part)\n        if (!part) throw new CompilerException('Part ' + unit.part + ' not found')\n        unit.part = part\n\n        unitIndex++\n      }\n    }\n\n    if (songcheat.parts) {\n      for (let part of songcheat.parts) {\n        if (!part.phrases) throw new CompilerException('Phrases not defined for part \"' + part.name + '\"')\n        if (!(part.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + part.name + '\" must be an Array, found: ' + (typeof songcheat.parts.phrases))\n\n        let phraseIndex = 0\n        for (let phrase of part.phrases) {\n          let barIndex = 0\n          for (let bar of phrase.bars) {\n            if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + (typeof bar.chords))\n\n          // resolve rhythm id\n            let rhythm = this.resolveId(songcheat.rhythms, bar.rhythm)\n            if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n            bar.rhythm = rhythm\n\n          // resolved array of chord ids\n            let chords = []\n            for (let chordId of bar.chords) {\n            // resolve chord id\n              let chord = this.resolveId(songcheat.chords, chordId)\n              if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n              chords.push(chord)\n            }\n\n            bar.chords = chords\n            barIndex++\n          }\n\n          phraseIndex++\n        }\n      }\n    }\n  }\n\n  resolveId (collection, id) {\n    if (collection) { for (let i of collection) { if (i.id === id) return i } }\n    return null\n  }\n\n  compileRhythm (rhythm, initialNoteDuration) {\n    this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"')\n\n    // default note duration, until changed\n    let noteDuration = initialNoteDuration\n\n    // take not of each placeholder's index, so we can later fetch the associated chord\n    rhythm.placeholdercount = 0\n\n    // for locating syntax errors in message\n    let position = 1\n    let lastToken = null\n\n    // compile the score string into an array of objects\n    rhythm.compiledScore = []\n    for (let token of rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)) {\n      if ((token = token.trim())) {\n        let match = null\n        if ((match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/))) {\n          // duration: change note duration to use next\n          noteDuration = Utils.duration(match[1])\n        } else if ((match = token.match(/^\\(#\\)$/))) {\n          // rest\n          rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ })\n        } else if ((match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/))) {\n          // chord placeholder\n          let tied = match[1] === 'T'\n\n          // strings = between parentheses\n          let strings = match[2]\n          if (strings === '') strings = '*' // an empty string is a shortcut for \"*\"\n          if (strings === 'x') strings = '*x' // a x alone is a shortcut for \"*x\"\n          if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings)\n\n          // flags = after parentheses\n          let flagsString = match[3]\n          let flags = { stroke: null, accent: false, pm: false, fingering: null }\n          for (let flag of flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)) {\n            if (flag.trim()) {\n              if (flag.match(/^(dd?|uu?)$/g)) {\n                // stroke mode\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token)\n                flags.stroke = flag\n              } else if (flag.match(/^[pima]+$/)) {\n                // PIMA fingering\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token)\n                flags.fingering = flag\n              } else if (flag.match(/^PM$/)) {\n                // palm muting\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token)\n                flags.pm = true\n              } else if (flag.match(/^>$/)) {\n                // accent\n                if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token)\n                flags.accent = true\n              } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"')\n            }\n          }\n\n          // add a note\n          rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ })\n        } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''))\n\n        lastToken = token\n      }\n\n      position += token.length\n    }\n\n    // compute total rhythm duration\n    rhythm.duration = 0\n    for (let o of rhythm.compiledScore) rhythm.duration += o.duration\n  }\n\n  addChordChanges (bar, chordChanges, barDuration, resetAtBars, lastChord) {\n    // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n    if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found')\n    while (bar.chords.length < bar.rhythm.placeholdercount) bar.chords.push(bar.chords[bar.chords.length - 1])\n\n    let offset = 0\n    for (let note of bar.rhythm.compiledScore) {\n      // get chord corresponding to the placeholder position\n      let chord = bar.chords[note.placeholderIndex]\n      if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n\n      // same chord as before and not a new bar: increment duration with this new note\n      if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration\n\n      // chord changed: new duration starts with one note of the new chord\n      // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n      else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars })\n\n      lastChord = chord\n      offset += note.duration\n    }\n\n    return lastChord\n  }\n\n  parseLyrics (unit, defaultCursorStep, barDuration) {\n    let warnings = []\n    let offset = 0\n\n    // remove DOS newlines\n    unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '')\n\n    // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n    unit.groups = []\n    for (let part of unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)) { // nb: split with capture groups only works in decent browsers, e.g. IE10+\n      let match = null\n      // move cursor forward by given or default step duration\n      if ((match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/))) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration)\n\n      // move cursor to begin of next bar\n      else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n      // (non empty) word group (waiting for its duration)\n      else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 })\n    }\n\n    // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n    if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n    // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n    let missingDuration = unit.part.duration - offset\n    this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + (missingDuration / barDuration) + ' bars missing')\n    if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess')\n    offset = this.registerGroup(unit, offset, missingDuration, barDuration)\n\n    for (let group of unit.groups) {\n      // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n      let groupLength = this.getGroupLength(group) + 1\n\n      // ensure the bar will always have the required minimal width\n      group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration))\n\n      // compute density of group based on the obtained length\n      group.p = group.plen / group.duration\n\n      // set bar true if group ends on a bar\n      group.bar = (group.offset + group.duration) % barDuration === 0\n\n      // initialize chord changes\n      group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] }\n    }\n\n    // compute maximum density across all groups\n    unit.pmax = 0\n    for (let group of unit.groups) unit.pmax = Math.max(unit.pmax, group.p)\n\n    // iterate on each phrase wise chord change and find the associated group\n    offset = 0\n    for (let phrase of unit.part.phrases) {\n      for (let chordDuration of phrase.chordChanges) {\n        // find closest group starting at or before chord offset\n        let group = null\n        for (let g of unit.groups) { if (g.offset <= offset) group = g }\n        if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units')\n\n        // register chord change in group\n        group.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) })\n\n        offset += chordDuration.duration\n      }\n    }\n\n    // iterate on each bar wise chord change and find the associated group\n    offset = { 'rhythm': 0, 'bar': 0 }\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChangesMode of ['rhythm', 'bar']) {\n          for (let chordDuration of bar.chordChanges[chordChangesMode]) {\n            // find closest group starting at or before chord offset\n            let group = null\n            for (let g of unit.groups) { if (g.offset <= offset[chordChangesMode]) group = g }\n            if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units')\n\n            // register chord change in group\n            group.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(chordDuration) })\n\n            offset[chordChangesMode] += chordDuration.duration\n          }\n        }\n      }\n    }\n\n    // debug info\n    var debugText = 'Groups of unit [' + unit.name + ']:\\n'\n    var barIndex = 0\n    let zeroDuration = false\n    for (let group of unit.groups) {\n      debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + group.text.replace(/\\n/g, '\\\\N') + ']:' + group.duration + ' (' + group.offset + ' - ' + (group.offset + group.duration) + ') L=' + this.getGroupLength(group) + \" L'=\" + group.plen + ' ρ=' + group.p.toFixed(2) + ' #Chord changes %bar= ' + group.chordChanges['bar'].length + ' %phrase= ' + group.chordChanges['phrase'].length\n      if (group.duration === 0) zeroDuration = true\n      if (group.bar) {\n        barIndex++\n        debugText += ' | '\n      }\n      debugText += '\\n'\n    }\n    debugText += 'ρ max = ' + unit.pmax.toFixed(2)\n    this.log(debugText)\n\n    if (zeroDuration) throw new Error('Detected group with 0 duration')\n\n    return warnings\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    var unitText = ''\n\n    // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n    var barIndex = 0\n    var groupIndex = 0\n    for (let group of unit.groups) {\n      // where and on how many positions will this group be displayed\n      group.position = [...unitText.replace(/\\n/g, '')].length\n      group.length = Math.ceil(group.duration * unit.pmax)\n\n      // an hyphen means a word has been cut in two, no need for a space before next group\n      // but if the final character should be a bar, then always count this extra character\n      let needFinalSpace = group.bar || !group.text.match(/-$/)\n\n      // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n      let maxLength = null\n      if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1)\n      if (maxLength) group.length = Math.min(group.length, maxLength)\n\n      // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n      let minLength = group.bar ? 1 : 0 // 1 for the final bar sign if any\n      if (group.chordChanges[chordChangesMode]) { for (let i = 0; i < group.chordChanges[chordChangesMode].length; i++) minLength += group.chordChanges[chordChangesMode][i].text.length }\n      minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength)\n      group.length = Math.max(group.length, minLength)\n\n      // filler string used to reach that length (nb: filler will always have a length of at least 1)\n      let filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ')\n\n      // replace last character of filler by a | if this is the end of a bar\n      filler = filler.replace(/(.)$/, group.bar ? (split > 0 && ((barIndex + 1) % split === 0) ? '|\\n' : '|') : (this.DEBUG ? '*' : '$1'))\n\n      // append filler to text, remove new lines if splitting at bars\n      var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler\n\n      this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')')\n      unitText += groupText\n\n      groupIndex++\n      if (group.bar) barIndex++\n    }\n\n    // we weren't asked to add chords\n    if (!chordChangesMode) return unitText\n\n    // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n    let chordInserts = []\n    for (let group of unit.groups) {\n      let lengthStillToPlaceOnThisGroup = 0\n      let lengthYetPlacedOnThisGroup = 0\n\n      // compute length of all chord inserts\n      for (let chordChange of group.chordChanges[chordChangesMode]) lengthStillToPlaceOnThisGroup += chordChange.text.length\n\n      for (let chordChange of group.chordChanges[chordChangesMode]) {\n        // position of the chord will be the position of the group + length corresponding to offset delta\n        let positionDelta = Math.ceil(((chordChange.offset - group.offset) / group.duration) * group.length)\n        let positionDelta_ = positionDelta\n\n        // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n        while (positionDelta + lengthStillToPlaceOnThisGroup > group.length - (group.bar ? 1 : 0)) { positionDelta-- }\n\n        // ensure that chords already there still have enough room\n        while (positionDelta - lengthYetPlacedOnThisGroup < 0) { positionDelta++ }\n\n        this.log('Closest group \"' + group.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + group.offset + ' and position ' + group.position + ' found for ' + chordChange.text.trim() + ' with offset ' + chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)')\n        chordInserts.push({ text: chordChange.text, offset: chordChange.offset, position: group.position + positionDelta })\n\n        lengthYetPlacedOnThisGroup = positionDelta + chordChange.text.length\n        lengthStillToPlaceOnThisGroup -= chordChange.text.length\n      }\n    }\n\n    for (let chordInsert of chordInserts) this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars')\n\n    // insert these chord inserts\n    let position = 0\n    let skip = 0\n    let unitText_ = unitText\n    let chordText = ''\n    unitText = ''\n    for (let char of unitText_) {\n      if (char === '\\n') {\n        unitText += '\\n'\n        chordText += '\\n'\n        skip = 0\n      } else {\n        for (let chordInsert of chordInserts) {\n          if (!chordInsert.inserted) {\n            if (chordInsert.position <= position) {\n              this.log('[' + unit.name + '] Inserting ' + chordInsert.text + ' @ ' + position + ' chars')\n              chordText += chordInsert.text\n              chordInsert.inserted = true\n              skip = chordInsert.text.length\n            }\n          }\n        }\n\n        position++\n\n        // add char to unit text, and corresponding space to chord text\n        // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n        if (skip === 0) { chordText += char === '|' ? char : ' ' } else { skip-- }\n        unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char\n      }\n    }\n\n    // and interlace the two strings\n    return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES)\n  }\n\n  registerGroup (unit, offset, step, barDuration) {\n    if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup')\n\n    while (step > 0) {\n      // duration added to preceding group may never be more than what's left until end of bar\n      let addDuration = Math.min(step, barDuration - (offset % barDuration))\n\n      // create a new group if none or if preceding already got its duration\n      if (!unit.groups.length || (!LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0)) unit.groups.push({ text: '', offset: offset, duration: 0 })\n\n      // add this duration to preceding group (create it if needed)\n      unit.groups[unit.groups.length - 1].duration += addDuration\n      offset += addDuration\n      step -= addDuration\n\n      // step is going to cross end of bar: directly create a first empty group\n      if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 })\n    }\n\n    return offset\n  }\n\n  getGroupLength (group) {\n    // return the number of visible graphemes in group text\n    // - newlines are not counted\n    // - tabs will be converted to spaces and may thus count as 1\n    // - use spread operator to correctly count astral unicode symbols\n    return [...group.text.replace(/\\n/g, '')].length\n  }\n\n  getChordDisplay (chordDuration) {\n    // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n    if (chordDuration.hidden) return ' '\n\n    // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n    return chordDuration.chord.name + ' '\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Compiler {\n  constructor (songcheat, DEBUG) {\n    this.compiler_ = new Compiler_(DEBUG)\n    if (songcheat) this.set(songcheat)\n  }\n\n  set (songcheat) {\n    this.compiler_.log(Utils.title('COMPILE SONGCHEAT'))\n    this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)))\n  }\n\n  parseLyrics (unit) {\n    this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name))\n    return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    this.compiler_.log(Utils.title(`GET LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n\n  getPartText (part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    // dummy unit with no lyrics\n    let unit = { name: part.name, part: part }\n\n    this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name))\n    this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n\n    this.compiler_.log(Utils.title(`GET PART LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n}\n","import { Utils } from './utils'\n\nexport class ChordPixException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Chordpix error: ' + this.message\n  }\n}\n\nexport class ChordPix {\n  static parse (url) {\n    try {\n      // validate and explode url at slashes\n      if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL')\n      let parts = url.split(/\\//)\n\n      // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n      let name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b')\n\n      // get starting fret\n      let startingFret = parseInt(parts[7], 10)\n\n      // get absolute barred fret (single char) (\"-\" kept as is)\n      let barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret)\n\n      // build an absolute tablature (single char x6) (\"x\" kept as is)\n      let tablature = ''\n      for (let char of parts[8]) tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret)\n\n      return {\n        name: name,\n        tablature: tablature,\n        fingering: parts[9] + '/' + barredFret,\n        comment: ''\n      }\n    } catch (e) {\n      throw new ChordPixException('[URL ' + url + '] ' + e.message)\n    }\n  }\n\n  static url (chord, chordWidth) {\n    try {\n      // check tablature is valid\n      if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string')\n      if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)')\n      if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)')\n\n      // check fingering is valid\n      if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string')\n      if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)')\n      if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)')\n      if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret')\n\n      // convert 6 chars into 6 integers (null for x)\n      let frets = []\n      for (let char of chord.tablature) frets.push(char === 'x' ? null : Utils.char2fret(char))\n\n      // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n      let minFret = frets.filter(x => x).length > 0 ? Math.min(...frets.filter(x => x)) : 1\n      let maxFret = frets.filter(x => x).length > 0 ? Math.max(...frets.filter(x => x)) : 1\n\n      // get number of frets to display on diagram (with minimum of 4)\n      let nbFrets = Math.max(4, maxFret + 1 - minFret)\n\n      // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n      let startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret\n\n      // get relative barred fret (\"-\" kept as is)\n      let fingering = chord.fingering.split('/')\n      if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret)\n\n      // build a relative tablature (\"0\" and \"x\" kept as is)\n      let relTablature = ''\n      for (let char of chord.tablature) relTablature += char === 'x' || char === '0' ? char : Utils.abs2rel(char, startingFret)\n\n      // use nice ♯ and ♭ in diagram (replace only last occurence)\n      let name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature\n\n      // build final url\n      return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png'\n    } catch (e) {\n      throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message)\n    }\n  }\n}\n","import { Utils } from './utils'\n\nlet DEBUG = 0\n\nexport class VexTabException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'VexTab error: ' + this.message\n  }\n}\n\nexport class VexTab {\n  // build VexTab chord notation\n  static Chord2VexTab (chord, strings, transpose) {\n    var vextabchord = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      vextabchord.push((o.mute ? 'X' : transpose + o.fret) + '/' + o.string)\n    }\n    return '(' + vextabchord.join('.') + ')'\n  }\n\n  static Note2VexTab (note, strokes, accents) {\n    let vextab = ''\n\n    // rest with given duration\n    if (note.rest) vextab += Utils.durationcode(note.duration) + '#5#'\n\n    else {\n      // note duration, slashed if no chord given\n      vextab += note.chord ? Utils.durationcode(note.duration) : Utils.durationcode(note.duration).replace(/(:(?:w|h|q|8|16|32))(d?)/g, '$1S$2')\n\n      // if tied note\n      if (note.tied) vextab += 'T'\n\n      // chord or dummy note (for slash notation)\n      vextab += !note.chord ? '(4/3)' : VexTab.Chord2VexTab(note.chord, note.strings, 0) // do not transpose with capo: chords are tabbed exactly as their diagrm says (author chooses to use capo'd chords or not)\n\n      // stroke flag d or u (dd and uu are not built-in in vextab and are handled later through text2VexTab)\n      if (strokes && note.flags.stroke && note.flags.stroke.length === 1) vextab += note.flags.stroke\n\n      // accent (put on top)\n      if (accents && note.flags.accent) vextab += '$.a>/' + accents + '.$'\n    }\n\n    return vextab\n  }\n\n  static Notes2Stave (songcheat, offset, notes, strokes, accents, subtitle, hs, notation, tablature) {\n    let vextab = ''\n    let barDuration = songcheat.barDuration\n\n    console.log('Drawing ' + (notation ? 'notation ' : '') + (tablature ? 'tablature ' : '') + 'stave with ' + notes.length + ' notes')\n\n    // start new stave with signature\n    vextab += '\\ntabstave notation=' + (notation ? 'true' : 'false') + ' tablature=' + (tablature ? 'true' : 'false') + '\\n'\n    vextab += 'tuning=' + songcheat.tuning + ' key=' + songcheat.signature.key + ' time=' + songcheat.signature.time.symbol + '\\n'\n\n    // add subtitle if first bar\n    if (subtitle && offset === 0) vextab += 'text .' + hs + ',.font=Arial-10-bold,[' + subtitle + ']\\n'\n\n    vextab += 'notes '\n\n    // initial bar line if needed (double if first bar)\n    if (offset % barDuration === 0) vextab += (offset === 0 ? '=||' : '|')\n\n    // add each note, followed by a bar or phrase sign if needed\n    for (let note of notes) {\n      vextab += VexTab.Note2VexTab(note, strokes, accents)\n      offset += note.duration\n      if (note.lastInPhrase && offset % barDuration !== 0) console.warn('Phrase matches no bar (' + Utils.durationcodes(barDuration - offset % barDuration) + ' away)')\n      if (offset % barDuration === 0) vextab += note.lastInPhrase ? '=||' : '|'\n    }\n\n    return vextab + '\\n'\n  }\n\n  static Text2VexTab (textGroups, barDuration, offset, staveDuration, h, font) {\n    let text = ''\n\n    // for groups that start within our range\n    for (let group of textGroups) {\n      if (group.offset >= offset + staveDuration) break\n      if (group.offset >= offset) {\n        let line = 'text ++,.' + h + ',.font=' + font\n\n        // initial bar line if needed\n        if (offset % barDuration === 0) line += ',|'\n\n        // add empty text groups to fill the gap between start of stave and start of group\n        let gap = group.offset - offset\n        while (gap > 0) {\n          // gap duration may never be more than what's left until end of bar\n          let d = Math.min(gap, barDuration - (offset % barDuration))\n          for (let code of Utils.durationcodes(d)) line += ',' + code + ', '\n          if ((offset + d) % barDuration === 0) line += ',|'\n\n          // continue with remaining gap\n          gap -= d\n        }\n\n        // add actual text group on all available duration until end of stave (or more precisely the largest duration code which is <= available duration)\n        let available = offset + staveDuration - group.offset\n        for (let code of Utils.durationcodes(available)) { line += ',' + code + ',' + (group.text.replace(/\\n/g, '') || ' '); break }\n\n        // remove trailing spaces and comma: vextab does not allow to finish on an empty word group\n        text += line.replace(/[ ,]+$/, '') + '\\n'\n      }\n    }\n\n    return text\n  }\n\n  static Songcheat2VexTab (songcheat) {\n    let vextab = ''\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (typeof songcheat.showUnitIndex === 'undefined' || songcheat.showUnitIndex === null || songcheat.showUnitIndex === unitIndex) {\n        vextab += VexTab.Unit2VexTab(songcheat, unit, unitIndex) + '\\n'\n      }\n      unitIndex++\n    }\n    return vextab\n  }\n\n  static Unit2VexTab (songcheat, unit, unitIndex) {\n    let stems = songcheat.mode.indexOf('s') >= 0\n    let showLyrics = songcheat.lyricsMode === 's'\n    let barDuration = songcheat.barDuration\n\n    let vextab = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=' + (stems ? 'true' : 'false') + ' tab-stem-direction=up\\n'\n    unitIndex = unitIndex || 0\n\n    let staveDuration = 0\n    let notes = []\n    let notesSlashed = []\n\n    console.log('VexTabbing unit ' + (unitIndex + 1) + ' \"' + unit.name + '\"')\n\n    // space before first unit and between units\n    vextab += 'options space=' + (unitIndex > 0 && songcheat.showUnitIndex === null ? 50 : 20) + '\\n'\n\n    // get lyrics word groups\n    let lyricsGroups = []\n    if (unit.groups) for (let group of unit.groups) lyricsGroups.push({ offset: group.offset, text: group.text + (DEBUG ? '/' + group.duration : '') })\n\n    // get rhythm wise chord changes (same as ascii lyrics)\n    let offset = 0\n    let chordGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChange of bar.chordChanges['rhythm']) {\n          chordGroups.push({ offset: offset, text: chordChange.chord.name + (DEBUG ? '/' + chordChange.duration : '') })\n          offset += chordChange.duration\n        }\n      }\n    }\n\n    // get PIMA and dd/uu word groups\n    offset = 0\n    let fingeringGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.fingering) fingeringGroups.push({ offset: offset, text: note.flags.fingering.toLowerCase() })\n          else if (note.flags.stroke && note.flags.stroke.length === 2) fingeringGroups.push({ offset: offset, text: note.flags.stroke === 'dd' ? '⤋' : '⤊' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // get PM word groups\n    offset = 0\n    let pmGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.pm) pmGroups.push({ offset: offset, text: 'PM' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // for each phrase in unit\n    offset = 0\n    let phraseIndex = 0\n    for (let phrase of unit.part.phrases) {\n      console.log('\\tphrase ' + (phraseIndex + 1))\n      let lastPhraseInPart = phraseIndex === unit.part.phrases.length - 1\n\n      // for each bar in phrase\n      let barIndex = 0\n      for (let bar of phrase.bars) {\n        console.log('\\t\\tbar ' + (barIndex + 1))\n        let lastBarInPhrase = barIndex === phrase.bars.length - 1\n\n        // for each note in rhythm\n        let noteIndex = 0\n        for (let note of bar.rhythm.compiledScore) {\n          // note with no chord set (slash)\n          let phraseNote = JSON.parse(JSON.stringify(note))\n          phraseNote.lastInPhrase = lastBarInPhrase && noteIndex === bar.rhythm.compiledScore.length - 1\n          notesSlashed.push(phraseNote)\n\n          // register note with corresponding chord\n          let chordedPhraseNote = JSON.parse(JSON.stringify(phraseNote))\n          chordedPhraseNote.chord = bar.chords[note.placeholderIndex]\n          if (!chordedPhraseNote.chord) throw new VexTabException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n          notes.push(chordedPhraseNote)\n\n          // draw staves when we have completed barsPerLine bars or if the part is done\n          staveDuration += note.duration\n          let partDone = lastPhraseInPart && phraseNote.lastInPhrase\n          if (staveDuration >= songcheat.barsPerLine * barDuration || partDone) {\n            console.log((partDone ? 'EOP' : 'EOL') + ' @ ' + staveDuration + ' units: drawing ' + notes.length + ' notes stave' + (songcheat.mode.length > 1 ? 's' : ''))\n\n            // notation: shows unit.name, chords, accents, stems (slashes) and lyrics\n            // if tablature is not displayed, it also shows strokes/fingering\n            // it never shows PM and frets\n            if (songcheat.mode.indexOf('r') >= 0) {\n              let strokes = songcheat.mode.indexOf('t') < 0\n              vextab += VexTab.Notes2Stave(songcheat, offset, notesSlashed, strokes, 'top', unit.name, -1, true, false)\n              if (strokes && fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 11, 'Arial-9-normal') // PIMA on same line as strokes\n              if (showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, strokes ? 13 : 11, 'Times-11-italic')\n              if (chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, 2, 'Arial-10-normal')\n              vextab += 'options space=' + (strokes ? 40 : 20) + '\\n'\n            }\n\n            // tablature: shows PM, frets and strokes/fingering\n            // if notation is not displayed, it also shows unit.name, chords, lyrics and stems (if mode \"ts\")\n            // it never shows accents\n            if (songcheat.mode.indexOf('t') >= 0) {\n              if (stems) vextab += 'options space=' + 30 + '\\n'\n              vextab += VexTab.Notes2Stave(songcheat, offset, notes, true, false, songcheat.mode.indexOf('r') < 0 ? unit.name : false, stems ? -3 : -1, false, true)\n              if (fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PIMA on same line as strokes\n              if (pmGroups.length > 0) vextab += VexTab.Text2VexTab(pmGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PM on same line as strokes\n              if (songcheat.mode.indexOf('r') < 0 && showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, 12, 'Times-11-italic')\n              if (songcheat.mode.indexOf('r') < 0 && chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, stems ? -1 : 1, 'Arial-10-normal')\n              vextab += 'options space=' + (songcheat.mode.indexOf('r') ? 30 : 10) + '\\n'\n            }\n\n            // space after staves\n            vextab += 'options space=' + 10 + '\\n'\n\n            // increment offset\n            offset += staveDuration\n\n            // clear workspace\n            notes = []\n            notesSlashed = []\n            staveDuration = 0\n          }\n\n          // next note in rhythm\n          noteIndex++\n        }\n\n        // next bar in phrase\n        barIndex++\n      }\n\n      // next phrase in part\n      phraseIndex++\n    }\n\n    return vextab\n  }\n}\n","module.exports = {\n  \"Bass\": require(\"./Bass.json\"),\n  \"BassAmp360\": require(\"./BassAmp360.json\"),\n  \"BassFuzz\": require(\"./BassFuzz.json\"),\n  \"BassFuzz2\": require(\"./BassFuzz2.json\"),\n  \"BassSubDub\": require(\"./BassSubDub.json\"),\n  \"BassSubDub2\": require(\"./BassSubDub2.json\"),\n  \"Brass\": require(\"./Brass.json\"),\n  \"BritBlues\": require(\"./BritBlues.json\"),\n  \"BritBluesDriven\": require(\"./BritBluesDriven.json\"),\n  \"Buzzy1\": require(\"./Buzzy1.json\"),\n  \"Buzzy2\": require(\"./Buzzy2.json\"),\n  \"Celeste\": require(\"./Celeste.json\"),\n  \"ChorusStrings\": require(\"./ChorusStrings.json\"),\n  \"Dissonant1\": require(\"./Dissonant1.json\"),\n  \"Dissonant2\": require(\"./Dissonant2.json\"),\n  \"DissonantPiano\": require(\"./DissonantPiano.json\"),\n  \"DroppedSaw\": require(\"./DroppedSaw.json\"),\n  \"DroppedSquare\": require(\"./DroppedSquare.json\"),\n  \"DynaEPBright\": require(\"./DynaEPBright.json\"),\n  \"DynaEPMed\": require(\"./DynaEPMed.json\"),\n  \"Ethnic33\": require(\"./Ethnic33.json\"),\n  \"Full1\": require(\"./Full1.json\"),\n  \"Full2\": require(\"./Full2.json\"),\n  \"GuitarFuzz\": require(\"./GuitarFuzz.json\"),\n  \"Harsh\": require(\"./Harsh.json\"),\n  \"MklHard\": require(\"./MklHard.json\"),\n  \"Noise\": require(\"./Noise.json\"),\n  \"Organ2\": require(\"./Organ2.json\"),\n  \"Organ3\": require(\"./Organ3.json\"),\n  \"PhonemeAh\": require(\"./PhonemeAh.json\"),\n  \"PhonemeBah\": require(\"./PhonemeBah.json\"),\n  \"PhonemeEe\": require(\"./PhonemeEe.json\"),\n  \"PhonemeO\": require(\"./PhonemeO.json\"),\n  \"PhonemeOoh\": require(\"./PhonemeOoh.json\"),\n  \"PhonemePopAhhhs\": require(\"./PhonemePopAhhhs.json\"),\n  \"Piano\": require(\"./Piano.json\"),\n  \"Pulse\": require(\"./Pulse.json\"),\n  \"PutneyWavering\": require(\"./PutneyWavering.json\"),\n  \"Saw\": require(\"./Saw.json\"),\n  \"Square\": require(\"./Square.json\"),\n  \"TB303Square\": require(\"./TB303Square.json\"),\n  \"Throaty\": require(\"./Throaty.json\"),\n  \"Triangle\": require(\"./Triangle.json\"),\n  \"Trombone\": require(\"./Trombone.json\"),\n  \"TwelveOpTines\": require(\"./TwelveOpTines.json\"),\n  \"TwelveStringGuitar1\": require(\"./TwelveStringGuitar1.json\"),\n  \"WarmSaw\": require(\"./WarmSaw.json\"),\n  \"WarmSquare\": require(\"./WarmSquare.json\"),\n  \"WarmTriangle\": require(\"./WarmTriangle.json\"),\n  \"Wurlitzer\": require(\"./Wurlitzer.json\"),\n  \"Wurlitzer2\": require(\"./Wurlitzer2.json\")\n}\n","import { Utils } from './utils'\nimport waveTables from '@mohayonao/wave-tables'\n\nexport class Player {\n  constructor (audioCtx, notes, config) {\n    this.MODE_RHYTHM = 1 // play beeps only\n    this.MODE_BASS = 2 // when there is a strummed chord, play only bass (no effect onindividual strings)\n    this.MODE_CHORDS = 3 // play actual strummed chords\n\n    config = config || {}\n    config.signature = config.signature || {}\n    config.signature.time = config.signature.time || {}\n\n    // audio context\n    this.audioCtx = audioCtx\n\n    // notes to beep\n    this.notes = notes\n\n    // config: loop or not and callback at end if no loop\n    this.loop = config.loop || false\n    this.onDone = config.onDone || null\n    this.onCountdown = config.onCountdown || function () {}\n\n    // config: capo and signature (tempo, time, shuffle)\n    this.capo = config.capo || 0\n    this.tempo = config.signature.tempo || 100\n    this.beatsPerBar = config.signature.time.beatsPerBar || 4\n    this.beatDuration = config.signature.time.beatDuration || ':q'\n    this.shuffle = config.signature.shuffle ? Utils.duration(config.signature.shuffle) : false\n\n    // tuning, defaults to standard tuning\n    this.tuning = config.tuning || [329.63, // E4\n      246.94, // B3\n      196.00, // G3\n      146.83, // D3\n      110.00, // A2\n      82.41\n    ] // E2\n\n    // play control\n    this.stopped = true\n    this.paused = false\n\n    // initialize to defaults\n    this.speed(100)\n    this.setDisto(0)\n    this.setVolume(50)\n    this.setMode(this.MODE_CHORDS)\n    this.setType(config.type || 'Piano')\n  }\n\n  makeDistortionCurve (amount) {\n    let k = typeof amount === 'number' ? amount : 50\n    let nSamples = 44100\n    let curve = new Float32Array(nSamples)\n    let deg = Math.PI / 180\n    for (let i = 0; i < nSamples; ++i) {\n      let x = i * 2 / nSamples - 1\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x))\n    }\n    return curve\n  }\n\n  /**\n   * duration of the tone in milliseconds\n   * frequency of the tone in hertz\n   * volume of the tone between 0 and 1\n   * type of tone. Possible values are sine, square, sawtooth, triangle, and custom.\n   * callback to use on end of tone\n   */\n  sound (time, duration, frequency, volume, distortion, type, onended) {\n    let audioCtx = this.audioCtx\n    let gainNode = audioCtx.createGain()\n    gainNode.gain.value = volume\n\n    if (distortion) {\n      let distoNode = audioCtx.createWaveShaper()\n      distoNode.curve = this.makeDistortionCurve(parseInt(distortion, 10))\n      distoNode.oversample = '4x'\n      distoNode.connect(audioCtx.destination)\n      gainNode.connect(distoNode)\n    } else gainNode.connect(audioCtx.destination)\n\n    let oscillator = audioCtx.createOscillator()\n    oscillator.connect(gainNode)\n\n    oscillator.frequency.value = frequency\n    oscillator.onended = onended\n\n    // type can be a periodic wave or a standard oscillator type\n    if (waveTables[type]) oscillator.setPeriodicWave(audioCtx.createPeriodicWave(waveTables[type].real, waveTables[type].imag))\n    else oscillator.type = type\n\n    oscillator.start(time)\n    oscillator.stop(time + duration)\n  }\n\n  chord2frequencies (chord, strings, transpose) {\n    let freqs = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      if (!o.mute) freqs.push(this.tuning[o.string - 1] * Math.pow(Math.pow(2, 1 / 12), transpose + o.fret))\n    }\n    return freqs\n  }\n\n  ms_ (note) {\n    // base duration of note\n    let ms_ = note.duration * this.msPerUnit\n\n    // change duration proportions for shuffled notes\n    if (this.shuffle && note.duration === this.shuffle) {\n      if (note.offset % (2 * this.shuffle) === 0) ms_ *= 1.3333\n      else ms_ *= 0.6667\n    }\n\n    return ms_\n  }\n\n  note_ (time) {\n    let audioCtx = this.audioCtx\n    var self = this\n\n    // stop or pause requested\n    if (this.stopped || this.paused) {\n      this.donePlaying = true\n      return true\n    }\n\n    // get note to play\n    if (!this.notes) return false\n    let note = this.notes[this.noteIndex]\n    if (!note) return false\n\n    let isBar = note.offset === 0\n    let isBeat = note.offset % Utils.duration(this.beatDuration) === 0\n    let isUp = note.flags.stroke === 'u' || note.flags.stroke === 'uu'\n    let isDown = note.flags.stroke === 'd' || note.flags.stroke === 'dd'\n    let isArpeggiated = note.flags.stroke && note.flags.stroke.length === 2\n\n    // get number of ms that this note should last\n    let ms = note.tied ? 0 : this.ms_(note)\n\n    // consume next ties note(s) if any\n    for (let nextNoteIndex = this.noteIndex + 1; nextNoteIndex < this.notes.length && this.notes[nextNoteIndex].tied; nextNoteIndex++) ms += this.ms_(this.notes[nextNoteIndex])\n\n    // beep or chord volume\n    let volume = 0.25 * (this.volume / 100.0) // base gain from 0 to 1.5 according to user volume slider\n    if (note.flags.accent) volume *= 1.5 // increase gain by 50% if accent\n    if (note.rest) volume = 0 // silence if rest\n\n    // beep frequency\n    let freqs = [440 * 1.5]\n    if (isBar) freqs[0] *= 2 // octave\n    else if (isBeat) freqs[0] *= 1.5 // quinte\n\n    // get note chord, ignored in rhythm mode\n    let chord = this.mode === this.MODE_RHYTHM ? null : note.chord\n\n    // beep duration is 5 ms\n    // actual notes are played for the whole duration if tied otherwise for 90%\n    let beepduration = chord ? (note.tied ? ms : ms * 0.90) : Math.min(ms, 5)\n\n    // for rhythm type is always square and no distortion, for actual notes use the user-defined settings\n    let type = chord ? this.type : 'square'\n    let distortion = chord ? this.distortion : null\n\n    // played chord (for a rest, chord is set but strings is not)\n    if (chord && note.strings) {\n      // get frequencies for chord notes\n      freqs = this.chord2frequencies(chord, this.mode === this.MODE_BASS ? note.strings.replace(/\\*/g, 'B') : note.strings, this.capo)\n\n      // reverse string order if up stroke\n      if (isUp) freqs = freqs.reverse()\n\n      // adjust volume according to number of simultaneous notes\n      // volume = volume / (2.0 * Math.sqrt(freqs.length));\n      // UPDATE: no, bass among chords is otherwise louder than it should\n      // UPDATE: instead increase volume only if BASS ONLY mode\n      if (this.mode === this.MODE_BASS) volume *= 3\n    }\n\n    // set next note to play\n    this.noteIndex = (this.noteIndex + 1) % this.notes.length\n\n    // info message, scheduled to display at the same time as oscillator will play our sound\n    let what = note.rest ? 'REST' : (note.tied ? 'TIED' : (chord ? chord.name + '/' + freqs.length + ' ' + (isDown ? 'B' : '') + (isUp ? 'H' : '') : 'BEEP'))\n    let message = (isBar ? '\\n|\\t' : '\\t') + ('[' + what + ']').padEnd(10, ' ') + (note.offset + Utils.durationcode(note.duration)).padEnd(5, ' ') + ' ' + ms.toFixed(0) + ' ms [VOL ' + (volume * 100) + '] ' + (isBar ? ' [BAR]' : (isBeat ? ' [BEAT]' : '')) + (note.flags.accent ? ' [ACCENT]' : '')\n    setTimeout(function () { console.info(message) }, Math.max(0, time - audioCtx.currentTime) * 1000)\n\n    // jump to next note if tied\n    if (note.tied) {\n      self.note_(time)\n      return\n    }\n\n    // play beep (1 note) or chord (N notes)\n    let fIndex = 0\n    let delay = 0\n    for (let frequency of freqs) {\n      // handle next node when last note has done playing\n      this.sound(time + delay / 1000.0, (beepduration - delay) / 1000.0, frequency, volume, distortion, type, fIndex < freqs.length - 1 ? null : function () {\n        // back on first note: stop and callback if not loop\n        if (self.noteIndex === 0 && !self.loop) {\n          self.stop()\n          if (self.onDone) self.onDone()\n        } else self.note_(time + ms / 1000.0)\n      })\n\n      // simulate the fact that strings hit first will sound first (but they'll all stop at the same time, hence substrating delay from beepduration above)\n      // when a chord is arpeggiated, take 3/4 of available duration to hit strings the one after the other\n      delay += (isArpeggiated ? (beepduration * 0.75) / freqs.length : (note.tied ? 0 : 10))\n\n      // simulate the fact that first hit strings will sound louder\n      volume *= 0.95\n\n      fIndex++\n    }\n  }\n\n  stop () {\n    this.stopped = true\n    this.paused = false\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  pause () {\n    this.stopped = false\n    this.paused = true\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  play (countdown) {\n    let audioCtx = this.audioCtx\n    let self = this\n\n    if (!this.paused) this.noteIndex = 0\n    this.stopped = false\n    this.paused = false\n\n    this.onCountdown(countdown)\n    if (countdown) this.cd = setTimeout(function () { self.play(countdown - 1) }, 1000)\n    else {\n      // compute for each note the offset wrt the bar it's contained in\n      let offset = 0\n      for (let note of this.notes) {\n        note.offset = offset\n        offset = (offset + note.duration) % (this.beatsPerBar * Utils.duration(this.beatDuration))\n      }\n\n      this.note_(audioCtx.currentTime)\n    }\n  }\n\n  rewind () {\n    if (this.stopped) return\n\n    if (this.paused) {\n      this.noteIndex = 0\n      return\n    }\n\n    let self = this\n    this.donePlaying = false\n    this.stop()\n    let recfun = function () {\n      if (self.donePlaying) self.play()\n      else setTimeout(recfun, 100)\n    }\n    recfun()\n  }\n\n  getTempo () {\n    return (this.tempo * this.speedpct / 100.0).toFixed(0)\n  }\n\n  speed (pct) {\n    if (pct < 0) throw new Error('Invalid tempo percentage: ' + pct)\n\n    this.speedpct = pct\n\n    // compute ms per duration unit based on given tempo and beat duration\n    let msPerBeat = 60000 / (this.tempo * this.speedpct / 100.0) // ms/beat = ms/minute : beats/minute\n    this.msPerUnit = msPerBeat / Utils.duration(this.beatDuration) // ms/unit = ms/beat : units/beat\n    console.info('Player gone to ' + msPerBeat + ' ms / beat')\n  }\n\n  speedup (step) {\n    this.speed(Math.min(500, this.speedpct + step))\n  }\n\n  slowdown (step) {\n    this.speed(Math.max(20, this.speedpct - step))\n  }\n\n  setMode (mode) {\n    this.mode = parseInt(mode, 10)\n    console.info('Player gone to mode ' + mode)\n  }\n\n  setType (type) {\n    this.type = type\n    console.info('Player gone to type ' + type)\n  }\n\n  setDisto (d) {\n    this.distortion = parseInt(d, 10)\n    console.info('Player gone to disto ' + d)\n  }\n\n  setVolume (v) {\n    this.volume = parseInt(v, 10)\n    console.info('Player gone to volume ' + v)\n  }\n}\n"]}