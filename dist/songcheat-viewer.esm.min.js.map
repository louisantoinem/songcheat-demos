{"version":3,"sources":["../src/player_ui.js","../index.js","../../songcheat-core/dist/songcheat-core.esm.js","../../songcheat-chordpix/dist/songcheat-chordpix.esm.js","../../songcheat-vextab/dist/songcheat-vextab.esm.js","../../songcheat-player/node_modules/@mohayonao/wave-tables/index.js","../../songcheat-player/src/player.js"],"names":["PlayerUI","audioCtx","songcheat","notes","loop","self","this","unitIndex","unit","structure","showUnitIndex","phrase","part","phrases","bar","bars","note","rhythm","compiledScore","chordedNote","JSON","parse","stringify","chord","chords","placeholderIndex","length","Error","push","player","Player","capo","parseInt","signature","type","wave","onDone","$stopLink","trigger","onCountdown","c","$countdownZone","html","$div","$","css","margin-top","position","$speedMention","font-size","font-weight","padding-left","updateSpeed","getTempo","$tempoSlider","val","speedpct","color","text-shadow","top","right","$speed100Link","on","speed","$playLink","play","paused","find","show","hide","$rewindLink","rewind","$pauseLink","pause","stop","append","unique","Date","now","musicalSwitches","strings","$divMusicalSwitches","display","MODE_CHORDS","MODE_BASS","MODE_RHYTHM","change","setMode","$typeSwitch","attr","text","instrument","waveTables","setType","$distoSlider","distortion","setDisto","$volumeSlider","volume","setVolume","shuffle","Utils","duration","cursor","margin-right","addClass","addEvent","elem","event","fn","addEventListener","attachEvent","call","window","onChange","data","checkNotify","e","delay","value","priorValue","setTimeout","events","i","go","song","debug","DEBUG","p","location","href","encodeQueryData","$divScore","$divChords","$divParts","$divStructure","$divLyrics","$divRhythms","scoreWidth","chordWidth","rhythmsWidth","get","URLSearchParams","search","canvas","getContext","scale","mode","lyricsMode","showUnit","barsPerLine","maxsp","splitUnits","splitParts","partdisplay","Math","min","compiler","Compiler","scc","parent","message","console","error","click","name","each","scIndex","substr","width","vertical-align","url","ChordPix","$cDiv","comment","text-align","parts","$divPart","$partsZone","text-decoration","margin-bottom","displayParts","margin","lskey","id","lyrics","localStorage","getItem","$divUnit","$editLink","$lyricsZone","displayLyrics","$divUnitEdit","$closeLink","saveAndUpdate","updateVextab","setItem","$canvas","after","remove","renderer","Vex","Flow","Renderer","Backends","CANVAS","artist","Artist","vextab","VexTab","info","SongcheatVexTab","Songcheat2VexTab","render","focus","log","rhythms","$divRhythm","before","div","barDuration","warning","floor","durationcodes","score","tempo","Notes2Stave","SVG","getPartText","warnings","parseLyrics","warn","getUnitText","_typeof","Symbol","iterator","obj","constructor","prototype","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","toConsumableArray","arr","Array","isArray","arr2","from","a","b","str","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","join","ret","d","encodeURIComponent","code","units","_arr","_i","codes","current","rest","durationcode","fret","String","fromCharCode","charCodeAt","startingFret","char2fret","relFret","fret2char","tablature","fingering","result","string","indexOf","mute","ParserException","line","Parser_","blocks","tokens","tokenize","tokenIndex","token","keyword","isKeyword","params","handler","handleDefault","lastResult","chordIndex","rhythmIndex","partIndex","paramIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","err","return","camelCase","reSpaces","reNewline","lineNumber","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","parseFloat","handleSignature","beatsPerBar","beatDuration","symbol","splice","pIndex","param","found","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_part","_found","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_chord","handleChord","args","apply","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","Parser","parser_","getPrecedingKeyword","MIN_LYRICS_BARLEN","LYRICS_SUM_DURATIONS","KEEP_EMPTY_LINES","CompilerException","Compiler_","arguments","time","lyricsUnit","resolveIds","unitsByPart","numberByPart","_unit","colors","compileRhythm","_part2","phraseIndex","chordChanges","lastChord","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","addChordChanges","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","barIndex","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_bar","chordChangesMode","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_c","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_c2","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_phrase","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_bar2","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","resolveId","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_part3","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","chordId","collection","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","initialNoteDuration","noteDuration","placeholdercount","lastToken","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","tied","flags","flagsString","stroke","accent","pm","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","flag","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","o","resetAtBars","offset","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","hidden","defaultCursorStep","groups","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","registerGroup","missingDuration","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","group","groupLength","getGroupLength","plen","max","ceil","pmax","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","_group","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","chordDuration","_group3","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","g","getChordDisplay","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","_phrase2","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","_arr2","_i2","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","_chordDuration","_group4","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","_g","debugText","zeroDuration","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","_group2","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","concat","needFinalSpace","maxLength","minLength","filler","groupText","chordInserts","_iteratorNormalCompletion37","_didIteratorError37","_iteratorError37","_step37","_iterator37","_group5","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","_iteratorNormalCompletion40","_didIteratorError40","_iteratorError40","_step40","_iterator40","_iteratorNormalCompletion41","_didIteratorError41","_iteratorError41","_step41","_iterator41","_chordChange","positionDelta","positionDelta_","_iteratorNormalCompletion38","_didIteratorError38","_iteratorError38","_step38","_iterator38","chordInsert","skip","unitText_","chordText","_iteratorNormalCompletion39","_didIteratorError39","_iteratorError39","_step39","_iterator39","_iteratorNormalCompletion42","_didIteratorError42","_iteratorError42","_step42","_iterator42","_chordInsert","inserted","interlace","step","addDuration","compiler_","set","title","compile","classCallCheck$1","createClass$1","toConsumableArray$1","ChordPixException","barredFret","rel2abs","frets","minFret","filter","x","maxFret","nbFrets","abs2rel","relTablature","_char","VexTabException","transpose","vextabchord","chordStrings","strokes","accents","Chord2VexTab","subtitle","hs","notation","tuning","Note2VexTab","lastInPhrase","textGroups","staveDuration","h","font","gap","available","Unit2VexTab","stems","showLyrics","notesSlashed","lyricsGroups","chordGroups","chordChange","fingeringGroups","pmGroups","_note","_phrase3","lastPhraseInPart","_bar3","lastBarInPhrase","noteIndex","_note2","phraseNote","chordedPhraseNote","partDone","Text2VexTab","Bass","require$$0","BassAmp360","require$$1","BassFuzz","require$$2","BassFuzz2","require$$3","BassSubDub","require$$4","BassSubDub2","require$$5","Brass","require$$6","BritBlues","require$$7","BritBluesDriven","require$$8","Buzzy1","require$$9","Buzzy2","require$$10","Celeste","require$$11","ChorusStrings","require$$12","Dissonant1","require$$13","Dissonant2","require$$14","DissonantPiano","require$$15","DroppedSaw","require$$16","DroppedSquare","require$$17","DynaEPBright","require$$18","DynaEPMed","require$$19","Ethnic33","require$$20","Full1","require$$21","Full2","require$$22","GuitarFuzz","require$$23","Harsh","require$$24","MklHard","require$$25","Noise","require$$26","Organ2","require$$27","Organ3","require$$28","PhonemeAh","require$$29","PhonemeBah","require$$30","PhonemeEe","require$$31","PhonemeO","require$$32","PhonemeOoh","require$$33","PhonemePopAhhhs","require$$34","Piano","require$$35","Pulse","require$$36","PutneyWavering","require$$37","Saw","require$$38","Square","require$$39","TB303Square","require$$40","Throaty","require$$41","Triangle","require$$42","Trombone","require$$43","TwelveOpTines","require$$44","TwelveStringGuitar1","require$$45","WarmSaw","require$$46","WarmSquare","require$$47","WarmTriangle","require$$48","Wurlitzer","require$$49","Wurlitzer2","require$$50","[object Object]","config","stopped","amount","k","curve","Float32Array","deg","PI","abs","frequency","onended","gainNode","createGain","gain","distoNode","createWaveShaper","makeDistortionCurve","oversample","connect","destination","oscillator","createOscillator","setPeriodicWave","createPeriodicWave","real","imag","start","freqs","pow","ms_","msPerUnit","donePlaying","isBar","isBeat","isUp","isDown","isArpeggiated","ms","nextNoteIndex","beepduration","chord2frequencies","reverse","what","padEnd","currentTime","note_","fIndex","sound","cd","clearTimeout","countdown","recfun","pct","msPerBeat","jQuery","AudioContext","webkitAudioContext","audioContext","NOLOGO","sc","samples","document","year","naturalSize","absMinSize","minSize","maxSize","rhythmWidth","_scIndex","sc_"],"mappings":"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","sourcesContent":["import { Utils } from 'songcheat-core'\nimport { Player, waveTables } from 'songcheat-player'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\nexport function PlayerUI (audioCtx, songcheat, notes, loop) {\n  var self = this\n\n  if (!notes) {\n    // whole song (or selected unit)\n    notes = []\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (songcheat.showUnitIndex !== null && songcheat.showUnitIndex !== unitIndex) { unitIndex++; continue }\n      for (let phrase of unit.part.phrases) {\n        for (let bar of phrase.bars) {\n          for (let note of bar.rhythm.compiledScore) {\n            let chordedNote = JSON.parse(JSON.stringify(note))\n            chordedNote.chord = bar.chords[note.placeholderIndex % bar.chords.length]\n            if (!chordedNote.chord) throw new Error('No chord found for placeholder ' + (note.placeholderIndex + 1))\n            notes.push(chordedNote)\n          }\n        }\n      }\n      unitIndex++\n    }\n  }\n\n  // create player\n  let player = new Player(audioCtx, notes, {\n    loop: loop,\n    capo: parseInt(songcheat.capo, 10),\n    signature: songcheat.signature,\n    type: songcheat.wave,\n    onDone: function () { $stopLink.trigger('click') },\n    onCountdown: function (c) { $countdownZone.html(c || '') }\n  })\n\n  // controls\n  this.$div = $('<div>').css({ 'margin-top': '10px', 'position': 'relative' })\n\n  let $speedMention = $('<span>').css({ 'font-size': '.9em', 'font-weight': 'bold', 'padding-left': '10px' })\n  let updateSpeed = function () {\n    $speedMention.html(player.getTempo() + ' bpm')\n    $tempoSlider.val(player.speedpct)\n  }\n  let $countdownZone = $('<span>').css({ 'font-size': '4em', 'font-weight': 'normal', 'color': 'red', 'text-shadow': '4px 4px 2px rgba(200, 150, 150, 1)', 'position': 'absolute', 'top': '10px', 'right': '10px' })\n\n  let $speed100Link = $('<a>').css({ 'padding-left': '10px' }).html('Original').on('click', function () {\n    player.speed(100)\n    updateSpeed()\n  })\n\n  let $playLink = $('<a>').html('&#9658;').on('click', function () {\n    player.play(player.paused || loop ? 0 : 3)\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $playLink.hide()\n  })\n\n  let $rewindLink = $('<a>').html('&#9668;').on('click', function () {\n    player.rewind()\n  })\n\n  let $pauseLink = $('<a>').html('&#10074;&#10074;').on('click', function () {\n    player.pause()\n    self.$div.find('.autohide').show()\n    $speedMention.show()\n    $pauseLink.hide()\n  })\n\n  let $stopLink = $('<a>').html('&#9724').on('click', function () {\n    player.stop()\n    self.$div.find('.autohide').hide()\n    $speedMention.hide()\n    $playLink.show()\n  })\n\n  this.$div\n    .append($playLink)\n    .append($pauseLink)\n    .append($stopLink)\n    .append($rewindLink)\n    .append('&nbsp;&nbsp;')\n    .append($countdownZone)\n    .append('<hr class=\"autohide\" style=\"clear:both; border:1px solid #ccc\"/>')\n\n  let unique = Date.now()\n\n  // enable mode and type switch if at least one actual musical note found (with chords and strings to play)\n  let musicalSwitches = false\n  for (let note of notes) { if (note.chord && note.strings) { musicalSwitches = true; break } }\n  if (musicalSwitches) {\n    let $divMusicalSwitches = $(\"<div style='float:right'>\")\n    this.$div.append($divMusicalSwitches)\n\n    // mode switch\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '10px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_CHORDS + '\" checked>')).append(' Chords ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_BASS + '\">')).append(' Bass only ')\n      .append($('<input type=\"radio\" name=\"modeswitch' + unique + '\" value=\"' + player.MODE_RHYTHM + '\">')).append(' Rhythm '))\n    this.$div.find('input[name=modeswitch' + unique + ']').change(function () { player.setMode($(this).val()) })\n\n    // type switch\n    let $typeSwitch = $('<select>')\n    $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' }).append('Wave form: ').append($typeSwitch))\n    for (let type of ['sine', 'square', 'sawtooth', 'triangle']) $typeSwitch.append($('<option>').attr('selected', player.type === type).attr('value', type).text('(' + type + ')'))\n    for (let instrument in waveTables) $typeSwitch.append($('<option>').attr('selected', player.type === instrument).attr('value', instrument).text(instrument))\n    $typeSwitch.change(function () { player.setType($(this).val()) })\n\n    // disto slider\n    let $distoSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.distortion + '\" class=\"slider\" style=\"margin-top: 10px\">')\n    // $divMusicalSwitches.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append(\"Distortion: \").append($distoSlider));\n    $distoSlider.on('input', function () { player.setDisto(parseInt($(this).val(), 10)) })\n    $distoSlider.on('change', function () { player.setDisto(parseInt($(this).val(), 10)) })\n  }\n\n  // tempo slider\n  let $tempoSlider = $('<input type=\"range\" min=\"1\" max=\"200\" value=\"' + player.speedpct + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Tempo: ').append($tempoSlider).append($speedMention).append($speed100Link))\n  $tempoSlider.on('input', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n  $tempoSlider.on('change', function () {\n    player.speed(parseInt($(this).val(), 10))\n    updateSpeed()\n  })\n\n  // volume slider\n  let $volumeSlider = $('<input type=\"range\" min=\"0\" max=\"100\" value=\"' + player.volume + '\" class=\"slider\" style=\"margin-top: 10px\">')\n  this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '5px', 'display': 'block' }).append('Volume: ').append($volumeSlider))\n  $volumeSlider.on('input', function () { player.setVolume(parseInt($(this).val(), 10)) })\n  $volumeSlider.on('change', function () { player.setVolume(parseInt($(this).val(), 10)) })\n\n  // allow to disable shuffle if song has a shuffle defined\n  if (songcheat.signature.shuffle) {\n    this.$div.append($('<div class=\"autohide\">').css({ 'margin-top': '15px', 'display': 'block' })\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"on\" checked>')).append(' Shuffle On ')\n      .append($('<input type=\"radio\" name=\"shuffleswitch' + unique + '\" value=\"off\">')).append(' Shuffle Off '))\n    this.$div.find('input[name=shuffleswitch' + unique + ']').change(function () {\n      player.shuffle = $(this).val() === 'on' ? Utils.duration(songcheat.signature.shuffle) : null\n    })\n  }\n\n  this.$div.find('a').css({ 'cursor': 'pointer', 'font-size': '1em', 'margin-right': '10px' }).addClass('autohide')\n\n  // initialize in stopped state\n  updateSpeed()\n  $stopLink.trigger('click')\n}\n\nPlayerUI.prototype.div = function () {\n  return this.$div\n}\n","import { Utils, Compiler } from 'songcheat-core'\nimport { ChordPix } from 'songcheat-chordpix'\nimport { VexTab as SongcheatVexTab } from 'songcheat-vextab'\nimport { PlayerUI } from './src/player_ui.js'\nimport samples from 'songcheat-samples'\n\n// create audio context\nlet audioCtx = new (window.AudioContext || window.webkitAudioContext || window.audioContext)()\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// https://github.com/rollup/rollup/issues/1803/\n// import { VexTab, Artist, Vex } from 'vextab'\nlet VexTab = window.VexTab\nlet Artist = window.Artist\nlet Vex = window.Vex\n\nlet DEBUG = 0\nlet localStorage = window.localStorage\nlet compiler = null\n\nArtist.NOLOGO = true\n\nfunction addEvent (elem, event, fn) {\n  if (elem.addEventListener) return elem.addEventListener(event, fn, false)\n  elem.attachEvent('on' + event, function () { return (fn.call(elem, window.event)) })\n}\n\nfunction onChange (elem, fn, data) {\n  var priorValue = elem.value\n\n  function checkNotify (e, delay) {\n    // notify if actually changed\n    if (elem.value !== priorValue) {\n      priorValue = elem.value\n      fn.call(this, e, data)\n    } else {\n      // the actual data change happens after some events so we queue a check\n      if (delay) setTimeout(function () { checkNotify(e, false) }, 0)\n    }\n  }\n\n  var events = ['keyup', false, 'blur', false, /* \"focus\", false, */ 'drop', true, 'change', false, 'input', false, 'paste', true, 'cut', true, 'copy', true]\n  for (let i = 0; i < events.length; i += 2) addEvent(elem, events[i], function (e) { checkNotify.call(this, e, events[i + 1]) })\n}\n\nfunction go (song, songcheat) {\n  let data = { 'song': song, 'debug': DEBUG }\n  for (let p of ['mode', 'lyricsMode', 'showUnit', 'maxsp', 'barsPerLine', 'splitUnits', 'splitParts', 'partdisplay']) data[p] = songcheat[p]\n  window.location.href = 'index.html?' + Utils.encodeQueryData(data)\n}\n\nfunction songcheat (songcheat, $divScore, $divChords, $divParts, $divStructure, $divLyrics, $divRhythms, scoreWidth, chordWidth, rhythmsWidth) {\n  var get = new window.URLSearchParams(window.location.search)\n  DEBUG = parseInt(get.get('debug'), 10) || DEBUG // debug level\n\n  scoreWidth = scoreWidth || 800\n  chordWidth = chordWidth || 250\n\n  let canvas = $divScore[0]\n  canvas.getContext('2d')\n\n  // default values for mode, bars per line and scale\n  songcheat.scale = songcheat.scale || 0.92\n  songcheat.mode = songcheat.mode || 'rt'\n  songcheat.lyricsMode = songcheat.lyricsMode || 's'\n  songcheat.showUnit = songcheat.showUnit || '*'\n  songcheat.barsPerLine = songcheat.barsPerLine || 4\n  songcheat.maxsp = typeof songcheat.maxsp === 'undefined' ? 1 : songcheat.maxsp\n  songcheat.splitUnits = typeof songcheat.splitUnits === 'undefined' ? 0 : songcheat.splitUnits\n  songcheat.splitParts = typeof songcheat.splitParts === 'undefined' ? 4 : songcheat.splitParts\n  songcheat.partdisplay = songcheat.partdisplay || 'compact'\n\n  // settings that may be forced in GET\n  songcheat.mode = get.get('mode') || songcheat.mode\n  songcheat.lyricsMode = get.get('lyricsMode') || songcheat.lyricsMode\n  songcheat.showUnit = get.get('showUnit') || songcheat.showUnit\n  songcheat.barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : songcheat.barsPerLine\n  songcheat.maxsp = get.get('maxsp') ? parseInt(get.get('maxsp'), 10) : songcheat.maxsp\n  songcheat.splitUnits = get.get('splitUnits') ? parseInt(get.get('splitUnits'), 10) : songcheat.splitUnits\n  songcheat.splitParts = get.get('splitParts') ? parseInt(get.get('splitParts'), 10) : songcheat.splitParts\n  songcheat.partdisplay = get.get('partdisplay') || songcheat.partdisplay\n\n  // ensure showUnit is within the bounds\n  songcheat.showUnitIndex = songcheat.showUnit === '*' ? null : Math.min(songcheat.structure.length - 1, parseInt(songcheat.showUnit, 10))\n  if (songcheat.showUnitIndex < 0) songcheat.showUnitIndex = null\n  songcheat.showUnit = songcheat.showUnitIndex !== null ? songcheat.showUnitIndex : '*'\n\n  // compile\n  try {\n    compiler = new Compiler(songcheat, DEBUG)\n    songcheat = compiler.scc\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n    return false\n  }\n\n  // links to other songs\n  $('a[rel]').click(function () {\n    go(parseInt($(this).attr('rel'), 10) + 1, songcheat)\n  })\n\n  // build unit select\n  let unitIndex = 0\n  for (let unit of songcheat.structure) $('select[name=showUnit]').append($('<option>').val(unitIndex++).text(unit.name))\n\n  // for each user controlled setting\n  $('select').each(function () {\n    // initialize\n    $(this).val(songcheat[$(this).attr('name')])\n\n    // reload on change\n    $(this).change(function () {\n      songcheat[$(this).attr('name')] = $(this).val()\n      go(window.scIndex + 1, songcheat)\n    })\n  })\n\n  // shuffle\n  if (songcheat.signature.shuffle) {\n    $('#left h3:first').append($('<span>').html('<br/>Shuffle ' + (songcheat.signature.shuffle === ':4' ? 'quarter notes' : songcheat.signature.shuffle.substr(1) + 'th notes')))\n  }\n\n  // shuffle 8th image\n  if (songcheat.signature.shuffle === ':8') {\n    $('#left h3:first').append($('<img>').css({ 'padding-left': '50px', 'width': '100px', 'display': 'inline', 'vertical-align': 'bottom' }).attr('src', 'img/shuffle_8th.svg'))\n  }\n\n  // chord diagrams\n  for (let chord of songcheat.chords) {\n    var url = DEBUG ? 'img/missing_diagram.png' : ChordPix.url(chord, chordWidth)\n    let $cDiv = $('<div>').css({ 'display': 'inline-block', 'vertical-align': 'top' })\n    $divChords.append($cDiv)\n    $cDiv.append($('<img>').attr('src', url).attr('title', chord.comment).css({ 'display': 'block' /* removes whitespace below image */, 'width': chordWidth + 'px' }))\n    $cDiv.append($('<p>').css({ 'width': chordWidth + 'px', 'font-size': '0.85em', 'text-align': 'center', 'margin-top': '0px' }).html(chord.comment))\n  }\n\n  //  ascii parts\n  for (let part of songcheat.parts) {\n    let $divPart = $('<div>').css({ 'color': part.color })\n    let $partsZone = $('<p>')\n    $divPart.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '0px' }).html(part.name))\n    $divPart.append($partsZone)\n    $divParts.append($divPart)\n    displayParts(songcheat, part, $partsZone)\n  }\n\n  //  ascii structure\n  for (let unit of songcheat.structure) {\n    $divStructure.append($('<p>').css({ 'font-weight': 'bold', 'margin': '5px 0px', 'color': unit.part.color }).html('[' + unit.name + ']'))\n  }\n\n  //  ascii lyrics\n  for (let unit of songcheat.structure) {\n    // load from local storage\n    let lskey = 'SongCheatLyrics.' + songcheat.id + '.unit.' + unit.name\n    unit.lyrics = localStorage.getItem(lskey) || unit.lyrics\n\n    // view zone\n    let $divUnit = $('<div>').css({ 'color': unit.part.color })\n    let $editLink = $('<a>').html('Edit').css('text-decoration', 'underline').css('cursor', 'pointer').css('font-size', '0.75em').css('float', 'right').css('margin-right', '10px')\n    let $lyricsZone = $('<p>').css('line-height', '150%')\n    $divUnit.append($('<p>').css({ 'font-weight': 'bold', 'text-decoration': 'normal', 'margin-bottom': '2px', 'margin-top': '35px' }).html('[' + unit.name + '] ').append($editLink))\n    $divUnit.append($lyricsZone)\n    $divLyrics.append($divUnit)\n    displayLyrics(songcheat, unit, $lyricsZone)\n\n    // hidden edit zone\n    let $divUnitEdit = $('<div>')\n    let $closeLink = $('<a>').html('Close').css('text-decoration', 'underline').css('cursor', 'pointer')\n    $divUnitEdit.append($('<textarea>').css('font-size', '1em').css('width', '400px').css('height', '200px'))\n    $divUnitEdit.append('<br/>').append($closeLink)\n    $divLyrics.append($divUnitEdit.hide())\n\n    // save lyrics and update ui\n    let saveAndUpdate = function (updateVextab) {\n      // save to local storage\n      unit.lyrics = $(this).val()\n      localStorage.setItem(lskey, unit.lyrics)\n\n      // re-display ascii\n      displayLyrics(songcheat, unit, $lyricsZone)\n\n      if (updateVextab) {\n        // recreate canvas\n        let $canvas = $('<canvas>')\n        $(canvas).after($canvas).remove()\n        canvas = $canvas[0]\n\n        // reload vextab score\n        let renderer = new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS)\n        let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n        let vextab = new VexTab(artist)\n        console.info('Parsing score...')\n        vextab.parse(SongcheatVexTab.Songcheat2VexTab(songcheat))\n        console.info('Rendering score...')\n        artist.render(renderer)\n        console.info('Score done!')\n      }\n    }\n\n    // edit action\n    $editLink.on('click', function () {\n      $divUnit.find('p:last') // .hide();\n      $divUnitEdit.show().find('textarea').val(unit.lyrics).focus()\n    })\n\n    // close action\n    $closeLink.on('click', function () {\n      $divUnitEdit.hide()\n      saveAndUpdate.call($divUnitEdit.find('textarea')[0], true)\n    })\n\n    // auto-save\n    onChange($divUnitEdit.find('textarea')[0], function (e) {\n      console.log('Auto saving on event ' + e.type)\n      saveAndUpdate.call(this, true)\n    })\n  }\n\n  // parse and render rhythms with vextab\n  for (let rhythm of songcheat.rhythms) {\n    let $divRhythm = $('<div>')\n    $divRhythms.append($divRhythm)\n\n    // player controls\n    $divRhythm.before(new PlayerUI(audioCtx, songcheat, rhythm.compiledScore, true).div())\n\n    // warning if not a whole number of bars\n    if (rhythm.duration % songcheat.barDuration) {\n      let warning = 'Rhythm ' + rhythm.id + ' is currently equivalent to ' + Math.floor(rhythm.duration / songcheat.barDuration) + ' bar(s) and ' + Utils.durationcodes(rhythm.duration % songcheat.barDuration) + '. A rhythm unit should be equivalent to a whole number of bars.'\n      $divRhythm.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n    }\n\n    try {\n      console.info('Converting rhythm to vextab score...')\n      let score = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=false tab-stem-direction=up\\n'\n      score += SongcheatVexTab.Notes2Stave(songcheat, 0, rhythm.compiledScore, true, 'top', 'Rhythm ' + (rhythm.name || rhythm.id), 1, true, false) + ' options space=20'\n      console.info('Parsing score...')\n      let artist = new Artist(10, 10, rhythmsWidth, { scale: 1.0 })\n      let vextab = new VexTab(artist)\n      vextab.parse(score)\n      console.info('Rendering score...')\n      artist.render(new Vex.Flow.Renderer($divRhythm[0], Vex.Flow.Renderer.Backends.SVG))\n      console.info('Score done!')\n    } catch (e) {\n      $divRhythm.html(e.message).css('color', 'red')\n      console.error(e)\n    }\n  }\n\n    // player controls\n  $(canvas).before(new PlayerUI(audioCtx, songcheat).div())\n\n    // parse and render full song score with vextab\n  try {\n    console.info('Converting songcheat to vextab score...')\n    let score = SongcheatVexTab.Songcheat2VexTab(songcheat)\n    console.info('Parsing score...')\n    let artist = new Artist(10, 10, scoreWidth, { scale: songcheat.scale })\n    let vextab = new VexTab(artist)\n    vextab.parse(score)\n    console.info('Rendering score...')\n    artist.render(new Vex.Flow.Renderer(canvas, Vex.Flow.Renderer.Backends.CANVAS))\n    console.info('Score done!')\n  } catch (e) {\n    $divScore.parent().append($('<p>').html(e.message).css('color', 'red'))\n    console.error(e)\n  }\n}\n\nfunction displayParts (songcheat, part, $partsZone) {\n  // clear eveyrthing\n  $partsZone.parent().find('p.warning,p.error').remove()\n  $partsZone.html('')\n\n  try {\n    // if compact part display enabled, set maxsp = 1\n    // if full part display enabled, force maxsp = 0: we want the exact position of chords\n    // always split by N bars (no lyrics so split as entered makes no sense, splitParts is never 0)\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $partsZone.append(compiler.getPartText(part, songcheat.partdisplay === 'compact' ? 1 : 0, songcheat.splitParts, 'rhythm', false))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $partsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nfunction displayLyrics (songcheat, unit, $lyricsZone) {\n  // clear eveyrthing\n  $lyricsZone.parent().find('p.warning,p.error').remove()\n  $lyricsZone.html('')\n\n  try {\n    // parse lyrics\n    let warnings = compiler.parseLyrics(unit)\n\n    // display parser warnings\n    for (let warning of warnings) {\n      $lyricsZone.before($('<p>').addClass('warning').css('color', 'orange').html('Warning: ' + warning))\n      console.warn('[' + unit.name + '] ' + warning)\n    }\n\n    // build and display lyrics\n    // we can use chord changes mode \"rhythm\", \"bar\" or \"phrase\", use \"rhythm\" as for vextab\n    $lyricsZone.append(compiler.getUnitText(unit, songcheat.maxsp, songcheat.splitUnits, 'rhythm', songcheat.maxsp !== 1))\n  } catch (e) {\n    // display fatal error while parsing or building lyrics\n    $lyricsZone.before($('<p>').addClass('error').css('color', 'red').html('Error: ' + e.message))\n    console.error(e)\n  }\n}\n\nvar get = new window.URLSearchParams(window.location.search)\nlet scIndex = window.scIndex = (parseInt(get.get('song'), 10) || 1) - 1\nlet sc = samples[scIndex]\nsc.id = scIndex + 1 // simulate a mongodb id for saving lyrics\n\ndocument.title = sc.title + ' | ' + document.title\n$('#left h1').html(sc.title)\n$('#left h2').html(sc.artist + ', ' + sc.year)\n$('#left h3.tempo').html('Tempo: ' + sc.signature.tempo + ' bpm')\n$('#left p').html(sc.comment)\n\n$('#left h3.capo').html('Capo: ' + (sc.capo > 0 ? sc.capo : 'n/a'))\n$('#left h3.tuning').html('Tuning: ' + sc.tuning)\n\n$('#middle h4, #right h4').css('text-decoration', 'underline').css('font-size', '1.1em').css('margin', '0.5em 0em')\n\nlet barsPerLine = get.get('barsPerLine') ? parseInt(get.get('barsPerLine'), 10) : (sc.barsPerLine || 4)\nlet naturalSize = $(window).width() * 0.45\nlet absMinSize = 640\nlet minSize = Math.max(barsPerLine * 300, absMinSize)\nlet maxSize = Math.max(barsPerLine * 450, absMinSize)\nvar scoreWidth = Math.min(maxSize, Math.max(minSize, naturalSize))\nvar rhythmWidth = Math.min(750, Math.max(400, $(window).width() * 0.24))\n$('#right').css('width', scoreWidth + 'px')\n\nvar _scIndex = 0\nfor (var sc_ of samples) {\n  /* if (_scIndex != scIndex) */\n  $('#links').append($(\"<a style='font-size: 0.9em; color: black; cursor: pointer; text-decoration:underline'>\").attr('rel', _scIndex).html(sc_.title + ' (' + sc_.artist + ', ' + sc_.year + ')')).append('<br/>')\n  _scIndex++\n}\n\nsongcheat(sc, $('#score'), $('#chords'), $('#parts'), $('#structure'), $('#lyrics'), $('#rhythms'), scoreWidth, 175, rhythmWidth)\n$('body').show()\n","/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nexport { Utils, Parser, ParserException, Compiler, CompilerException };\n//# sourceMappingURL=songcheat-core.esm.js.map\n","/**\n * SongCheat ChordPix 1.0.0 built on Tue Dec 26 2017 01:29:00 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-chordpix\n */\n\n/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nvar classCallCheck$1 = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray$1 = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar ChordPixException = function () {\n  function ChordPixException(message) {\n    classCallCheck$1(this, ChordPixException);\n\n    this.message = message;\n  }\n\n  createClass$1(ChordPixException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Chordpix error: ' + this.message;\n    }\n  }]);\n  return ChordPixException;\n}();\n\nvar ChordPix = function () {\n  function ChordPix() {\n    classCallCheck$1(this, ChordPix);\n  }\n\n  createClass$1(ChordPix, null, [{\n    key: 'parse',\n    value: function parse(url) {\n      try {\n        // validate and explode url at slashes\n        if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL');\n        var parts = url.split(/\\//);\n\n        // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n        var name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b');\n\n        // get starting fret\n        var startingFret = parseInt(parts[7], 10);\n\n        // get absolute barred fret (single char) (\"-\" kept as is)\n        var barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret);\n\n        // build an absolute tablature (single char x6) (\"x\" kept as is)\n        var tablature = '';\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = parts[8][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var char = _step.value;\n            tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return {\n          name: name,\n          tablature: tablature,\n          fingering: parts[9] + '/' + barredFret,\n          comment: ''\n        };\n      } catch (e) {\n        throw new ChordPixException('[URL ' + url + '] ' + e.message);\n      }\n    }\n  }, {\n    key: 'url',\n    value: function url(chord, chordWidth) {\n      try {\n        // check tablature is valid\n        if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string');\n        if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)');\n        if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)');\n\n        // check fingering is valid\n        if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string');\n        if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)');\n        if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)');\n        if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret');\n\n        // convert 6 chars into 6 integers (null for x)\n        var frets = [];\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = chord.tablature[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var char = _step2.value;\n            frets.push(char === 'x' ? null : Utils.char2fret(char));\n          } // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var minFret = frets.filter(function (x) {\n          return x;\n        }).length > 0 ? Math.min.apply(Math, toConsumableArray$1(frets.filter(function (x) {\n          return x;\n        }))) : 1;\n        var maxFret = frets.filter(function (x) {\n          return x;\n        }).length > 0 ? Math.max.apply(Math, toConsumableArray$1(frets.filter(function (x) {\n          return x;\n        }))) : 1;\n\n        // get number of frets to display on diagram (with minimum of 4)\n        var nbFrets = Math.max(4, maxFret + 1 - minFret);\n\n        // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n        var startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret;\n\n        // get relative barred fret (\"-\" kept as is)\n        var fingering = chord.fingering.split('/');\n        if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret);\n\n        // build a relative tablature (\"0\" and \"x\" kept as is)\n        var relTablature = '';\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = chord.tablature[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var _char = _step3.value;\n            relTablature += _char === 'x' || _char === '0' ? _char : Utils.abs2rel(_char, startingFret);\n          } // use nice ♯ and ♭ in diagram (replace only last occurence)\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature;\n\n        // build final url\n        return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png';\n      } catch (e) {\n        throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message);\n      }\n    }\n  }]);\n  return ChordPix;\n}();\n\nexport { ChordPix, ChordPixException };\n//# sourceMappingURL=songcheat-chordpix.esm.js.map\n","/**\n * SongCheat VexTab 1.0.0 built on Tue Dec 26 2017 01:31:53 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-vextab\n */\n\n/**\n * SongCheat Core 1.0.0 built on Tue Dec 26 2017 01:23:29 GMT+0100 (CET).\n  * Copyright (c) 2017 Louis Antoine <louisantoinem@gmail.com>\n *\n * http://www.songcheat.io  http://github.com/louisantoinem/songcheat-core\n */\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Utils = function () {\n  function Utils() {\n    classCallCheck(this, Utils);\n  }\n\n  createClass(Utils, null, [{\n    key: 'arraysEqual',\n\n    /**\n    * Array helper functions\n    */\n\n    value: function arraysEqual(a, b) {\n      if (a === b) return true;\n      if (a === null || b === null) return false;\n      if (a.length !== b.length) return false;\n      for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i]) return false;\n      }\n      return true;\n    }\n\n    /**\n    * String helper functions\n    */\n\n  }, {\n    key: 'title',\n    value: function title(str) {\n      return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n';\n    }\n  }, {\n    key: 'firstUpper',\n    value: function firstUpper(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n  }, {\n    key: 'camelCase',\n    value: function camelCase(s, firstUpper) {\n      var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) {\n        return group1.toUpperCase();\n      });\n      return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel;\n    }\n  }, {\n    key: 'spaces',\n    value: function spaces(length, char) {\n      if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number');\n      var s = '';\n      for (var i = 0; i < length; i++) {\n        s += char || ' ';\n      }return s;\n    }\n\n    /**\n     * Interlace two multi line strings: one line of each file in alternance\n     * If the second file contains more line then the first one, these additional lines will be ignored\n     **/\n\n  }, {\n    key: 'interlace',\n    value: function interlace(text1, text2, sepLine, keepEmptyLines) {\n      var a1 = text1.split(/\\r?\\n/);\n      var a2 = text2.split(/\\r?\\n/);\n      var a = a1.map(function (v, i) {\n        var lines = keepEmptyLines || a2[i] && a2[i].trim() ? [v, a2[i]] : [v];\n        if (typeof sepLine === 'string') lines.push(sepLine);\n        return lines.join('\\n');\n      });\n      return a.join('\\n');\n    }\n\n    /**\n     * Encode given parameters as a GET query string\n     **/\n\n  }, {\n    key: 'encodeQueryData',\n    value: function encodeQueryData(data) {\n      var ret = [];\n      for (var d in data) {\n        ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d]));\n      }\n      return ret.join('&');\n    }\n\n    /**\n     * Convert a duration code to the smallest unit (64th)\n     **/\n\n  }, {\n    key: 'duration',\n    value: function duration(code) {\n      if (code === ':32') return 2;\n      if (code === ':16') return 4;\n      if (code === ':8') return 8;\n      if (code === ':q') return 16;\n      if (code === ':h') return 32;\n      if (code === ':w') return 64;\n\n      if (code === ':32d') return 3;\n      if (code === ':16d') return 6;\n      if (code === ':8d') return 12;\n      if (code === ':qd') return 24;\n      if (code === ':hd') return 48;\n      if (code === ':wd') return 96;\n\n      throw new Error('Invalid duration code \"' + code + '\"');\n    }\n\n    /**\n     * Convert back a number of units (64th) into a duration code\n     **/\n\n  }, {\n    key: 'durationcode',\n    value: function durationcode(units) {\n      var _arr = ['w', 'h', 'q', '8', '16', '32'];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var code = _arr[_i];\n        if (this.duration(':' + code) === units) return ':' + code;\n        if (this.duration(':' + code + 'd') === units) return ':' + code + 'd';\n      }\n\n      throw new Error('Could not find a code with a value of ' + units + ' units');\n    }\n\n    /**\n     * Convert a number of units (64th) into one or several duration codes\n     **/\n\n  }, {\n    key: 'durationcodes',\n    value: function durationcodes(units) {\n      var codes = [];\n\n      var current = units;\n      var rest = 0;\n\n      while (current > 0) {\n        try {\n          codes.push(this.durationcode(current));\n          current = rest;\n          rest = 0;\n        } catch (e) {\n          current--;\n          rest++;\n        }\n      }\n\n      if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units');\n\n      return codes;\n    }\n\n    /**\n     * Convert a fret number (up to 35) to a single char (digit or capital letter)\n     * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n     */\n\n  }, {\n    key: 'fret2char',\n    value: function fret2char(fret) {\n      if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)');\n      return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10);\n    }\n\n    /**\n     * Convert a single char (digit or capital letter) to a fret number\n     * A means fret 10, 11 fret B, ... and Z fret 35\n     */\n\n  }, {\n    key: 'char2fret',\n    value: function char2fret(char) {\n      if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string');\n      if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])');\n      return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10);\n    }\n\n    /**\n     * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n     */\n\n  }, {\n    key: 'abs2rel',\n    value: function abs2rel(char, startingFret) {\n      var fret = this.char2fret(char);\n      if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)');\n      if (fret === 0) return 0;\n      if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)');\n      if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9');\n      return fret + 1 - startingFret;\n    }\n\n    /**\n     * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n     */\n\n  }, {\n    key: 'rel2abs',\n    value: function rel2abs(relFret, startingFret) {\n      return this.fret2char(relFret ? relFret + startingFret - 1 : relFret);\n    }\n\n    /**\n     * Take a chord and a placeholder contents\n     * Return an array containing one object { string, fret, mute } for each played string\n     */\n\n  }, {\n    key: 'chordStrings',\n    value: function chordStrings(chord, strings) {\n      if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name);\n      if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name);\n\n      var result = [];\n      for (var i = 0; i < chord.tablature.length; i++) {\n        // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n        var string = 6 - i;\n\n        // string never played in this chord\n        if (chord.tablature[i] === 'x') continue;\n\n        // first time we meet a played string, it's the bass so replace B and B' with the string number\n        strings = strings.replace(/B'/g, string >= 5 ? string - 1 : string);\n        strings = strings.replace(/B/g, string);\n\n        // check if this string should be played with the right hand\n        // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n        // x after string means muted (ghost) note\n        if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n          var fret = this.char2fret(chord.tablature[i]);\n          var xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1;\n          var mute = strings[xIndex] === 'x';\n          result.push({\n            string: string,\n            fret: fret,\n            mute: mute\n          });\n        }\n      }\n\n      return result;\n    }\n  }]);\n  return Utils;\n}();\n\nvar ParserException = function () {\n  function ParserException(line, message) {\n    classCallCheck(this, ParserException);\n\n    this.message = message;\n    this.line = line;\n  }\n\n  createClass(ParserException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Parser error at line ' + this.line + ': ' + this.message;\n    }\n  }]);\n  return ParserException;\n}();\n\nvar Parser_ = function () {\n  function Parser_() {\n    classCallCheck(this, Parser_);\n\n    this.songcheat = {};\n    this.blocks = {};\n  }\n\n  createClass(Parser_, [{\n    key: 'parse',\n    value: function parse(text) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return this.songcheat;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n      }\n\n      return this.songcheat;\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(text, line) {\n      // reset\n      this.songcheat = {};\n      this.blocks = {};\n\n      var lastResult = null;\n\n      // split text into tokens\n      var tokens = this.tokenize(text);\n      if (tokens.length === 0) return true;\n\n      var tokenIndex = 0;\n      while (tokenIndex < tokens.length) {\n        var token = tokens[tokenIndex];\n        var keyword = this.isKeyword(token);\n\n        if (token.line > line) return lastResult;\n\n        // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n        if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"');\n\n        // get all tokens until next keyword or end\n        var params = [];\n        for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n          if (this.isKeyword(tokens[tokenIndex])) break;\n          params.push(tokens[tokenIndex]);\n        }\n\n        // use specific handler if any or default one\n        var handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault;\n        if (typeof handler === 'function') handler.call(this, token.line, keyword, params);else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword);\n\n        lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null };\n\n        if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1;else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1;else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1;else if (keyword === 'structure') {\n          // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n          var paramIndex = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var param = _step.value;\n\n              if (param.line > line) break;\n              lastResult.unitIndex = Math.floor(paramIndex / 2);\n              paramIndex++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      }\n\n      return lastResult;\n    }\n  }, {\n    key: 'isKeyword',\n    value: function isKeyword(token) {\n      var keyword = Utils.camelCase(token.value);\n      return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false;\n    }\n  }, {\n    key: 'tokenize',\n    value: function tokenize(text) {\n      var tokens = [];\n\n      // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n      var reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n      var reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/;\n\n      var lineNumber = 1;\n\n      // split at newlines unless enclosed in quotes\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = text.split(reNewline)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var line = _step2.value;\n\n          // split also returns the newlines, ignore them\n          if (line.match(/^\\r?\\n$/)) continue;\n\n          // trim line\n          line = line.trim();\n\n          // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n          // if not a comment or empty line\n          if (line && !line.match(/^#/)) {\n            // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = line.split(reSpaces).map(function (s) {\n                return s.trim().replace(/^\"|\"$/g, '');\n              })[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var value = _step3.value;\n                tokens.push({ 'value': value, 'line': lineNumber });\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                  _iterator3.return();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n          }\n\n          // increment line number\n          lineNumber += 1 + (line.match(/(?:\\r?\\n)/g) || []).length;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return tokens;\n    }\n  }, {\n    key: 'handleDefault',\n    value: function handleDefault(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleSignature',\n    value: function handleSignature(line, keyword, params) {\n      if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || {};\n      this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value;\n    }\n  }, {\n    key: 'handleKey',\n    value: function handleKey(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTempo',\n    value: function handleTempo(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleShuffle',\n    value: function handleShuffle(line, keyword, params) {\n      return this.handleSignature(line, keyword, params);\n    }\n  }, {\n    key: 'handleTime',\n    value: function handleTime(line, keyword, params) {\n      if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length);\n      this.songcheat['signature'] = this.songcheat['signature'] || [];\n      this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value };\n    }\n  }, {\n    key: 'handleChord',\n    value: function handleChord(line, keyword, params) {\n      if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length);\n\n      var name = params[0].value;\n      var tablature = params[1].value;\n      var fingering = params.length >= 3 ? params[2].value : '000000/-';\n      var comment = params.length >= 4 ? params[3].value : '';\n\n      this.songcheat['chords'] = this.songcheat['chords'] || [];\n      var chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment };\n      this.songcheat['chords'].push(chord);\n\n      // return created chord (used when meeting an inline chord)\n      return chord;\n    }\n  }, {\n    key: 'handleRhythm',\n    value: function handleRhythm(line, keyword, params) {\n      if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length);\n      this.songcheat['rhythms'] = this.songcheat['rhythms'] || [];\n      this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value });\n    }\n  }, {\n    key: 'handleBlock',\n    value: function handleBlock(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.blocks[params[0].value] = params.slice(1);\n    }\n  }, {\n    key: 'handlePart',\n    value: function handlePart(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length);\n      this.songcheat['parts'] = this.songcheat['parts'] || [];\n\n      // extract part name from params\n      var part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] };\n      params = params.splice(1);\n      this.songcheat['parts'].push(part);\n\n      // iterate on remaining params to get bars and phrases\n      var bars = [];\n      for (var pIndex = 0; pIndex < params.length; pIndex++) {\n        var param = params[pIndex];\n\n        // phrase separator\n        if (param.value === '||') {\n          part.phrases.push({ 'bars': bars });\n          bars = [];\n          continue;\n        }\n\n        // bar repeater\n        if (param.value === '%') {\n          if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase');\n          bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])));\n          continue;\n        }\n\n        // bar between []\n        if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n          var bar = { 'rhythm': null, 'chords': [] };\n          var str = param.value.substr(1, param.value.length - 2);\n          var parts = str.split(/\\*|:/);\n\n          // find rhythm\n          var found = false;\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = this.songcheat['rhythms'][Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var rhythm = _step4.value;\n\n              if (rhythm.name === parts[0]) {\n                bar.rhythm = rhythm.id;\n                found = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n\n          if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm');\n\n          // find chords\n          parts = parts.slice(1);\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = parts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _part = _step5.value;\n\n              // chord repeater\n              if (!_part.trim()) {\n                if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar');\n                bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])));\n                continue;\n              }\n\n              // search for chord by its name\n              var _found = false;\n              var _iteratorNormalCompletion6 = true;\n              var _didIteratorError6 = false;\n              var _iteratorError6 = undefined;\n\n              try {\n                for (var _iterator6 = this.songcheat['chords'][Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                  var chord = _step6.value;\n\n                  if (chord.name === _part) {\n                    bar.chords.push(chord.id);\n                    _found = true;\n                    break;\n                  }\n                }\n\n                // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n              } catch (err) {\n                _didIteratorError6 = true;\n                _iteratorError6 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                    _iterator6.return();\n                  }\n                } finally {\n                  if (_didIteratorError6) {\n                    throw _iteratorError6;\n                  }\n                }\n              }\n\n              if (!_found && _part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n                // create inline chord with the name being the tablature itself, and no fingering nor comment\n                var _chord = this.handleChord(param.line, 'chord', [{ value: _part, line: param.line }, { value: _part.split('/')[0], line: param.line }, { value: '000000/' + (_part.split('/')[1] || '-'), line: param.line }]);\n                bar.chords.push(_chord.id);\n                _found = true;\n              }\n\n              if (!_found) throw new ParserException(param.line, _part + ' is not the name of an existing chord and is not a valid chord tablature');\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          bars.push(bar);\n          continue;\n        }\n\n        // not a || phrase separator nor a [] bar: must be a block name\n        if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block');\n\n        // insert block tokens in params at current position\n        var args = [pIndex, 1];\n        Array.prototype.push.apply(args, this.blocks[param.value]);\n        Array.prototype.splice.apply(params, args);\n        pIndex--;\n      }\n\n      // end of last phrase\n      if (bars.length > 0) part.phrases.push({ 'bars': bars });\n    }\n  }, {\n    key: 'handleStructure',\n    value: function handleStructure(line, keyword, params) {\n      if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length);\n      if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length);\n      this.songcheat['structure'] = this.songcheat['structure'] || [];\n\n      for (var pIndex = 0; pIndex < params.length; pIndex += 2) {\n        var param = params[pIndex];\n\n        var found = false;\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this.songcheat['parts'][Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var part = _step7.value;\n\n            if (part.name === param.value) {\n              this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value });\n              found = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part');\n      }\n    }\n  }]);\n  return Parser_;\n}();\n\n/**\n * Public API\n */\n\nvar Parser = function () {\n  function Parser() {\n    classCallCheck(this, Parser);\n\n    this.parser_ = new Parser_();\n  }\n\n  createClass(Parser, [{\n    key: 'parse',\n    value: function parse(songcheat) {\n      return this.parser_.parse(songcheat);\n    }\n  }, {\n    key: 'getPrecedingKeyword',\n    value: function getPrecedingKeyword(songcheat, line) {\n      return this.parser_.getPrecedingKeyword(songcheat, line);\n    }\n  }]);\n  return Parser;\n}();\n\nvar MIN_LYRICS_BARLEN = 20; // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nvar LYRICS_SUM_DURATIONS = false; // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nvar KEEP_EMPTY_LINES = false;\n\nvar CompilerException = function () {\n  function CompilerException(message) {\n    classCallCheck(this, CompilerException);\n\n    this.message = message;\n  }\n\n  createClass(CompilerException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'Compiler error: ' + this.message;\n    }\n  }]);\n  return CompilerException;\n}();\n\nvar Compiler_ = function () {\n  function Compiler_(DEBUG) {\n    classCallCheck(this, Compiler_);\n\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG;\n  }\n\n  createClass(Compiler_, [{\n    key: 'log',\n    value: function log() {\n      if (this.DEBUG > 0) console.log.apply(console, arguments);\n    }\n  }, {\n    key: 'compile',\n    value: function compile(songcheat) {\n      // default values for optional properties\n      songcheat.mode = songcheat.mode || 'rt';\n      songcheat.lyricsMode = songcheat.lyricsMode || 's';\n      songcheat.barsPerLine = songcheat.barsPerLine || 4;\n      songcheat.signature = songcheat.signature || {};\n      songcheat.signature.key = songcheat.signature.key || 'C';\n      songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' };\n      songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration;\n      songcheat.chords = songcheat.chords || [];\n      songcheat.rhythms = songcheat.rhythms || [];\n      songcheat.parts = songcheat.parts || [];\n\n      // deduce bar duration from signature\n      songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration);\n\n      // resolve all id references (rhythms and chords)\n      this.resolveIds(songcheat);\n\n      // default structure if not specified : one unit for each part\n      if (!songcheat.structure) {\n        songcheat.structure = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = songcheat.parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var part = _step.value;\n            songcheat.structure.push({ 'part': part });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      // give a name to each unit if not already set = name of part with automatic numbering\n      var unitsByPart = {};\n      var numberByPart = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = songcheat.structure[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var unit = _step2.value;\n          unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = songcheat.structure[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _unit = _step3.value;\n\n          numberByPart[_unit.part.id] = typeof numberByPart[_unit.part.id] === 'undefined' ? 1 : numberByPart[_unit.part.id] + 1;\n          if (!_unit.name) _unit.name = _unit.part.name + (unitsByPart[_unit.part.id] > 1 ? ' ' + numberByPart[_unit.part.id] : '');\n        }\n\n        // give a color to each part if not already set\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta'];\n      var partIndex = 0;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = songcheat.parts[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _part = _step4.value;\n          if (!_part.color) _part.color = colors[partIndex++ % colors.length];\n        }\n\n        // validate and compile each rhythm\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = songcheat.rhythms[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var rhythm = _step5.value;\n          this.compileRhythm(rhythm, songcheat.signature.time.beatDuration);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.parts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var _part2 = _step6.value;\n\n          // compute a \"chordChanges\" property in each phrase\n          var phraseIndex = 0;\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            for (var _iterator7 = _part2.phrases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var phrase = _step7.value;\n\n              phrase.chordChanges = [];\n              var lastChord = null;\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = phrase.bars[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var bar = _step9.value;\n                  lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                    _iterator9.return();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n\n              this.log('Phrase wise chord durations for phrase ' + _part2.name + '.' + (phraseIndex + 1));\n              var _iteratorNormalCompletion10 = true;\n              var _didIteratorError10 = false;\n              var _iteratorError10 = undefined;\n\n              try {\n                for (var _iterator10 = phrase.chordChanges[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n                  var c = _step10.value;\n                  this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units');\n                } // compute a \"chordChanges\" property in each bar\n              } catch (err) {\n                _didIteratorError10 = true;\n                _iteratorError10 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                    _iterator10.return();\n                  }\n                } finally {\n                  if (_didIteratorError10) {\n                    throw _iteratorError10;\n                  }\n                }\n              }\n\n              var barIndex = 0;\n              var _iteratorNormalCompletion11 = true;\n              var _didIteratorError11 = false;\n              var _iteratorError11 = undefined;\n\n              try {\n                for (var _iterator11 = phrase.bars[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n                  var _bar = _step11.value;\n\n                  _bar.chordChanges = { 'bar': [], 'rhythm': [] };\n                  var _arr = ['rhythm', 'bar'];\n                  for (var _i = 0; _i < _arr.length; _i++) {\n                    var chordChangesMode = _arr[_i];this.addChordChanges(_bar, _bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar');\n                  }this.log('\\tRythm wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion12 = true;\n                  var _didIteratorError12 = false;\n                  var _iteratorError12 = undefined;\n\n                  try {\n                    for (var _iterator12 = _bar.chordChanges['rhythm'][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n                      var _c = _step12.value;\n                      this.log('\\t\\t[' + _c.chord.name + '] = ' + _c.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError12 = true;\n                    _iteratorError12 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                        _iterator12.return();\n                      }\n                    } finally {\n                      if (_didIteratorError12) {\n                        throw _iteratorError12;\n                      }\n                    }\n                  }\n\n                  this.log('\\tBar wise chord durations for bar ' + _part2.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1));\n                  var _iteratorNormalCompletion13 = true;\n                  var _didIteratorError13 = false;\n                  var _iteratorError13 = undefined;\n\n                  try {\n                    for (var _iterator13 = _bar.chordChanges['bar'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                      var _c2 = _step13.value;\n                      this.log('\\t\\t[' + _c2.chord.name + '] = ' + _c2.duration + ' units');\n                    }\n                  } catch (err) {\n                    _didIteratorError13 = true;\n                    _iteratorError13 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                        _iterator13.return();\n                      }\n                    } finally {\n                      if (_didIteratorError13) {\n                        throw _iteratorError13;\n                      }\n                    }\n                  }\n\n                  barIndex++;\n                }\n              } catch (err) {\n                _didIteratorError11 = true;\n                _iteratorError11 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                    _iterator11.return();\n                  }\n                } finally {\n                  if (_didIteratorError11) {\n                    throw _iteratorError11;\n                  }\n                }\n              }\n\n              phraseIndex++;\n            }\n\n            // compute duration of part\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          _part2.duration = 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _part2.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _phrase = _step8.value;\n              var _iteratorNormalCompletion14 = true;\n              var _didIteratorError14 = false;\n              var _iteratorError14 = undefined;\n\n              try {\n                for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n                  var _bar2 = _step14.value;\n                  _part2.duration += _bar2.rhythm.duration;\n                }\n              } catch (err) {\n                _didIteratorError14 = true;\n                _iteratorError14 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                    _iterator14.return();\n                  }\n                } finally {\n                  if (_didIteratorError14) {\n                    throw _iteratorError14;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n        }\n\n        // fluid API\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return songcheat;\n    }\n  }, {\n    key: 'resolveIds',\n    value: function resolveIds(songcheat) {\n      var unitIndex = 0;\n      if (songcheat.structure) {\n        var _iteratorNormalCompletion15 = true;\n        var _didIteratorError15 = false;\n        var _iteratorError15 = undefined;\n\n        try {\n          for (var _iterator15 = songcheat.structure[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n            var unit = _step15.value;\n\n            if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1));\n\n            // resolve part id\n            var part = this.resolveId(songcheat.parts, unit.part);\n            if (!part) throw new CompilerException('Part ' + unit.part + ' not found');\n            unit.part = part;\n\n            unitIndex++;\n          }\n        } catch (err) {\n          _didIteratorError15 = true;\n          _iteratorError15 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion15 && _iterator15.return) {\n              _iterator15.return();\n            }\n          } finally {\n            if (_didIteratorError15) {\n              throw _iteratorError15;\n            }\n          }\n        }\n      }\n\n      if (songcheat.parts) {\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = songcheat.parts[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var _part3 = _step16.value;\n\n            if (!_part3.phrases) throw new CompilerException('Phrases not defined for part \"' + _part3.name + '\"');\n            if (!(_part3.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + _part3.name + '\" must be an Array, found: ' + _typeof(songcheat.parts.phrases));\n\n            var phraseIndex = 0;\n            var _iteratorNormalCompletion17 = true;\n            var _didIteratorError17 = false;\n            var _iteratorError17 = undefined;\n\n            try {\n              for (var _iterator17 = _part3.phrases[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                var phrase = _step17.value;\n\n                var barIndex = 0;\n                var _iteratorNormalCompletion18 = true;\n                var _didIteratorError18 = false;\n                var _iteratorError18 = undefined;\n\n                try {\n                  for (var _iterator18 = phrase.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n                    var bar = _step18.value;\n\n                    if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + _part3.name);\n                    if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + _typeof(bar.chords));\n\n                    // resolve rhythm id\n                    var rhythm = this.resolveId(songcheat.rhythms, bar.rhythm);\n                    if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                    bar.rhythm = rhythm;\n\n                    // resolved array of chord ids\n                    var chords = [];\n                    var _iteratorNormalCompletion19 = true;\n                    var _didIteratorError19 = false;\n                    var _iteratorError19 = undefined;\n\n                    try {\n                      for (var _iterator19 = bar.chords[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                        var chordId = _step19.value;\n\n                        // resolve chord id\n                        var chord = this.resolveId(songcheat.chords, chordId);\n                        if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1));\n                        chords.push(chord);\n                      }\n                    } catch (err) {\n                      _didIteratorError19 = true;\n                      _iteratorError19 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                          _iterator19.return();\n                        }\n                      } finally {\n                        if (_didIteratorError19) {\n                          throw _iteratorError19;\n                        }\n                      }\n                    }\n\n                    bar.chords = chords;\n                    barIndex++;\n                  }\n                } catch (err) {\n                  _didIteratorError18 = true;\n                  _iteratorError18 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                      _iterator18.return();\n                    }\n                  } finally {\n                    if (_didIteratorError18) {\n                      throw _iteratorError18;\n                    }\n                  }\n                }\n\n                phraseIndex++;\n              }\n            } catch (err) {\n              _didIteratorError17 = true;\n              _iteratorError17 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                  _iterator17.return();\n                }\n              } finally {\n                if (_didIteratorError17) {\n                  throw _iteratorError17;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'resolveId',\n    value: function resolveId(collection, id) {\n      if (collection) {\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = collection[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var i = _step20.value;\n            if (i.id === id) return i;\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20.return) {\n              _iterator20.return();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'compileRhythm',\n    value: function compileRhythm(rhythm, initialNoteDuration) {\n      this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"');\n\n      // default note duration, until changed\n      var noteDuration = initialNoteDuration;\n\n      // take not of each placeholder's index, so we can later fetch the associated chord\n      rhythm.placeholdercount = 0;\n\n      // for locating syntax errors in message\n      var position = 1;\n      var lastToken = null;\n\n      // compile the score string into an array of objects\n      rhythm.compiledScore = [];\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var token = _step21.value;\n\n          if (token = token.trim()) {\n            var match = null;\n            if (match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/)) {\n              // duration: change note duration to use next\n              noteDuration = Utils.duration(match[1]);\n            } else if (match = token.match(/^\\(#\\)$/)) {\n              // rest\n              rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ });\n            } else if (match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/)) {\n              // chord placeholder\n              var tied = match[1] === 'T';\n\n              // strings = between parentheses\n              var strings = match[2];\n              if (strings === '') strings = '*'; // an empty string is a shortcut for \"*\"\n              if (strings === 'x') strings = '*x'; // a x alone is a shortcut for \"*x\"\n              if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings);\n\n              // flags = after parentheses\n              var flagsString = match[3];\n              var flags = { stroke: null, accent: false, pm: false, fingering: null };\n              var _iteratorNormalCompletion23 = true;\n              var _didIteratorError23 = false;\n              var _iteratorError23 = undefined;\n\n              try {\n                for (var _iterator23 = flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n                  var flag = _step23.value;\n\n                  if (flag.trim()) {\n                    if (flag.match(/^(dd?|uu?)$/g)) {\n                      // stroke mode\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token);\n                      flags.stroke = flag;\n                    } else if (flag.match(/^[pima]+$/)) {\n                      // PIMA fingering\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token);\n                      flags.fingering = flag;\n                    } else if (flag.match(/^PM$/)) {\n                      // palm muting\n                      if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token);\n                      if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token);\n                      flags.pm = true;\n                    } else if (flag.match(/^>$/)) {\n                      // accent\n                      if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token);\n                      flags.accent = true;\n                    } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"');\n                  }\n                }\n\n                // add a note\n              } catch (err) {\n                _didIteratorError23 = true;\n                _iteratorError23 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion23 && _iterator23.return) {\n                    _iterator23.return();\n                  }\n                } finally {\n                  if (_didIteratorError23) {\n                    throw _iteratorError23;\n                  }\n                }\n              }\n\n              rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ });\n            } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''));\n\n            lastToken = token;\n          }\n\n          position += token.length;\n        }\n\n        // compute total rhythm duration\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21.return) {\n            _iterator21.return();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      rhythm.duration = 0;\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = rhythm.compiledScore[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var o = _step22.value;\n          rhythm.duration += o.duration;\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22.return) {\n            _iterator22.return();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n    }\n  }, {\n    key: 'addChordChanges',\n    value: function addChordChanges(bar, chordChanges, barDuration, resetAtBars, lastChord) {\n      // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n      if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found');\n      while (bar.chords.length < bar.rhythm.placeholdercount) {\n        bar.chords.push(bar.chords[bar.chords.length - 1]);\n      }var offset = 0;\n      var _iteratorNormalCompletion24 = true;\n      var _didIteratorError24 = false;\n      var _iteratorError24 = undefined;\n\n      try {\n        for (var _iterator24 = bar.rhythm.compiledScore[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n          var note = _step24.value;\n\n          // get chord corresponding to the placeholder position\n          var chord = bar.chords[note.placeholderIndex];\n          if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1));\n\n          // same chord as before and not a new bar: increment duration with this new note\n          if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration;\n\n          // chord changed: new duration starts with one note of the new chord\n          // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n          else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars });\n\n          lastChord = chord;\n          offset += note.duration;\n        }\n      } catch (err) {\n        _didIteratorError24 = true;\n        _iteratorError24 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion24 && _iterator24.return) {\n            _iterator24.return();\n          }\n        } finally {\n          if (_didIteratorError24) {\n            throw _iteratorError24;\n          }\n        }\n      }\n\n      return lastChord;\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit, defaultCursorStep, barDuration) {\n      var warnings = [];\n      var offset = 0;\n\n      // remove DOS newlines\n      unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '');\n\n      // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n      unit.groups = [];\n      var _iteratorNormalCompletion25 = true;\n      var _didIteratorError25 = false;\n      var _iteratorError25 = undefined;\n\n      try {\n        for (var _iterator25 = unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n          var part = _step25.value;\n          // nb: split with capture groups only works in decent browsers, e.g. IE10+\n          var match = null;\n          // move cursor forward by given or default step duration\n          if (match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/)) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration);\n\n          // move cursor to begin of next bar\n          else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n            // (non empty) word group (waiting for its duration)\n            else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 });\n        }\n\n        // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n      } catch (err) {\n        _didIteratorError25 = true;\n        _iteratorError25 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion25 && _iterator25.return) {\n            _iterator25.return();\n          }\n        } finally {\n          if (_didIteratorError25) {\n            throw _iteratorError25;\n          }\n        }\n      }\n\n      if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - offset % barDuration, barDuration);\n\n      // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n      var missingDuration = unit.part.duration - offset;\n      this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + missingDuration / barDuration + ' bars missing');\n      if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess');\n      offset = this.registerGroup(unit, offset, missingDuration, barDuration);\n\n      var _iteratorNormalCompletion26 = true;\n      var _didIteratorError26 = false;\n      var _iteratorError26 = undefined;\n\n      try {\n        for (var _iterator26 = unit.groups[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n          var group = _step26.value;\n\n          // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n          var groupLength = this.getGroupLength(group) + 1;\n\n          // ensure the bar will always have the required minimal width\n          group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration));\n\n          // compute density of group based on the obtained length\n          group.p = group.plen / group.duration;\n\n          // set bar true if group ends on a bar\n          group.bar = (group.offset + group.duration) % barDuration === 0;\n\n          // initialize chord changes\n          group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] };\n        }\n\n        // compute maximum density across all groups\n      } catch (err) {\n        _didIteratorError26 = true;\n        _iteratorError26 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion26 && _iterator26.return) {\n            _iterator26.return();\n          }\n        } finally {\n          if (_didIteratorError26) {\n            throw _iteratorError26;\n          }\n        }\n      }\n\n      unit.pmax = 0;\n      var _iteratorNormalCompletion27 = true;\n      var _didIteratorError27 = false;\n      var _iteratorError27 = undefined;\n\n      try {\n        for (var _iterator27 = unit.groups[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n          var _group = _step27.value;\n          unit.pmax = Math.max(unit.pmax, _group.p);\n        } // iterate on each phrase wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError27 = true;\n        _iteratorError27 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion27 && _iterator27.return) {\n            _iterator27.return();\n          }\n        } finally {\n          if (_didIteratorError27) {\n            throw _iteratorError27;\n          }\n        }\n      }\n\n      offset = 0;\n      var _iteratorNormalCompletion28 = true;\n      var _didIteratorError28 = false;\n      var _iteratorError28 = undefined;\n\n      try {\n        for (var _iterator28 = unit.part.phrases[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n          var phrase = _step28.value;\n          var _iteratorNormalCompletion31 = true;\n          var _didIteratorError31 = false;\n          var _iteratorError31 = undefined;\n\n          try {\n            for (var _iterator31 = phrase.chordChanges[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n              var chordDuration = _step31.value;\n\n              // find closest group starting at or before chord offset\n              var _group3 = null;\n              var _iteratorNormalCompletion32 = true;\n              var _didIteratorError32 = false;\n              var _iteratorError32 = undefined;\n\n              try {\n                for (var _iterator32 = unit.groups[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n                  var g = _step32.value;\n                  if (g.offset <= offset) _group3 = g;\n                }\n              } catch (err) {\n                _didIteratorError32 = true;\n                _iteratorError32 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion32 && _iterator32.return) {\n                    _iterator32.return();\n                  }\n                } finally {\n                  if (_didIteratorError32) {\n                    throw _iteratorError32;\n                  }\n                }\n              }\n\n              if (!_group3) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units');\n\n              // register chord change in group\n              _group3.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) });\n\n              offset += chordDuration.duration;\n            }\n          } catch (err) {\n            _didIteratorError31 = true;\n            _iteratorError31 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion31 && _iterator31.return) {\n                _iterator31.return();\n              }\n            } finally {\n              if (_didIteratorError31) {\n                throw _iteratorError31;\n              }\n            }\n          }\n        }\n\n        // iterate on each bar wise chord change and find the associated group\n      } catch (err) {\n        _didIteratorError28 = true;\n        _iteratorError28 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion28 && _iterator28.return) {\n            _iterator28.return();\n          }\n        } finally {\n          if (_didIteratorError28) {\n            throw _iteratorError28;\n          }\n        }\n      }\n\n      offset = { 'rhythm': 0, 'bar': 0 };\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = unit.part.phrases[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var _phrase2 = _step29.value;\n          var _iteratorNormalCompletion33 = true;\n          var _didIteratorError33 = false;\n          var _iteratorError33 = undefined;\n\n          try {\n            for (var _iterator33 = _phrase2.bars[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n              var bar = _step33.value;\n              var _arr2 = ['rhythm', 'bar'];\n\n              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {\n                var chordChangesMode = _arr2[_i2];var _iteratorNormalCompletion34 = true;\n                var _didIteratorError34 = false;\n                var _iteratorError34 = undefined;\n\n                try {\n                  for (var _iterator34 = bar.chordChanges[chordChangesMode][Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n                    var _chordDuration = _step34.value;\n\n                    // find closest group starting at or before chord offset\n                    var _group4 = null;\n                    var _iteratorNormalCompletion35 = true;\n                    var _didIteratorError35 = false;\n                    var _iteratorError35 = undefined;\n\n                    try {\n                      for (var _iterator35 = unit.groups[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n                        var _g = _step35.value;\n                        if (_g.offset <= offset[chordChangesMode]) _group4 = _g;\n                      }\n                    } catch (err) {\n                      _didIteratorError35 = true;\n                      _iteratorError35 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion35 && _iterator35.return) {\n                          _iterator35.return();\n                        }\n                      } finally {\n                        if (_didIteratorError35) {\n                          throw _iteratorError35;\n                        }\n                      }\n                    }\n\n                    if (!_group4) throw new Error('No closest group found for chord ' + _chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units');\n\n                    // register chord change in group\n                    _group4.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(_chordDuration) });\n\n                    offset[chordChangesMode] += _chordDuration.duration;\n                  }\n                } catch (err) {\n                  _didIteratorError34 = true;\n                  _iteratorError34 = err;\n                } finally {\n                  try {\n                    if (!_iteratorNormalCompletion34 && _iterator34.return) {\n                      _iterator34.return();\n                    }\n                  } finally {\n                    if (_didIteratorError34) {\n                      throw _iteratorError34;\n                    }\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError33 = true;\n            _iteratorError33 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion33 && _iterator33.return) {\n                _iterator33.return();\n              }\n            } finally {\n              if (_didIteratorError33) {\n                throw _iteratorError33;\n              }\n            }\n          }\n        }\n\n        // debug info\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29.return) {\n            _iterator29.return();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      var debugText = 'Groups of unit [' + unit.name + ']:\\n';\n      var barIndex = 0;\n      var zeroDuration = false;\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = unit.groups[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var _group2 = _step30.value;\n\n          debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + _group2.text.replace(/\\n/g, '\\\\N') + ']:' + _group2.duration + ' (' + _group2.offset + ' - ' + (_group2.offset + _group2.duration) + ') L=' + this.getGroupLength(_group2) + \" L'=\" + _group2.plen + ' ρ=' + _group2.p.toFixed(2) + ' #Chord changes %bar= ' + _group2.chordChanges['bar'].length + ' %phrase= ' + _group2.chordChanges['phrase'].length;\n          if (_group2.duration === 0) zeroDuration = true;\n          if (_group2.bar) {\n            barIndex++;\n            debugText += ' | ';\n          }\n          debugText += '\\n';\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30.return) {\n            _iterator30.return();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      debugText += 'ρ max = ' + unit.pmax.toFixed(2);\n      this.log(debugText);\n\n      if (zeroDuration) throw new Error('Detected group with 0 duration');\n\n      return warnings;\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      var unitText = '';\n\n      // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n      var barIndex = 0;\n      var groupIndex = 0;\n      var _iteratorNormalCompletion36 = true;\n      var _didIteratorError36 = false;\n      var _iteratorError36 = undefined;\n\n      try {\n        for (var _iterator36 = unit.groups[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n          var group = _step36.value;\n\n          // where and on how many positions will this group be displayed\n          group.position = [].concat(toConsumableArray(unitText.replace(/\\n/g, ''))).length;\n          group.length = Math.ceil(group.duration * unit.pmax);\n\n          // an hyphen means a word has been cut in two, no need for a space before next group\n          // but if the final character should be a bar, then always count this extra character\n          var needFinalSpace = group.bar || !group.text.match(/-$/);\n\n          // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n          var maxLength = null;\n          if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1);\n          if (maxLength) group.length = Math.min(group.length, maxLength);\n\n          // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n          var minLength = group.bar ? 1 : 0; // 1 for the final bar sign if any\n          if (group.chordChanges[chordChangesMode]) {\n            for (var i = 0; i < group.chordChanges[chordChangesMode].length; i++) {\n              minLength += group.chordChanges[chordChangesMode][i].text.length;\n            }\n          }\n          minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength);\n          group.length = Math.max(group.length, minLength);\n\n          // filler string used to reach that length (nb: filler will always have a length of at least 1)\n          var filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ');\n\n          // replace last character of filler by a | if this is the end of a bar\n          filler = filler.replace(/(.)$/, group.bar ? split > 0 && (barIndex + 1) % split === 0 ? '|\\n' : '|' : this.DEBUG ? '*' : '$1');\n\n          // append filler to text, remove new lines if splitting at bars\n          var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler;\n\n          this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')');\n          unitText += groupText;\n\n          groupIndex++;\n          if (group.bar) barIndex++;\n        }\n\n        // we weren't asked to add chords\n      } catch (err) {\n        _didIteratorError36 = true;\n        _iteratorError36 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion36 && _iterator36.return) {\n            _iterator36.return();\n          }\n        } finally {\n          if (_didIteratorError36) {\n            throw _iteratorError36;\n          }\n        }\n      }\n\n      if (!chordChangesMode) return unitText;\n\n      // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n      var chordInserts = [];\n      var _iteratorNormalCompletion37 = true;\n      var _didIteratorError37 = false;\n      var _iteratorError37 = undefined;\n\n      try {\n        for (var _iterator37 = unit.groups[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {\n          var _group5 = _step37.value;\n\n          var lengthStillToPlaceOnThisGroup = 0;\n          var lengthYetPlacedOnThisGroup = 0;\n\n          // compute length of all chord inserts\n          var _iteratorNormalCompletion40 = true;\n          var _didIteratorError40 = false;\n          var _iteratorError40 = undefined;\n\n          try {\n            for (var _iterator40 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {\n              var chordChange = _step40.value;\n              lengthStillToPlaceOnThisGroup += chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError40 = true;\n            _iteratorError40 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion40 && _iterator40.return) {\n                _iterator40.return();\n              }\n            } finally {\n              if (_didIteratorError40) {\n                throw _iteratorError40;\n              }\n            }\n          }\n\n          var _iteratorNormalCompletion41 = true;\n          var _didIteratorError41 = false;\n          var _iteratorError41 = undefined;\n\n          try {\n            for (var _iterator41 = _group5.chordChanges[chordChangesMode][Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {\n              var _chordChange = _step41.value;\n\n              // position of the chord will be the position of the group + length corresponding to offset delta\n              var positionDelta = Math.ceil((_chordChange.offset - _group5.offset) / _group5.duration * _group5.length);\n              var positionDelta_ = positionDelta;\n\n              // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n              while (positionDelta + lengthStillToPlaceOnThisGroup > _group5.length - (_group5.bar ? 1 : 0)) {\n                positionDelta--;\n              }\n\n              // ensure that chords already there still have enough room\n              while (positionDelta - lengthYetPlacedOnThisGroup < 0) {\n                positionDelta++;\n              }\n\n              this.log('Closest group \"' + _group5.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + _group5.offset + ' and position ' + _group5.position + ' found for ' + _chordChange.text.trim() + ' with offset ' + _chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)');\n              chordInserts.push({ text: _chordChange.text, offset: _chordChange.offset, position: _group5.position + positionDelta });\n\n              lengthYetPlacedOnThisGroup = positionDelta + _chordChange.text.length;\n              lengthStillToPlaceOnThisGroup -= _chordChange.text.length;\n            }\n          } catch (err) {\n            _didIteratorError41 = true;\n            _iteratorError41 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion41 && _iterator41.return) {\n                _iterator41.return();\n              }\n            } finally {\n              if (_didIteratorError41) {\n                throw _iteratorError41;\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError37 = true;\n        _iteratorError37 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion37 && _iterator37.return) {\n            _iterator37.return();\n          }\n        } finally {\n          if (_didIteratorError37) {\n            throw _iteratorError37;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion38 = true;\n      var _didIteratorError38 = false;\n      var _iteratorError38 = undefined;\n\n      try {\n        for (var _iterator38 = chordInserts[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {\n          var chordInsert = _step38.value;\n          this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars');\n        } // insert these chord inserts\n      } catch (err) {\n        _didIteratorError38 = true;\n        _iteratorError38 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion38 && _iterator38.return) {\n            _iterator38.return();\n          }\n        } finally {\n          if (_didIteratorError38) {\n            throw _iteratorError38;\n          }\n        }\n      }\n\n      var position = 0;\n      var skip = 0;\n      var unitText_ = unitText;\n      var chordText = '';\n      unitText = '';\n      var _iteratorNormalCompletion39 = true;\n      var _didIteratorError39 = false;\n      var _iteratorError39 = undefined;\n\n      try {\n        for (var _iterator39 = unitText_[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {\n          var char = _step39.value;\n\n          if (char === '\\n') {\n            unitText += '\\n';\n            chordText += '\\n';\n            skip = 0;\n          } else {\n            var _iteratorNormalCompletion42 = true;\n            var _didIteratorError42 = false;\n            var _iteratorError42 = undefined;\n\n            try {\n              for (var _iterator42 = chordInserts[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {\n                var _chordInsert = _step42.value;\n\n                if (!_chordInsert.inserted) {\n                  if (_chordInsert.position <= position) {\n                    this.log('[' + unit.name + '] Inserting ' + _chordInsert.text + ' @ ' + position + ' chars');\n                    chordText += _chordInsert.text;\n                    _chordInsert.inserted = true;\n                    skip = _chordInsert.text.length;\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError42 = true;\n              _iteratorError42 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion42 && _iterator42.return) {\n                  _iterator42.return();\n                }\n              } finally {\n                if (_didIteratorError42) {\n                  throw _iteratorError42;\n                }\n              }\n            }\n\n            position++;\n\n            // add char to unit text, and corresponding space to chord text\n            // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n            if (skip === 0) {\n              chordText += char === '|' ? char : ' ';\n            } else {\n              skip--;\n            }\n            unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char;\n          }\n        }\n\n        // and interlace the two strings\n      } catch (err) {\n        _didIteratorError39 = true;\n        _iteratorError39 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion39 && _iterator39.return) {\n            _iterator39.return();\n          }\n        } finally {\n          if (_didIteratorError39) {\n            throw _iteratorError39;\n          }\n        }\n      }\n\n      return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES);\n    }\n  }, {\n    key: 'registerGroup',\n    value: function registerGroup(unit, offset, step, barDuration) {\n      if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup');\n\n      while (step > 0) {\n        // duration added to preceding group may never be more than what's left until end of bar\n        var addDuration = Math.min(step, barDuration - offset % barDuration);\n\n        // create a new group if none or if preceding already got its duration\n        if (!unit.groups.length || !LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0) unit.groups.push({ text: '', offset: offset, duration: 0 });\n\n        // add this duration to preceding group (create it if needed)\n        unit.groups[unit.groups.length - 1].duration += addDuration;\n        offset += addDuration;\n        step -= addDuration;\n\n        // step is going to cross end of bar: directly create a first empty group\n        if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 });\n      }\n\n      return offset;\n    }\n  }, {\n    key: 'getGroupLength',\n    value: function getGroupLength(group) {\n      // return the number of visible graphemes in group text\n      // - newlines are not counted\n      // - tabs will be converted to spaces and may thus count as 1\n      // - use spread operator to correctly count astral unicode symbols\n      return [].concat(toConsumableArray(group.text.replace(/\\n/g, ''))).length;\n    }\n  }, {\n    key: 'getChordDisplay',\n    value: function getChordDisplay(chordDuration) {\n      // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n      if (chordDuration.hidden) return ' ';\n\n      // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n      return chordDuration.chord.name + ' ';\n    }\n  }]);\n  return Compiler_;\n}();\n\n/**\n * Public API\n */\n\nvar Compiler = function () {\n  function Compiler(songcheat, DEBUG) {\n    classCallCheck(this, Compiler);\n\n    this.compiler_ = new Compiler_(DEBUG);\n    if (songcheat) this.set(songcheat);\n  }\n\n  createClass(Compiler, [{\n    key: 'set',\n    value: function set$$1(songcheat) {\n      this.compiler_.log(Utils.title('COMPILE SONGCHEAT'));\n      this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)));\n    }\n  }, {\n    key: 'parseLyrics',\n    value: function parseLyrics(unit) {\n      this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name));\n      return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n    }\n  }, {\n    key: 'getUnitText',\n    value: function getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      this.compiler_.log(Utils.title('GET LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }, {\n    key: 'getPartText',\n    value: function getPartText(part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n      // dummy unit with no lyrics\n      var unit = { name: part.name, part: part };\n\n      this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name));\n      this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration);\n\n      this.compiler_.log(Utils.title('GET PART LYRICS TEXT ' + unit.name + ' (maxConsecutiveSpaces = ' + maxConsecutiveSpaces + ', split = ' + split + ', chordChangesMode = ' + chordChangesMode + ', showDots = ' + showDots + ')'));\n      return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots);\n    }\n  }]);\n  return Compiler;\n}();\n\nvar classCallCheck$1 = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass$1 = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar DEBUG = 0;\n\nvar VexTabException = function () {\n  function VexTabException(message) {\n    classCallCheck$1(this, VexTabException);\n\n    this.message = message;\n  }\n\n  createClass$1(VexTabException, [{\n    key: 'toString',\n    value: function toString() {\n      return 'VexTab error: ' + this.message;\n    }\n  }]);\n  return VexTabException;\n}();\n\nvar VexTab = function () {\n  function VexTab() {\n    classCallCheck$1(this, VexTab);\n  }\n\n  createClass$1(VexTab, null, [{\n    key: 'Chord2VexTab',\n\n    // build VexTab chord notation\n    value: function Chord2VexTab(chord, strings, transpose) {\n      var vextabchord = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Utils.chordStrings(chord, strings)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var o = _step.value;\n\n          vextabchord.push((o.mute ? 'X' : transpose + o.fret) + '/' + o.string);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return '(' + vextabchord.join('.') + ')';\n    }\n  }, {\n    key: 'Note2VexTab',\n    value: function Note2VexTab(note, strokes, accents) {\n      var vextab = '';\n\n      // rest with given duration\n      if (note.rest) vextab += Utils.durationcode(note.duration) + '#5#';else {\n        // note duration, slashed if no chord given\n        vextab += note.chord ? Utils.durationcode(note.duration) : Utils.durationcode(note.duration).replace(/(:(?:w|h|q|8|16|32))(d?)/g, '$1S$2');\n\n        // if tied note\n        if (note.tied) vextab += 'T';\n\n        // chord or dummy note (for slash notation)\n        vextab += !note.chord ? '(4/3)' : VexTab.Chord2VexTab(note.chord, note.strings, 0); // do not transpose with capo: chords are tabbed exactly as their diagrm says (author chooses to use capo'd chords or not)\n\n        // stroke flag d or u (dd and uu are not built-in in vextab and are handled later through text2VexTab)\n        if (strokes && note.flags.stroke && note.flags.stroke.length === 1) vextab += note.flags.stroke;\n\n        // accent (put on top)\n        if (accents && note.flags.accent) vextab += '$.a>/' + accents + '.$';\n      }\n\n      return vextab;\n    }\n  }, {\n    key: 'Notes2Stave',\n    value: function Notes2Stave(songcheat, offset, notes, strokes, accents, subtitle, hs, notation, tablature) {\n      var vextab = '';\n      var barDuration = songcheat.barDuration;\n\n      console.log('Drawing ' + (notation ? 'notation ' : '') + (tablature ? 'tablature ' : '') + 'stave with ' + notes.length + ' notes');\n\n      // start new stave with signature\n      vextab += '\\ntabstave notation=' + (notation ? 'true' : 'false') + ' tablature=' + (tablature ? 'true' : 'false') + '\\n';\n      vextab += 'tuning=' + songcheat.tuning + ' key=' + songcheat.signature.key + ' time=' + songcheat.signature.time.symbol + '\\n';\n\n      // add subtitle if first bar\n      if (subtitle && offset === 0) vextab += 'text .' + hs + ',.font=Arial-10-bold,[' + subtitle + ']\\n';\n\n      vextab += 'notes ';\n\n      // initial bar line if needed (double if first bar)\n      if (offset % barDuration === 0) vextab += offset === 0 ? '=||' : '|';\n\n      // add each note, followed by a bar or phrase sign if needed\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = notes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var note = _step2.value;\n\n          vextab += VexTab.Note2VexTab(note, strokes, accents);\n          offset += note.duration;\n          if (note.lastInPhrase && offset % barDuration !== 0) console.warn('Phrase matches no bar (' + Utils.durationcodes(barDuration - offset % barDuration) + ' away)');\n          if (offset % barDuration === 0) vextab += note.lastInPhrase ? '=||' : '|';\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return vextab + '\\n';\n    }\n  }, {\n    key: 'Text2VexTab',\n    value: function Text2VexTab(textGroups, barDuration, offset, staveDuration, h, font) {\n      var text = '';\n\n      // for groups that start within our range\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = textGroups[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var group = _step3.value;\n\n          if (group.offset >= offset + staveDuration) break;\n          if (group.offset >= offset) {\n            var line = 'text ++,.' + h + ',.font=' + font;\n\n            // initial bar line if needed\n            if (offset % barDuration === 0) line += ',|';\n\n            // add empty text groups to fill the gap between start of stave and start of group\n            var gap = group.offset - offset;\n            while (gap > 0) {\n              // gap duration may never be more than what's left until end of bar\n              var d = Math.min(gap, barDuration - offset % barDuration);\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = Utils.durationcodes(d)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var code = _step4.value;\n                  line += ',' + code + ', ';\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              if ((offset + d) % barDuration === 0) line += ',|';\n\n              // continue with remaining gap\n              gap -= d;\n            }\n\n            // add actual text group on all available duration until end of stave (or more precisely the largest duration code which is <= available duration)\n            var available = offset + staveDuration - group.offset;\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = Utils.durationcodes(available)[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var _code = _step5.value;\n                line += ',' + _code + ',' + (group.text.replace(/\\n/g, '') || ' ');break;\n              }\n\n              // remove trailing spaces and comma: vextab does not allow to finish on an empty word group\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n\n            text += line.replace(/[ ,]+$/, '') + '\\n';\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return text;\n    }\n  }, {\n    key: 'Songcheat2VexTab',\n    value: function Songcheat2VexTab(songcheat) {\n      var vextab = '';\n      var unitIndex = 0;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = songcheat.structure[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var unit = _step6.value;\n\n          if (songcheat.showUnitIndex === null || songcheat.showUnitIndex === unitIndex) vextab += VexTab.Unit2VexTab(songcheat, unit, unitIndex) + '\\n';\n          unitIndex++;\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      return vextab;\n    }\n  }, {\n    key: 'Unit2VexTab',\n    value: function Unit2VexTab(songcheat, unit, unitIndex) {\n      var stems = songcheat.mode.indexOf('s') >= 0;\n      var showLyrics = songcheat.lyricsMode === 's';\n      var barDuration = songcheat.barDuration;\n\n      var vextab = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=' + (stems ? 'true' : 'false') + ' tab-stem-direction=up\\n';\n      unitIndex = unitIndex || 0;\n\n      var staveDuration = 0;\n      var notes = [];\n      var notesSlashed = [];\n\n      console.log('VexTabbing unit ' + (unitIndex + 1) + ' \"' + unit.name + '\"');\n\n      // space before first unit and between units\n      vextab += 'options space=' + (unitIndex > 0 && songcheat.showUnitIndex === null ? 50 : 20) + '\\n';\n\n      // get lyrics word groups\n      var lyricsGroups = [];\n      if (unit.groups) {\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = unit.groups[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var group = _step7.value;\n            lyricsGroups.push({ offset: group.offset, text: group.text + (DEBUG ? '/' + group.duration : '') });\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n      } // get rhythm wise chord changes (same as ascii lyrics)\n      var offset = 0;\n      var chordGroups = [];\n      var _iteratorNormalCompletion8 = true;\n      var _didIteratorError8 = false;\n      var _iteratorError8 = undefined;\n\n      try {\n        for (var _iterator8 = unit.part.phrases[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n          var phrase = _step8.value;\n          var _iteratorNormalCompletion12 = true;\n          var _didIteratorError12 = false;\n          var _iteratorError12 = undefined;\n\n          try {\n            for (var _iterator12 = phrase.bars[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n              var bar = _step12.value;\n              var _iteratorNormalCompletion13 = true;\n              var _didIteratorError13 = false;\n              var _iteratorError13 = undefined;\n\n              try {\n                for (var _iterator13 = bar.chordChanges['rhythm'][Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n                  var chordChange = _step13.value;\n\n                  chordGroups.push({ offset: offset, text: chordChange.chord.name + (DEBUG ? '/' + chordChange.duration : '') });\n                  offset += chordChange.duration;\n                }\n              } catch (err) {\n                _didIteratorError13 = true;\n                _iteratorError13 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                    _iterator13.return();\n                  }\n                } finally {\n                  if (_didIteratorError13) {\n                    throw _iteratorError13;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError12 = true;\n            _iteratorError12 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion12 && _iterator12.return) {\n                _iterator12.return();\n              }\n            } finally {\n              if (_didIteratorError12) {\n                throw _iteratorError12;\n              }\n            }\n          }\n        }\n\n        // get PIMA and dd/uu word groups\n      } catch (err) {\n        _didIteratorError8 = true;\n        _iteratorError8 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion8 && _iterator8.return) {\n            _iterator8.return();\n          }\n        } finally {\n          if (_didIteratorError8) {\n            throw _iteratorError8;\n          }\n        }\n      }\n\n      offset = 0;\n      var fingeringGroups = [];\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = unit.part.phrases[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var _phrase = _step9.value;\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n\n          try {\n            for (var _iterator14 = _phrase.bars[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var _bar = _step14.value;\n              var _iteratorNormalCompletion15 = true;\n              var _didIteratorError15 = false;\n              var _iteratorError15 = undefined;\n\n              try {\n                for (var _iterator15 = _bar.rhythm.compiledScore[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                  var note = _step15.value;\n\n                  if (note.flags.fingering) fingeringGroups.push({ offset: offset, text: note.flags.fingering.toLowerCase() });else if (note.flags.stroke && note.flags.stroke.length === 2) fingeringGroups.push({ offset: offset, text: note.flags.stroke === 'dd' ? '⤋' : '⤊' });\n                  offset += note.duration;\n                }\n              } catch (err) {\n                _didIteratorError15 = true;\n                _iteratorError15 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                    _iterator15.return();\n                  }\n                } finally {\n                  if (_didIteratorError15) {\n                    throw _iteratorError15;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n        }\n\n        // get PM word groups\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      offset = 0;\n      var pmGroups = [];\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = unit.part.phrases[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var _phrase2 = _step10.value;\n          var _iteratorNormalCompletion16 = true;\n          var _didIteratorError16 = false;\n          var _iteratorError16 = undefined;\n\n          try {\n            for (var _iterator16 = _phrase2.bars[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n              var _bar2 = _step16.value;\n              var _iteratorNormalCompletion17 = true;\n              var _didIteratorError17 = false;\n              var _iteratorError17 = undefined;\n\n              try {\n                for (var _iterator17 = _bar2.rhythm.compiledScore[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n                  var _note = _step17.value;\n\n                  if (_note.flags.pm) pmGroups.push({ offset: offset, text: 'PM' });\n                  offset += _note.duration;\n                }\n              } catch (err) {\n                _didIteratorError17 = true;\n                _iteratorError17 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                    _iterator17.return();\n                  }\n                } finally {\n                  if (_didIteratorError17) {\n                    throw _iteratorError17;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError16 = true;\n            _iteratorError16 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                _iterator16.return();\n              }\n            } finally {\n              if (_didIteratorError16) {\n                throw _iteratorError16;\n              }\n            }\n          }\n        }\n\n        // for each phrase in unit\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      offset = 0;\n      var phraseIndex = 0;\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = unit.part.phrases[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var _phrase3 = _step11.value;\n\n          console.log('\\tphrase ' + (phraseIndex + 1));\n          var lastPhraseInPart = phraseIndex === unit.part.phrases.length - 1;\n\n          // for each bar in phrase\n          var barIndex = 0;\n          var _iteratorNormalCompletion18 = true;\n          var _didIteratorError18 = false;\n          var _iteratorError18 = undefined;\n\n          try {\n            for (var _iterator18 = _phrase3.bars[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n              var _bar3 = _step18.value;\n\n              console.log('\\t\\tbar ' + (barIndex + 1));\n              var lastBarInPhrase = barIndex === _phrase3.bars.length - 1;\n\n              // for each note in rhythm\n              var noteIndex = 0;\n              var _iteratorNormalCompletion19 = true;\n              var _didIteratorError19 = false;\n              var _iteratorError19 = undefined;\n\n              try {\n                for (var _iterator19 = _bar3.rhythm.compiledScore[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n                  var _note2 = _step19.value;\n\n                  // note with no chord set (slash)\n                  var phraseNote = JSON.parse(JSON.stringify(_note2));\n                  phraseNote.lastInPhrase = lastBarInPhrase && noteIndex === _bar3.rhythm.compiledScore.length - 1;\n                  notesSlashed.push(phraseNote);\n\n                  // register note with corresponding chord\n                  var chordedPhraseNote = JSON.parse(JSON.stringify(phraseNote));\n                  chordedPhraseNote.chord = _bar3.chords[_note2.placeholderIndex];\n                  if (!chordedPhraseNote.chord) throw new VexTabException('No chord found for placeholder ' + (_note2.placeholderIndex + 1));\n                  notes.push(chordedPhraseNote);\n\n                  // draw staves when we have completed barsPerLine bars or if the part is done\n                  staveDuration += _note2.duration;\n                  var partDone = lastPhraseInPart && phraseNote.lastInPhrase;\n                  if (staveDuration >= songcheat.barsPerLine * barDuration || partDone) {\n                    console.log((partDone ? 'EOP' : 'EOL') + ' @ ' + staveDuration + ' units: drawing ' + notes.length + ' notes stave' + (songcheat.mode.length > 1 ? 's' : ''));\n\n                    // notation: shows unit.name, chords, accents, stems (slashes) and lyrics\n                    // if tablature is not displayed, it also shows strokes/fingering\n                    // it never shows PM and frets\n                    if (songcheat.mode.indexOf('r') >= 0) {\n                      var strokes = songcheat.mode.indexOf('t') < 0;\n                      vextab += VexTab.Notes2Stave(songcheat, offset, notesSlashed, strokes, 'top', unit.name, -1, true, false);\n                      if (strokes && fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 11, 'Arial-9-normal'); // PIMA on same line as strokes\n                      if (showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, strokes ? 13 : 11, 'Times-11-italic');\n                      if (chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, 2, 'Arial-10-normal');\n                      vextab += 'options space=' + (strokes ? 40 : 20) + '\\n';\n                    }\n\n                    // tablature: shows PM, frets and strokes/fingering\n                    // if notation is not displayed, it also shows unit.name, chords, lyrics and stems (if mode \"ts\")\n                    // it never shows accents\n                    if (songcheat.mode.indexOf('t') >= 0) {\n                      if (stems) vextab += 'options space=' + 30 + '\\n';\n                      vextab += VexTab.Notes2Stave(songcheat, offset, notes, true, false, songcheat.mode.indexOf('r') < 0 ? unit.name : false, stems ? -3 : -1, false, true);\n                      if (fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal'); // PIMA on same line as strokes\n                      if (pmGroups.length > 0) vextab += VexTab.Text2VexTab(pmGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal'); // PM on same line as strokes\n                      if (songcheat.mode.indexOf('r') < 0 && showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, 12, 'Times-11-italic');\n                      if (songcheat.mode.indexOf('r') < 0 && chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, stems ? -1 : 1, 'Arial-10-normal');\n                      vextab += 'options space=' + (songcheat.mode.indexOf('r') ? 30 : 10) + '\\n';\n                    }\n\n                    // space after staves\n                    vextab += 'options space=' + 10 + '\\n';\n\n                    // increment offset\n                    offset += staveDuration;\n\n                    // clear workspace\n                    notes = [];\n                    notesSlashed = [];\n                    staveDuration = 0;\n                  }\n\n                  // next note in rhythm\n                  noteIndex++;\n                }\n\n                // next bar in phrase\n              } catch (err) {\n                _didIteratorError19 = true;\n                _iteratorError19 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion19 && _iterator19.return) {\n                    _iterator19.return();\n                  }\n                } finally {\n                  if (_didIteratorError19) {\n                    throw _iteratorError19;\n                  }\n                }\n              }\n\n              barIndex++;\n            }\n\n            // next phrase in part\n          } catch (err) {\n            _didIteratorError18 = true;\n            _iteratorError18 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion18 && _iterator18.return) {\n                _iterator18.return();\n              }\n            } finally {\n              if (_didIteratorError18) {\n                throw _iteratorError18;\n              }\n            }\n          }\n\n          phraseIndex++;\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      return vextab;\n    }\n  }]);\n  return VexTab;\n}();\n\nexport { VexTab, VexTabException };\n//# sourceMappingURL=songcheat-vextab.esm.js.map\n","module.exports = {\n  \"Bass\": require(\"./Bass.json\"),\n  \"BassAmp360\": require(\"./BassAmp360.json\"),\n  \"BassFuzz\": require(\"./BassFuzz.json\"),\n  \"BassFuzz2\": require(\"./BassFuzz2.json\"),\n  \"BassSubDub\": require(\"./BassSubDub.json\"),\n  \"BassSubDub2\": require(\"./BassSubDub2.json\"),\n  \"Brass\": require(\"./Brass.json\"),\n  \"BritBlues\": require(\"./BritBlues.json\"),\n  \"BritBluesDriven\": require(\"./BritBluesDriven.json\"),\n  \"Buzzy1\": require(\"./Buzzy1.json\"),\n  \"Buzzy2\": require(\"./Buzzy2.json\"),\n  \"Celeste\": require(\"./Celeste.json\"),\n  \"ChorusStrings\": require(\"./ChorusStrings.json\"),\n  \"Dissonant1\": require(\"./Dissonant1.json\"),\n  \"Dissonant2\": require(\"./Dissonant2.json\"),\n  \"DissonantPiano\": require(\"./DissonantPiano.json\"),\n  \"DroppedSaw\": require(\"./DroppedSaw.json\"),\n  \"DroppedSquare\": require(\"./DroppedSquare.json\"),\n  \"DynaEPBright\": require(\"./DynaEPBright.json\"),\n  \"DynaEPMed\": require(\"./DynaEPMed.json\"),\n  \"Ethnic33\": require(\"./Ethnic33.json\"),\n  \"Full1\": require(\"./Full1.json\"),\n  \"Full2\": require(\"./Full2.json\"),\n  \"GuitarFuzz\": require(\"./GuitarFuzz.json\"),\n  \"Harsh\": require(\"./Harsh.json\"),\n  \"MklHard\": require(\"./MklHard.json\"),\n  \"Noise\": require(\"./Noise.json\"),\n  \"Organ2\": require(\"./Organ2.json\"),\n  \"Organ3\": require(\"./Organ3.json\"),\n  \"PhonemeAh\": require(\"./PhonemeAh.json\"),\n  \"PhonemeBah\": require(\"./PhonemeBah.json\"),\n  \"PhonemeEe\": require(\"./PhonemeEe.json\"),\n  \"PhonemeO\": require(\"./PhonemeO.json\"),\n  \"PhonemeOoh\": require(\"./PhonemeOoh.json\"),\n  \"PhonemePopAhhhs\": require(\"./PhonemePopAhhhs.json\"),\n  \"Piano\": require(\"./Piano.json\"),\n  \"Pulse\": require(\"./Pulse.json\"),\n  \"PutneyWavering\": require(\"./PutneyWavering.json\"),\n  \"Saw\": require(\"./Saw.json\"),\n  \"Square\": require(\"./Square.json\"),\n  \"TB303Square\": require(\"./TB303Square.json\"),\n  \"Throaty\": require(\"./Throaty.json\"),\n  \"Triangle\": require(\"./Triangle.json\"),\n  \"Trombone\": require(\"./Trombone.json\"),\n  \"TwelveOpTines\": require(\"./TwelveOpTines.json\"),\n  \"TwelveStringGuitar1\": require(\"./TwelveStringGuitar1.json\"),\n  \"WarmSaw\": require(\"./WarmSaw.json\"),\n  \"WarmSquare\": require(\"./WarmSquare.json\"),\n  \"WarmTriangle\": require(\"./WarmTriangle.json\"),\n  \"Wurlitzer\": require(\"./Wurlitzer.json\"),\n  \"Wurlitzer2\": require(\"./Wurlitzer2.json\")\n}\n","import { Utils } from 'songcheat-core'\nimport waveTables from '@mohayonao/wave-tables'\n\nexport class Player {\n  constructor (audioCtx, notes, config) {\n    this.MODE_RHYTHM = 1 // play beeps only\n    this.MODE_BASS = 2 // when there is a strummed chord, play only bass (no effect onindividual strings)\n    this.MODE_CHORDS = 3 // play actual strummed chords\n\n    config = config || {}\n    config.signature = config.signature || {}\n    config.signature.time = config.signature.time || {}\n\n    // audio context\n    this.audioCtx = audioCtx\n\n    // notes to beep\n    this.notes = notes\n\n    // config: loop or not and callback at end if no loop\n    this.loop = config.loop || false\n    this.onDone = config.onDone || null\n    this.onCountdown = config.onCountdown || function () {}\n\n    // config: capo and signature (tempo, time, shuffle)\n    this.capo = config.capo || 0\n    this.tempo = config.signature.tempo || 100\n    this.beatsPerBar = config.signature.time.beatsPerBar || 4\n    this.beatDuration = config.signature.time.beatDuration || ':q'\n    this.shuffle = config.signature.shuffle ? Utils.duration(config.signature.shuffle) : false\n\n    // tuning, defaults to standard tuning\n    this.tuning = config.tuning || [329.63, // E4\n      246.94, // B3\n      196.00, // G3\n      146.83, // D3\n      110.00, // A2\n      82.41\n    ] // E2\n\n    // play control\n    this.stopped = true\n    this.paused = false\n\n    // initialize to defaults\n    this.speed(100)\n    this.setDisto(0)\n    this.setVolume(50)\n    this.setMode(this.MODE_CHORDS)\n    this.setType(config.type || 'Piano')\n  }\n\n  makeDistortionCurve (amount) {\n    let k = typeof amount === 'number' ? amount : 50\n    let nSamples = 44100\n    let curve = new Float32Array(nSamples)\n    let deg = Math.PI / 180\n    for (let i = 0; i < nSamples; ++i) {\n      let x = i * 2 / nSamples - 1\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x))\n    }\n    return curve\n  }\n\n  /**\n   * duration of the tone in milliseconds\n   * frequency of the tone in hertz\n   * volume of the tone between 0 and 1\n   * type of tone. Possible values are sine, square, sawtooth, triangle, and custom.\n   * callback to use on end of tone\n   */\n  sound (time, duration, frequency, volume, distortion, type, onended) {\n    let audioCtx = this.audioCtx\n    let gainNode = audioCtx.createGain()\n    gainNode.gain.value = volume\n\n    if (distortion) {\n      let distoNode = audioCtx.createWaveShaper()\n      distoNode.curve = this.makeDistortionCurve(parseInt(distortion, 10))\n      distoNode.oversample = '4x'\n      distoNode.connect(audioCtx.destination)\n      gainNode.connect(distoNode)\n    } else gainNode.connect(audioCtx.destination)\n\n    let oscillator = audioCtx.createOscillator()\n    oscillator.connect(gainNode)\n\n    oscillator.frequency.value = frequency\n    oscillator.onended = onended\n\n    // type can be a periodic wave or a standard oscillator type\n    if (waveTables[type]) oscillator.setPeriodicWave(audioCtx.createPeriodicWave(waveTables[type].real, waveTables[type].imag))\n    else oscillator.type = type\n\n    oscillator.start(time)\n    oscillator.stop(time + duration)\n  }\n\n  chord2frequencies (chord, strings, transpose) {\n    let freqs = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      if (!o.mute) freqs.push(this.tuning[o.string - 1] * Math.pow(Math.pow(2, 1 / 12), transpose + o.fret))\n    }\n    return freqs\n  }\n\n  ms_ (note) {\n    // base duration of note\n    let ms_ = note.duration * this.msPerUnit\n\n    // change duration proportions for shuffled notes\n    if (this.shuffle && note.duration === this.shuffle) {\n      if (note.offset % (2 * this.shuffle) === 0) ms_ *= 1.3333\n      else ms_ *= 0.6667\n    }\n\n    return ms_\n  }\n\n  note_ (time) {\n    let audioCtx = this.audioCtx\n    var self = this\n\n    // stop or pause requested\n    if (this.stopped || this.paused) {\n      this.donePlaying = true\n      return true\n    }\n\n    // get note to play\n    if (!this.notes) return false\n    let note = this.notes[this.noteIndex]\n    if (!note) return false\n\n    let isBar = note.offset === 0\n    let isBeat = note.offset % Utils.duration(this.beatDuration) === 0\n    let isUp = note.flags.stroke === 'u' || note.flags.stroke === 'uu'\n    let isDown = note.flags.stroke === 'd' || note.flags.stroke === 'dd'\n    let isArpeggiated = note.flags.stroke && note.flags.stroke.length === 2\n\n    // get number of ms that this note should last\n    let ms = note.tied ? 0 : this.ms_(note)\n\n    // consume next ties note(s) if any\n    for (let nextNoteIndex = this.noteIndex + 1; nextNoteIndex < this.notes.length && this.notes[nextNoteIndex].tied; nextNoteIndex++) ms += this.ms_(this.notes[nextNoteIndex])\n\n    // beep or chord volume\n    let volume = 0.25 * (this.volume / 100.0) // base gain from 0 to 1.5 according to user volume slider\n    if (note.flags.accent) volume *= 1.5 // increase gain by 50% if accent\n    if (note.rest) volume = 0 // silence if rest\n\n    // beep frequency\n    let freqs = [440 * 1.5]\n    if (isBar) freqs[0] *= 2 // octave\n    else if (isBeat) freqs[0] *= 1.5 // quinte\n\n    // get note chord, ignored in rhythm mode\n    let chord = this.mode === this.MODE_RHYTHM ? null : note.chord\n\n    // beep duration is 5 ms\n    // actual notes are played for the whole duration if tied otherwise for 90%\n    let beepduration = chord ? (note.tied ? ms : ms * 0.90) : Math.min(ms, 5)\n\n    // for rhythm type is always square and no distortion, for actual notes use the user-defined settings\n    let type = chord ? this.type : 'square'\n    let distortion = chord ? this.distortion : null\n\n    // played chord (for a rest, chord is set but strings is not)\n    if (chord && note.strings) {\n      // get frequencies for chord notes\n      freqs = this.chord2frequencies(chord, this.mode === this.MODE_BASS ? note.strings.replace(/\\*/g, 'B') : note.strings, this.capo)\n\n      // reverse string order if up stroke\n      if (isUp) freqs = freqs.reverse()\n\n      // adjust volume according to number of simultaneous notes\n      // volume = volume / (2.0 * Math.sqrt(freqs.length));\n      // UPDATE: no, bass among chords is otherwise louder than it should\n      // UPDATE: instead increase volume only if BASS ONLY mode\n      if (this.mode === this.MODE_BASS) volume *= 3\n    }\n\n    // set next note to play\n    this.noteIndex = (this.noteIndex + 1) % this.notes.length\n\n    // info message, scheduled to display at the same time as oscillator will play our sound\n    let what = note.rest ? 'REST' : (note.tied ? 'TIED' : (chord ? chord.name + '/' + freqs.length + ' ' + (isDown ? 'B' : '') + (isUp ? 'H' : '') : 'BEEP'))\n    let message = (isBar ? '\\n|\\t' : '\\t') + ('[' + what + ']').padEnd(10, ' ') + (note.offset + Utils.durationcode(note.duration)).padEnd(5, ' ') + ' ' + ms.toFixed(0) + ' ms [VOL ' + (volume * 100) + '] ' + (isBar ? ' [BAR]' : (isBeat ? ' [BEAT]' : '')) + (note.flags.accent ? ' [ACCENT]' : '')\n    setTimeout(function () { console.info(message) }, Math.max(0, time - audioCtx.currentTime) * 1000)\n\n    // jump to next note if tied\n    if (note.tied) {\n      self.note_(time)\n      return\n    }\n\n    // play beep (1 note) or chord (N notes)\n    let fIndex = 0\n    let delay = 0\n    for (let frequency of freqs) {\n      // handle next node when last note has done playing\n      this.sound(time + delay / 1000.0, (beepduration - delay) / 1000.0, frequency, volume, distortion, type, fIndex < freqs.length - 1 ? null : function () {\n        // back on first note: stop and callback if not loop\n        if (self.noteIndex === 0 && !self.loop) {\n          self.stop()\n          if (self.onDone) self.onDone()\n        } else self.note_(time + ms / 1000.0)\n      })\n\n      // simulate the fact that strings hit first will sound first (but they'll all stop at the same time, hence substrating delay from beepduration above)\n      // when a chord is arpeggiated, take 3/4 of available duration to hit strings the one after the other\n      delay += (isArpeggiated ? (beepduration * 0.75) / freqs.length : (note.tied ? 0 : 10))\n\n      // simulate the fact that first hit strings will sound louder\n      volume *= 0.95\n\n      fIndex++\n    }\n  }\n\n  stop () {\n    this.stopped = true\n    this.paused = false\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  pause () {\n    this.stopped = false\n    this.paused = true\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  play (countdown) {\n    let audioCtx = this.audioCtx\n    let self = this\n\n    if (!this.paused) this.noteIndex = 0\n    this.stopped = false\n    this.paused = false\n\n    this.onCountdown(countdown)\n    if (countdown) this.cd = setTimeout(function () { self.play(countdown - 1) }, 1000)\n    else {\n      // compute for each note the offset wrt the bar it's contained in\n      let offset = 0\n      for (let note of this.notes) {\n        note.offset = offset\n        offset = (offset + note.duration) % (this.beatsPerBar * Utils.duration(this.beatDuration))\n      }\n\n      this.note_(audioCtx.currentTime)\n    }\n  }\n\n  rewind () {\n    if (this.stopped) return\n\n    if (this.paused) {\n      this.noteIndex = 0\n      return\n    }\n\n    let self = this\n    this.donePlaying = false\n    this.stop()\n    let recfun = function () {\n      if (self.donePlaying) self.play()\n      else setTimeout(recfun, 100)\n    }\n    recfun()\n  }\n\n  getTempo () {\n    return (this.tempo * this.speedpct / 100.0).toFixed(0)\n  }\n\n  speed (pct) {\n    if (pct < 0) throw new Error('Invalid tempo percentage: ' + pct)\n\n    this.speedpct = pct\n\n    // compute ms per duration unit based on given tempo and beat duration\n    let msPerBeat = 60000 / (this.tempo * this.speedpct / 100.0) // ms/beat = ms/minute : beats/minute\n    this.msPerUnit = msPerBeat / Utils.duration(this.beatDuration) // ms/unit = ms/beat : units/beat\n    console.info('Player gone to ' + msPerBeat + ' ms / beat')\n  }\n\n  speedup (step) {\n    this.speed(Math.min(500, this.speedpct + step))\n  }\n\n  slowdown (step) {\n    this.speed(Math.max(20, this.speedpct - step))\n  }\n\n  setMode (mode) {\n    this.mode = parseInt(mode, 10)\n    console.info('Player gone to mode ' + mode)\n  }\n\n  setType (type) {\n    this.type = type\n    console.info('Player gone to type ' + type)\n  }\n\n  setDisto (d) {\n    this.distortion = parseInt(d, 10)\n    console.info('Player gone to disto ' + d)\n  }\n\n  setVolume (v) {\n    this.volume = parseInt(v, 10)\n    console.info('Player gone to volume ' + v)\n  }\n}\n"]}